<%args>
	$person
	$person_settings
	$session
</%args>
<%init>

	unless ($person && $session) {
		return;
	}

#	if ($r->hostname ne "www.tabroom.com" && $r->hostname ne "mason.dev.tabroom.com") {
#		return;
#   }

	my $subscription = eval {
		return JSON::decode_json($session->push_notify);
	};

</%init>

	<a
		id       = "push-bell"
		tabindex = "-1"
		class    = "fa fa-2x fa-bell"
		alt      = "Tabroom Notifications"
		onClick  = "showPushLogin();";
	></a>

	<div
		id      = "push-subscribe"
		class   = "centeralign"
		style   = "display: none;"
		onClick = "hidePushLogin();"
	>
		<span class='nospace ninetenths' id='push-blocked'>
			<p class="biggish semibold leftalign blueborderbottom">
				Your Browser Is Blocking Us
			</p>

			<p class="leftalign">
				An extension or ad-blocker is blocking our ability to send you
				blast notifications on this browser.  Please disable any such
				extensions if you want to get Tabroom notifications here.
			</p>

			<p>
				<span class='fourfifths leftalign'>
				<span class="redtext semibold">NEW: ON iPHONES OR iPADS:</span>
					Click the Share button above, and select "Add to Home
					Screen." Then launch Tabroom from that icon on your home
					screen, and you can click this bell and get notifications!
					After setting up notifications you do NOT need to launch
					Tabroom from that icon again.
				</span>
				<span class="fifth centeralign" style="max-width: 64px;">
					<img src="/lib/images/ios-share.jpg" style="width: 100%; height: 100%;">
					<span class="full centeralign semibold bluetext">
						Share Button
					</span>
				</span>

			</p>
		</span>

		<span class='hidden nospace ninetenths' id='push-impossible'>
			<p class="biggish semibold leftalign blueborderbottom">
				Your browser blocks notifications
			</p>

			<p>
				To send notifications to this device, you must allow Tabroom to
				send them to you. This browser has been configured to block
				notifications.
			</p>

			<p>
				On most browsers, fixing this requires you to it the
				<img src="/lib/images/url_settings.png" height="24" />
				icon above (next to the URL) and click the notifications settings.
			</p>
		</span>

		<span class='hidden nospace ninetenths' id='push-permission'>
			<p class="biggish semibold leftalign blueborderbottom">
				Browser permission required
			</p>

			<p>
				To send notifications to this device, you must allow
				Tabroom to send them to you.
			</p>

			<p>
				If this button does not prompt you to allow notifications
				above, then you have blocked this site (or all sites) from
				notifications, and will have to correct it in your browser
				settings.
			</p>

			<div class="full rightalign">
				<span class="half centeralign">
					<button
						class   = "medium orange"
						onClick = "OneSignal.Notifications.requestPermission();"
					>Allow Blasts</button>
				</span>
			</div>

		</span>

		<span class='hidden nospace ninetenths' id='push-form'>

			<p class="biggish semibold leftalign blueborderbottom">
				Enable Tabroom Blasts
			</p>

			<p>
				Most cell providers no longer allow Tabroom to text our users
				for free. But now, you can subscribe to get your Tabroom
				blasts on this browser. Web Blasts work on both mobile and
				desktop devices.
			</p>

			<div class="full rightalign">
				<span class="half centeralign">
					<div
						id    = "toprow-push-box"
						class = 'onesignal-customlink-container'
					></div>
				</span>
			</div>
		</span>
	</div>

	<script src="/lib/javascript/onesignal/OneSignalSDK.page.js" defer></script>

	<script>

		window.OneSignalDeferred = window.OneSignalDeferred || [];

		window.OneSignalDeferred.push( async (OneSignal) => {

			console.log('Hello');

			async function checkStatus() {

				const tabroomId = "<% $person->id == 1 ? 100 : $person->id %>";
				let currentPush   = "<% $person_settings->{"push_notify"} %>";
				let sessionSubId  = "<% $session->push_notify %>";
				let oneSignalUser = {};

				console.log('Give it a go');
				console.log(`Parent OneSignal object is now`);
				console.log(JSON.stringify(OneSignal));

				try {

					oneSignalUser = await $.ajax({
						type : 'GET',
						url  : `<% $Tab::indexcards_url %>/user/push/find`,
						crossDomain : true,
						xhrFields: {
							withCredentials: true
						},
					});

					oneSignalUser.subscriptions?.forEach( (sub) => {
						if (
							sub.id === sessionSubId
						) {
							oneSignalUser.currentSubscription = sub;
						}
					});

					console.log(`At this point I have current subscription: ${JSON.stringify(oneSignalUser.currentSubscription)}`);

					if (oneSignalUser?.subscriptions?.length > 19) {

						console.log(`${ oneSignalUser?.subscriptions?.length } subscriptions found.  Pruning inactives `);

						oneSignalUser.subscriptions.forEach( async (sub) => {
							if (!sub.enabled) {
								await $.ajax({
									type : 'DELETE',
									url  : `<% $Tab::indexcards_url %>/user/push/unsub/${sub.id}`,
									crossDomain : true,
									xhrFields: {
										withCredentials: true
									},
								});
							}
						});
					}

					if (
						(oneSignalUser.currentSubscription && oneSignalUser.currentSubscription?.id !== sessionSubId)
					) {

						console.log(`Browser subscription ${oneSignalUser.currentSubscription?.id} does not match session ${sessionSubId}`);
						sessionSubId = undefined;
					}

					if (!sessionSubId) {

						console.log(`Updating to the proper session key ${oneSignalUser.currentSubscription?.id} to the session`);

						const response = await $.ajax({
							type        : 'POST',
							data        : oneSignalUser,
							url         : `<% $Tab::indexcards_url %>/user/push/enable`,
							crossDomain : true,
							xhrFields: {
								withCredentials: true
							},
						});

						console.log(`Current subscription enabled.  Response was ${JSON.stringify(response)}`);
					}

				} catch (err) {
					console.log(err);
				}

				console.log(`Current user`);
				console.log(JSON.stringify(oneSignalUser));
				console.log(`Current subscription object`);
				console.log(JSON.stringify(oneSignalUser.currentSubscription));

				if (oneSignalUser.currentSubscription?.enabled) {
					bellGood();
				} else {
					bellBad();
				}

				checkPerms();
			};

			function checkPerms() {

				if (!('Notification' in window)) {
					permsImpossible();
				} else if (Notification.permission === "granted") {
					permsGood();
				} else if (Notification.permission === "denied") {
					permsImpossible();
    			} else {
					permsBad();
					bellBad();
				}
  			}

			try {

				console.log(`Initializing this shit`);

				const reply = await OneSignal.init({
					appId               : "<% $Tab::onesignal_app_id %>",
					safari_web_id       : "<% $Tab::onesignal_safari_id %>",
					autoResubscribe     : true,
					persistNotification : false,
					notifyButton  : {
						enable     : false,
					},
					welcomeNotification : {
						title           : 'Your Tabroom Blasts Enabled!',
						message         : 'Tabroom blasts for <% $person->email %> will now arrive looking like this message. If you want to disable them on this device, go to Tabroom in your browser (or click a blast notification) and click the green bell in the top right corner of any Tabroom screen.',
						url             : 'https://www.tabroom.com/user/home.mhtml'
					},
					promptOptions: {
						customlink: {
							enabled : true,
							style   : 'button',
							size    : 'medium',
							color   : {
								button : 'var(--dark-red)',
								text   : 'var(--background-white)',
							},
							text: {
								subscribe   : 'Subscribe This Device',
								unsubscribe : 'Unsubscribe This Device',
							}
						},
						autoPrompt : true,
						delay : {
							pageViews : 3,
							timeDelay : 30
						},
						unsubscribeEnabled: true,
					}

				});

				console.log(`Status Checked`);
				console.log(reply);
				checkStatus();

			} catch (err) {

				console.log(`OneSignal initialization failed.  Disabling push notification on this browser`);
				console.log(err);
				checkStatus();
			}

			function permChanger(event) {

				if (event?.current?.optedIn) {
					OneSignal.Notifications.permission = true;
					permsGood();
				} else {
					permsBad();
				}
				checkStatus();
			}

			const subChanger = (event) => {

				console.log(JSON.stringify(event));

				console.log(`Sub Changer Called with id ${event?.current?.id}`);

				if (event?.current?.id) {

					console.log(`Asking for the session ${event.current.id} for session <% $session->id %>`);

					$.ajax({
						type        : 'POST',
						data        : { id: event.current.id, sessionId: <% $session->id %> },
						url         : `<% $Tab::indexcards_url %>/user/push/enable`,
						crossDomain : true,
						xhrFields: {
							withCredentials: true
						},
					});
				}

				if (event?.current?.optedIn) {
					bellGood();
				} else {
					bellBad();
				}
			};

			OneSignal.User.PushSubscription.addEventListener("change", subChanger);
			OneSignal.Notifications.addEventListener("permissionChange", permChanger);

		});

		function showPushLogin() {
			$(`#push-subscribe`).slideToggle();
			$(`#push-bell`).toggleClass('pushed', 500);
		};

		function hidePushLogin() {
			$(`#push-subscribe`).delay(200).slideToggle();
			$(`#push-bell`).removeClass('pushed', 500);
		};

		function permsImpossible() {
			$(`#push-blocked`).addClass('hidden');
			$(`#push-permission`).addClass('hidden');
			$(`#push-form`).addClass('hidden');
			$(`#push-impossible`).removeClass('hidden');
		}

		function permsGood() {
			$(`#push-blocked`).addClass('hidden');
			$(`#push-permission`).addClass('hidden');
			$(`#push-impossible`).addClass('hidden');
			$(`#push-form`).removeClass('hidden');
		}

		function permsBad() {
			$(`#push-blocked`).addClass('hidden');
			$(`#push-permission`).removeClass('hidden');
			$(`#push-impossible`).addClass('hidden');
			$(`#push-form`).addClass('hidden');
		}

		function bellBad() {
			$(`#push-bell`).addClass('redtext');
			$(`#push-bell`).removeClass('greentext');
			$(`#push-bell`).attr('title', "You will not receive Tabroom notifications on this device.  Click to subscribe");
		}

		function bellGood() {
			console.log(`I was called`);
			$(`#push-bell`).removeClass('redtext');
			$(`#push-bell`).addClass('greentext');
			$(`#push-bell`).attr('title', "You are receiving Tabroom notifications on this device.  Click to unsubscribe");
		}

	</script>


