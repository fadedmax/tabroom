<%args>
	$entry
	$style => undef
	$full  => undef
</%args>
<%init>

	my $code;
	my $event = $entry->event;
	my $school = $entry->school;
	my %event_settings = $event->all_settings();
	my $tourn = $event->tourn;

	my $setting = $event_settings{"code_style"};

	if ($setting eq "nsda_nats") {

		my $eventcode = $event_settings{'nsda_event_code'};
		my @entries = $event->entries(unconfirmed => 0);

		my $max_code = 100;

        foreach my $oentry (List::Util::shuffle @entries) {

			next if $oentry->id == $entry->id;
			my $code = $oentry->code;

			$code =~ s/^[^$eventcode]*$eventcode//g;

			$code++;
            $code++ if $code == 169;
            $code++ if $code == 269;
            $code++ if $code == 420;
            $code++ if $code == 666;
			$max_code = $code if $code > $max_code;
        }

		my $new_code = $eventcode.$max_code;
		return $new_code;
	}

	my $enable_hybrids++ if $event_settings{"hybrids"};
	my $separate_codes = $event_settings{"separate_codes"};

	my $hybrid = Tab::Strike->search(
		entry => $entry->id,
		type  => "hybrid"
	)->first if $enable_hybrids;

	my $school_code = eval {
		return $school->code;
	};

	my $short_name = eval {
		return $m->comp("/funclib/short_name.mas", name => $school->name);
	};

	my $hybrid_school_code;
	my $hybrid_school_name;

	if ($hybrid) {
		$hybrid_school_code = $hybrid->school->code;
		$hybrid_school_name = $m->comp("/funclib/short_name.mas", name => $hybrid->school->name);
	}

	if ($separate_codes) {

		my $congress_code = $school->setting("congress_code");
		$school_code = $congress_code if $congress_code;

		if ($hybrid) {
			my $hybrid_congress_code = $hybrid->school->setting("congress_code");
		}
	}

	my $dbh = Tab::DBI->db_Main;

	my $sth = $dbh->prepare("
		select
			entry.id, student.id, student.first, student.last
		from student, entry, entry_student es
		where entry.id = ?
			and entry.id = es.entry
			and es.student = student.id
		order by es.id
	");

	$sth->execute($entry->id);
	my $students = $sth->fetchall_hash();

	if (
		$setting eq "names"
		|| $setting eq "school_names"
		|| $setting eq "school_first_names"
		|| $setting eq "school_last_names"
		|| $setting eq "last_names"
		|| $setting eq "names_lastfirst"
		|| $setting eq "school_name_only"
	) {

		my $full_name;
		my $first_name;
		my $last_name;

		foreach my $student (@{$students}) {

			$full_name .= " & " if $full_name;
			$full_name .= $student->{first}." ".$student->{last};

			$first_name .= " & " if $first_name;
			$first_name .= $student->{first};

			$last_name .= " & " if $last_name;
			$last_name .= $student->{last};
		}

		my $name;

		if ($full) {

			$name = $school->name
				if $setting eq "school_names"
				|| $setting eq "school_first_names"
				|| $setting eq "school_last_names"
				|| $setting eq "school_name_only";

			$name =~ s/CP$//g unless $name eq "CP";
			$name =~ s/College Prep$//g unless $name eq "College Prep";

		} else {

			$name = $short_name
				if $setting eq "school_names"
				|| $setting eq "school_first_names"
				|| $setting eq "school_last_names"
				|| $setting eq "school_name_only";

			$name =~ s/CP$//g unless $name eq "CP";
			$name =~ s/College Prep$//g unless $name eq "College Prep";
		}

		unless ($setting eq "school_name_only") {

			if ($full && $hybrid) {

				$name .= "/".$hybrid_school_name." " if $setting eq "school_names";
				$name .= "/".$hybrid_school_name." " if $setting eq "school_first_names";
				$name .= "/".$hybrid_school_name." " if $setting eq "school_last_names";

			} elsif ($hybrid) {

				$name .= "/".$short_name." " if $setting eq "school_names";
				$name .= "/".$short_name." " if $setting eq "school_first_names";
				$name .= "/".$short_name." " if $setting eq "school_last_names";

			} else {
				$name .= " ";
			}

			$name .= $full_name
				if $setting eq "names"
				|| $setting eq "school_names";

			$name .= $first_name
				if $setting eq "school_first_names";

			$name .= $last_name
				if $setting eq "school_last_names"
				|| $setting eq "last_names";

			$name .= $last_name.", ".$first_name
				if $setting eq "names_lastfirst";

			chomp $name;
		}

		$name =~ s/^\s+//;
		$name =~ s/\s+$//;
		return $name;

	} elsif ( $setting eq "numbers"
		|| $setting eq "school_number"
		|| $setting eq "schoolname_code"
	) {

		my $non_unique = $tourn->setting("nonunique_entry_codes");

		my $limit = " and event.id = ".$event->id;

		unless ($non_unique) {
			$limit = " and event.tourn = ".$tourn->id;
		}

		my $sth = $dbh->prepare("
			select entry.id, entry.code, entry.event
				from entry, event
			where 1=1
				and event.id = entry.event
				and entry.id != ?
			$limit
			order by entry.code
		");

		$sth->execute($entry->id);
		my $results = $sth->fetchall_hash();
		my %taken_codes = map {$_->{code} => $_->{id}} @{$results};

		my $existing = $entry->code();
		undef $existing if $existing eq "PENDING!";

		# If I have a code already, and it's not taken just keep it.
		if ($existing && (not defined $taken_codes{$existing})) {
			return $existing;
		}

		my $code_start = $event_settings{"code_start"};
		$code_start = 100 unless $code_start;

		my $school_name;

		if ($full) {
			$school_name = $school->name;
		} else {
			$school_name = $short_name;
		}

		#Forbidden codes for the children and those who act like them.
		$taken_codes{69}++;
		$taken_codes{6969}++;
		$taken_codes{666}++;
		$taken_codes{420}++;

		if ($setting eq "school_number") {

			while (
				$taken_codes{$school_code." ".$code_start}
				|| $taken_codes{$code_start}
			) {
				$code_start++;
			}

		} elsif ($setting eq "schoolname_code") {

			while (
				$taken_codes{$school_name." ".$code_start}
				|| $taken_codes{$code_start}
			) {
				$code_start++;
			}

		} else {

			Tab::debuglog("Code $code_start taken value ".$taken_codes{$code_start});

			while ($taken_codes{$code_start}) {
				$code_start++;
			}
		}

		$code = $school_code." " if $setting eq "school_number";
		$code = $school_name." " if $setting eq "schoolname_code";

		if ($hybrid) {

			if ($setting eq "school_number") {
				$code .= "/".$hybrid_school_code;
			} elsif ($setting eq "schoolname_code") {
				$code .= "/".$hybrid_school_name;
			}
		}

		$code .= $code_start;
		$code =~ s/^\s+//;
		$code =~ s/\s+$//;

		return $code;

	} else {

		my @entries = $event->entries(unconfirmed => 0);
		my %entry_code = map { $_->code => $_->id } @entries;

		if ($setting eq "full_initials" || $setting eq "register") {

			if ($full) {
				$school_code = $short_name;
				$school_code .= "/".$hybrid_school_name if $hybrid;
			} else {
				$school_code = $short_name;
				$school_code .= "/".$hybrid_school_name if $hybrid;
			}
		}

		if ($setting eq "initials") {
			$school_code = $school_code;
			$school_code .= "/".$hybrid_school_code if $hybrid;
		}

		if ($setting eq "code_name") {
			$school_code .= "/".$hybrid_school_code if $hybrid;
		}

		$school_code =~ s/CP$//g unless $school_code eq "CP";
		$school_code =~ s/College Prep$//g unless $school_code eq "College Prep";

		if (@{$students}) {
			$entry->setting('tba', 0);
		}

		return $school_code." TBA" if $entry->setting("tba");

		if ($setting eq "code_name") {

			if (scalar @{$students} == 1) {
				$code = ${$students}[0]->{first}." ".${$students}[0]->{last};
			} else {
				foreach my $student (@{$students}) {
					$code .= " & " if $code;
					$code .= $student->{last};
				}
			}

		} else {

			if (scalar @{$students} == 1) {
				$code .= ucfirst(substr(${$students}[0]->{first},0,1)).ucfirst(substr(${$students}[0]->{last},0,1));
			} else {
				foreach my $student (@{$students}) {
					$code .= ucfirst(substr($student->{last},0,1));
				}
			}

			if ($entry_code{$school_code." ".$code}
				&& $entry_code{$school_code." ".$code} != $entry->id
			) {

				undef $code;

				if (scalar @{$students} == 1) {
					$code .= ucfirst(substr(${$students}[0]->{first},0,1)).ucfirst(substr(${$students}[0]->{last},0,2));
				} else {
					foreach my $student (@{$students}) {
						$code .= ucfirst(substr($student->{last},0,2));
					}
				}
			}

			if ($entry_code{$school_code." ".$code}
				&& $entry_code{$school_code." ".$code} != $entry->id
			) {

				undef $code;

				if (scalar @{$students} == 1) {
					$code = ucfirst(substr(${$students}[0]->{first},0,2)).ucfirst(substr(${$students}[0]->{last},0,2));
				} else {
					foreach my $student (@{$students}) {
						$code .= ucfirst(substr($student->{last},0,3));
					}
				}
			}

			$code = "XX" if $entry_code{$school_code." ".$code}
					&& $entry_code{$school_code." ".$code} != $entry->id;

			while ($entry_code{$school_code." ".$code}
				&& $entry_code{$school_code." ".$code} != $entry->id
			) {
				$code++;
			}

		}

		my $full_code = $school_code." ".$code;

		$full_code =~ s/^\s+//;
		$full_code =~ s/\s+$//;

		return $full_code;

	}

</%init>
