<%args>
	$tourn
	$tourn_settings
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	# Used for single case debugging.
	my $school_id;
	# My $school_id = 690227;
	my %school_data;

	Tab::Event->set_sql("has_fee" => "
		select * from event where tourn = ? and fee > 0
	");

	my @events = Tab::Event->search_has_fee($tourn->id);
	my %event_settings;

	foreach my $event (@events) {
		%{$event_settings{$event->id}} = $event->all_settings();
		$event_settings{$event->id}{"fee"} = $event->fee;
	}

	my @categories = $tourn->categories();
	my %category_settings;

	foreach my $category (@categories) {
		%{$category_settings{$category->id}} = $category->all_settings();
		$category_settings{$category->id}{"shifts"} = $category->shifts();
	}

	my @entries = $m->comp(
		"/funclib/tourn_entries.mas",
			tourn     => $tourn,
			all       => 1,
			school_id => $school_id,
	);

	my %schools;
	foreach my $entry (@entries) {
		push @{$schools{"entries"}{$entry->schoolid}}, $entry;
	}

	my @judges = $m->comp(
		"/funclib/tourn_judges.mas",
			tourn     => $tourn,
			school_id => $school_id,
			all       => 1
	);

	foreach my $judge (@judges) {
		if ($judge->covers > 0) {
			push @{$schools{"judges"}{$judge->schoolid}{$judge->covers}}, $judge;
		} else {
			push @{$schools{"judges"}{$judge->schoolid}{$judge->categoryid}}, $judge;
		}
		push @{$schools{"judges"}{$judge->schoolid}{"all"}}, $judge;
	}

	my @fines = $m->comp(
		"/funclib/tourn_fines.mas",
			tourn     => $tourn,
			school_id => $school_id,
			all       => 1
	);

	foreach my $fine (@fines) {
		push @{$schools{"fines"}{$fine->schoolid}}, $fine;

		if ($fine->payment) {
			$school_data{$fine->schoolid}{"payments"} += $fine->amount;
		} else {
			$school_data{$fine->schoolid}{"fines"} += $fine->amount;
		}
	}

	my @concessions = $tourn->concessions();

	if (@concessions) {
		%{$schools{"orders"}} = $m->comp(
			"/funclib/tourn_purchases.mas",
			school_id => $school_id,
			tourn     => $tourn
		);
	}

	my %school_settings = $m->comp(
		"/funclib/school_settings.mas",
		school_id => $school_id,
		tourn     => $tourn
	);

	my @hotels = $tourn->hotels;

	if (@hotels) {
		%{$tourn_settings->{$tourn->id}{"hotels"}} = map {$_->id => $_} @hotels;
	}

	foreach my $school_id (keys %school_settings) {

		if (@hotels) {
			$schools{"hotels"}{$school_id} = $school_settings{$school_id}{"hotel"};
		}

		$schools{"entry_fee_discount"}{$school_id}      = $school_settings{$school_id}{"entry_fee_discount"};
		$schools{"all_fee_discount"}{$school_id}        = $school_settings{$school_id}{"all_fee_discount"};
		$schools{"concession_fee_discount"}{$school_id} = $school_settings{$school_id}{"concession_fee_discount"};
		$schools{"individuals"}{$school_id}             = $school_settings{$school_id}{"individuals"};
		$schools{"judge_surcharge"}{$school_id}         = $school_settings{$school_id}{"judge_surcharge"};
		$schools{"no_judge_burden"}{$school_id}         = $school_settings{$school_id}{"no_judge_burden"};
	}

	my @hires = $m->comp(
		"/funclib/tourn_hires.mas",
		school_id => $school_id,
		tourn     => $tourn
	);

	foreach my $hire (@hires) {
		push @{$schools{"hires"}{$hire->schoolid}{$hire->categoryid}}, $hire;
		push @{$schools{"hires"}{$hire->schoolid}{"all"}}, $hire;
	}

	my $worlds;
	my $worlds_id;
	my %invoiced;

	Tab::EventSetting->set_sql( adjustments => "
        select adjustment.id
    	    from event, event_setting adjustment
        where event.tourn = ?
			and event.id = adjustment.event
			and adjustment.tag = 'adjust_judges_fees'
	");

	$tourn_settings->{"adjustments"}++ if Tab::EventSetting->search_adjustments($tourn->id);

	if ($tourn_settings->{"nsda_nats"}) {

		my @worlds_events = $tourn->events(type => "wsdc");

		if (@worlds_events) {

			$worlds = shift @worlds_events;
			$worlds_id = $worlds->id;

			my $worlds_sth = $dbh->prepare("
				select student.id, school.id as schoolid
				from student, entry_student, entry, chapter, school, event, category
				where entry.event = ?
					and entry.id = entry_student.entry
					and entry_student.student = student.id
					and student.chapter = chapter.id
					and chapter.id = school.chapter
					and school.tourn = category.tourn
					and category.id = event.category
					and event.id = entry.event
			");

			$worlds_sth->execute($worlds_id);

			while (
				my ($student_id, $school_id) = $worlds_sth->fetchrow_array()
			) {
				push @{$schools{"worlds"}{$school_id}}, $student_id;
			}
		}
	}

	if (
		$tourn_settings->{"nsda_ms_nats"}
		|| $tourn_settings->{"nsda_billing"}
	) {
		$tourn_settings->{"nsda_nats"}++;
	}

	if ($tourn_settings->{"nsda_nats"}) {
		my $invoiced_sth = $dbh->prepare("
			select school.id, invoice.total
				from school, invoice
				where invoice.school = school.id
				and school.tourn = ?
		");

		$invoiced_sth->execute($tourn->id);
		my $results = $invoiced_sth->fetchall_hash();
		foreach my $ref (@{$results}) {
			$invoiced{$ref->{id}} += $ref->{total};
		}
	}

	my %school_by_id;

	if ($school_id > 0) {
		%school_by_id = map {$_->id => $_} Tab::School->retrieve($school_id);
	} else {
		%school_by_id = map {$_->id => $_} $tourn->schools();
	}

	my $limit;

	if ($school_id > 0) {
		$limit = "and school.id = ".$school_id;
	}

    my $school_sth = $dbh->prepare("
        select school.id, school.name, school.state, chapter.nsda, chapter.id
			from school
			left join chapter on school.chapter = chapter.id
        where school.tourn = ?
			$limit
			and school.chapter > 0
	");

    $school_sth->execute($tourn->id);

    while (
        my (
			$school_id, $school_name, $school_state, $chapter_nsda, $chapter_id
		) = $school_sth->fetchrow_array()
    ) {
        $school_data{$school_id}{"name"}       = $school_name;
        $school_data{$school_id}{"nsda"}       = $chapter_nsda;
        $school_data{$school_id}{"chapter"}    = $chapter_id;
        $school_data{$school_id}{"state"}      = $school_state;
        $school_data{$school_id}{"short_name"} = Tab::short_name($school_name);
    }

	Tab::SchoolSetting->set_sql( rm_balance => "
		delete school_setting.*
			from school_setting, school
		where school.tourn = ?
			and school.id = school_setting.school
			and school_setting.tag = 'balance'
	");

	Tab::SchoolSetting->sql_rm_balance->execute($tourn->id);

	SCHOOL:
	foreach my $school_id (
		sort {$school_data{$a}{"short_name"} cmp $school_data{$b}{"short_name"}}
		keys %school_data
	) {

		my ($balance, $feline_ref, $total_ref) =
			$m->comp("/funclib/school_fees.mas",
				school            => $school_by_id{$school_id},
				tourn             => $tourn,
				tourn_settings    => $tourn_settings,
				categories        => \@categories,
				category_settings => \%category_settings,
				events            => \@events,
				concession_array  => \@concessions,
				event_settings    => \%event_settings,
				all               => 1,
				bulk              => 1,
				entries           => $schools{"entries"}{$school_id},
				schools           => \%schools,
				worlds_event      => $worlds_id
			);

		if ($balance == 0 && (not defined $ARGS{"all"})) {
			delete $school_data{$school_id};
			next SCHOOL;
		}

		$school_data{$school_id}{"individuals"} = $schools{"individuals"}{$school_id};

		$school_data{$school_id}{"total_entries"} += scalar @{$schools{"entries"}{$school_id}}
			if $schools{"entries"}{$school_id};

		$school_data{$school_id}{"total_entries"} += scalar @{$schools{"worlds"}{$school_id}}
			if $schools{"worlds"}{$school_id};

		$school_data{$school_id}{"total_fees"} = sprintf("%.2f", $total_ref->{"total_fees"});
		$school_data{$school_id}{"payments"} = sprintf("%.2f", $total_ref->{"payments"});
		$school_data{$school_id}{"balance"} = sprintf("%.2f", $balance);

		if ($tourn_settings->{"nsda_nats"}) {

			$school_data{$school_id}{"invoiced"} = sprintf ("%.2f", $invoiced{$school_id});

			$school_data{$school_id}{"uninvoiced"} =
				$school_data{$school_id}{"total_fees"} - $school_data{$school_id}{"invoiced"};

			# Commented b/c of the duplicate invoice mess going on with Blu CLP 5/19/21
			#$school_data{$school_id}{"uninvoiced"} = 0
			#	if $school_data{$school_id}{"uninvoiced"} < 0
		}


		if ($ARGS{"save_status"} && $balance > 0) {
			Tab::SchoolSetting->create({
				school => $school_id,
				tag    => 'balance',
				value  => $balance
			});
		}

	}

	return %school_data;

</%init>
