<%args>
	$body
	$subject
	$from            => undef
	$from_string     => undef
	$to              => undef
	$array           => undef
	$accounts        => undef
	$cc_accounts     => undef
	$raw             => undef
	$cc              => undef
	$no_footer       => undef
	$attachment_type => undef
	$attachment_name => undef
	$attachment_path => undef
	$override        => undef
</%args>
<%init>

	use Email::Stuffer;
	use Email::Sender::Transport::SMTP qw();
	use HTML::FromText;
	use Text::Wrap;

	return unless ($from || $from_string);

	my $now = DateTime->now;
	my $epoch = $now->epoch;
	$epoch = substr($epoch, -7);

	if ($from_string eq "nsda") {

		if ($ARGS{"district"}) {

			$from_string = "NSDA ".$ARGS{"district"}->name." <districts_$epoch".'@www.tabroom.com>';

			if ($ARGS{"nsda_reply_to"}) {
				$ARGS{"reply_to"} = $ARGS{"nsda_reply_to"}->first." ".$ARGS{"nsda_reply_to"}->last." <".$ARGS{"nsda_reply_to"}->email.">";
			}

		} elsif ($from) {

			$from_string = $from->first." ".$from->last." <info_$epoch".'@speechanddebate.org>';

			if ($ARGS{"nsda_reply_to"}) {
				$ARGS{"reply_to"} = $ARGS{"nsda_reply_to"}->first." ".$ARGS{"nsda_reply_to"}->last." <".$ARGS{"nsda_reply_to"}->email.">";
			} else {
				$ARGS{"reply_to"} = 'info@speechanddebate.org';
			}

		} else {

			$from_string = "NSDA Nationals Registration <info_$epoch".'@speechanddebate.org>';
			$ARGS{'reply_to'} = 'info@speechanddebate.org';
		}
	}

	unless ($from_string) {
		$from_string = $from->first." ".$from->last." <".$now->epoch."\@www.tabroom.com>";
		$ARGS{"reply_to"} = $from->first." ".$from->last." <".$from->email.">";
	}

	if ($ARGS{"reply_to"}) {
		$ARGS{"reply_to"} = $ARGS{"reply_to"};
	}

	my @send_array;

	if ($array) {
		push (@send_array, @{$array});
	}

	if ($to) {
		unless (
			$to->no_email == 1
			&& (not defined $override)
		) {
			push @send_array, $to->email
		}
	}

	if ($raw) {
		push @send_array, split(/\,/, $raw);
	}

	if ($accounts) {
		foreach my $account (@{$accounts}) {
			next if ($account->no_email && (not defined $override));
			push @send_array, $account->email;
		}
	}

	my %seen = ();
	@send_array = grep { ! $seen{$_} ++ } @send_array;

	return unless @send_array;

	my $hostname = $Tab::hostname;

#	Tab::log("send_email.mas: Sending tabroom email from ".$from_string." to @send_array");
	my $html;

	unless ($ARGS{"is_html"}) {
		$html = text2html(
			$body,
			paras     => 1,
			metachars => 0
		);
	} else {
		$html = $body;

    	my $strip = HTML::Strip->new();
		$body = $strip->parse($body);
		$body =~ s/[^[:ascii:]]//g;
		$body =~ s/^\s+//;
		$body =~ s/\s+$//;
		$Text::Wrap::columns = 72;

		eval{
			$body =  wrap('', '', $body);
		};
	}

	unless ($no_footer) {
		$html .= "<p>-----------------------------</p>";
		$html .= "<p>You signed up for this email by registering on <a href='https://www.tabroom.com'>https://www.tabroom.com.</a></p>";
		$html .= "<p>If you don't want to get emails from Tabroom.com, login ";
		$html .= "to your account, click Profile on the top right, and check off \"No Emails\".";
		$html .= "<p>Your Profile: <a href='https://www.tabroom.com/user/login/profile.mhtml'>https://www.tabroom.com/user/login/profile.mhtml</a>";

		$body .= "\n\n-----------------------------\n\n";
		$body .= "You signed up for this email by registering on https://www.tabroom.com.\n\n";
		$body .= "If you don't want to get emails from Tabroom.com, login to your account, click Profile on the top right, and make \"No Emails\" is checked.";
		$body .= "Profile: https://www.tabroom.com/user/login/profile.mhtml";
	}

	my $type = "text/html";
	$subject = "[TAB] ".$subject;
	my %done;

	my $notfirst;

	while (@send_array) {

		my $counter;
		my @tos;

		while ($counter < 10 && @send_array) {
			my $to = shift @send_array;
			next unless $to;
			next if $done{$to}++;
			push @tos, $to;
			$counter++;
		}

		my @ccs;

		unless ($notfirst) {

			if ($cc_accounts) {

				my $cc_field;

				foreach my $cc (@{$cc_accounts}) {
					next if $cc->no_email && (not defined $override);
					$cc_field .= "," if $cc_field;
					$cc_field .= $cc->first." ".$cc->last." <".$cc->email.">"
				}

				push @ccs, $cc_field;

			} elsif (($raw && $cc) || ( $cc && $cc ne int($cc)) ) {

				push @ccs, $cc;

			} elsif ($cc
				&& $cc->no_email != 1
				&& (not defined $override)
			) {
				push @ccs, $cc->first." ".$cc->last." <".$cc->email.">";
			}
		}

		my %mail = (
			from      => $from_string,
			to        => $ARGS{"to_string"} || $from_string,
			bcc       => \@tos,
			subject   => $subject || "Message from Tabroom.com",
			transport => Email::Sender::Transport::SMTP->new({
				host  => $Tab::smtp_server,
				port  => $Tab::smtp_port || 25,
			}),
		);

		if (scalar @ccs) {
			$mail{cc} = \@ccs;
		}

		if ($html) {
			$mail{html_body} = $html;
		} elsif ($body) {
			$mail{text_body} = $body;
		}

		if ($ARGS{"reply_to"}) {
			$mail{reply_to} = $ARGS{"reply_to"};
		}

		my $msg = Email::Stuffer->new(\%mail);

		if ($attachment_name && $attachment_path) {

			eval {
				$msg->attach_file (
					$attachment_path, {
						filename     => $attachment_name,
						content_type => $attachment_type  || "application/json",
						encoding     => "quoted-printable",
						name         => $attachment_name,
					},
				);
			};

			if ($@) {
				return "File $attachment_name failed to generate or attach.  Error: ".$@;
			}
		}

		if ($hostname eq "www.tabroom.com"
			|| $hostname eq "profiler.tabroom.com"
			|| $hostname eq "old.dev.tabroom.com"
		) {

			# This opinionated bullshit is why I'm glad to leave Perl but I
			# suspect JS will be worse.
			my $result = $msg->send({ to => \@tos });

			if ($@) {
				Tab::debuglog("Error on sending email from $from_string to ".join(',', @tos).". ".$@);
			}

			Tab::debuglog("Using old interface to send mail from ".$r->uri);
			Tab::debuglog("Response was $result");

		} else {
			Tab::debuglog("Tab hostname is $hostname.  Not sending email from $from_string to ".join(',', @tos).". Reply To ".$ARGS{"reply_to"});
			Tab::debuglog("$body");
		}

		$notfirst++;
	}

	return;

</%init>
