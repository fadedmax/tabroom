<%args>
	$panel_id => undef
	$panel    => undef
	$round_id => undef
	$round    => undef
	$flight   => undef
	$person   => undef
</%args>
<%init>

	if ($panel) {
		$panel_id = $panel->id;
	}
	if ($round) {
		$round_id = $round->id;
	}

	$round_id = int($round_id);
	$panel_id = int($panel_id);

	my $limit;

	if ($panel_id > 0) {
		$limit = " and panel.id = $panel_id ";
	} elsif ($round_id > 0) {
		$limit = " and panel.round = $round_id ";
	} else {
		return "No valid section or round ID sent";
	}

	if ($flight) {
		$limit .= " and panel.flight = ".int($flight);
	}

	my $dbh = Tab::DBI->db_Main();

	my $student_sth = $dbh->prepare("
		select
			ballot.panel,
			sp.id, sp.email,
			person.id
		from
			(student, entry_student es, person sp, ballot, panel)
			left join person on student.person = person.id

		where ballot.panel = panel.id
			and panel.bye != 1
			and ballot.entry = es.entry
			and es.student = student.id
			and student.person = sp.id
			and sp.no_email = 0
			$limit
	");

	my $coach_sth = $dbh->prepare("
		select
			ballot.panel,
			coach.id, coach.email
		from
			panel, ballot, entry, school, permission, person coach

		where ballot.panel = panel.id
			and ballot.entry = entry.id
			and entry.school = school.id
			and panel.bye != 1
			and school.chapter = permission.chapter
			and permission.tag = 'chapter'
			and permission.person = coach.id
			and coach.no_email = 0
			$limit
		group by panel.id
	");

	my $round_sth = $dbh->prepare("
		select
			panel.id, flip_at.value_date, flip_status.value,
			entry.id, entry.code, ballot.side, ballot.speakerorder,
			flip_winner.id, flip_winner.value, flip_winner.timestamp,
			tourn.name, tourn.webname, tourn.tz,
			aff_string.value, neg_string.value, team_order.value,
			event.id event_id,
			tourn.id tourn_id

		from (ballot, entry, panel, school, event, tourn)

			left join panel_setting flip_at
				on flip_at.panel = panel.id
				and flip_at.tag = 'flip_at'

			left join panel_setting flip_status
				on flip_status.panel = panel.id
				and flip_status.tag = 'flip_status'

			left join panel_setting flip_winner
				on flip_winner.panel = panel.id
				and flip_winner.tag = 'flip_winner'

			left join event_setting aff_string
				on aff_string.event = entry.event
				and aff_string.tag = 'aff_label'

			left join event_setting neg_string
				on neg_string.event = entry.event
				and neg_string.tag = 'neg_label'

            left join event_setting team_order
                on team_order.event = entry.event
                and team_order.tag = 'flip_team_order'

		where ballot.panel = panel.id
			and ballot.entry = entry.id
			and panel.bye != 1
			and entry.school = school.id
			and school.tourn = tourn.id
			and entry.event = event.id
		$limit
	");

	my %destinations;
	my %sections;

	$coach_sth->execute();
	$round_sth->execute();
	$student_sth->execute();

	my %deadline_cache;
	my $event_id;
	my $tourn_id;

	while (
		my (
			$panel_id, $flip_at, $flip_status,
			$entry_id, $entry_code, $side, $order,
			$winner_id, $winner, $winner_timestamp,
			$tourn_name, $tourn_webname, $tz,
			$aff_string, $neg_string, $team_order,
			$event, $tourn
		) = $round_sth->fetchrow_array()
	) {

		next unless $flip_at;

		$event_id = $event;
		$tourn_id = $tourn;

		$sections{$panel_id}{"entries"}{$entry_code}++;

		if ($side == 1) {
			$sections{$panel_id}{"results"}{$entry_code} = $aff_string || "Aff";
		} elsif ($side == 2) {
			$sections{$panel_id}{"results"}{$entry_code} = $neg_string || "Neg";
		}

		if ($team_order) {
			if ($order == 1) {
				$sections{$panel_id}{'results'}{$entry_code} .= ", 1st speakers";
			} elsif ($order == 2) {
				$sections{$panel_id}{'results'}{$entry_code} .= ", 2nd speakers";
			}
		}

		$sections{$panel_id}{"from"}             = $tourn_name." <".$tourn_webname."_".$panel_id.'_flips@www.tabroom.com>';
		$sections{$panel_id}{"winner_id"}        = $winner_id;
		$sections{$panel_id}{"winner_timestamp"} = $winner_timestamp;

		if ($winner == $entry_id) {
			$sections{$panel_id}{"winner"} = $entry_code;
		} else {
			$sections{$panel_id}{"loser"} = $entry_code;
		}
		$sections{$panel_id}{"flip_status"} = $flip_status;

		if ($flip_status ne "done") {
			unless ($deadline_cache{$flip_at}) {
                $deadline_cache{$flip_at} = $m->comp("/funclib/showtime.mas",
                    string      => $flip_at,
                    tz          => $tz,
					tzname      => 1,
                    length      => "day",
                    return      => 1
                );
			}

			$sections{$panel_id}{"deadline"} = $deadline_cache{$flip_at}." ".Tab::tzname($tz);
		}
	}


	while (
		my (
			$panel_id,
			$contact_id, $contact_email,
			$person_id
		) = $student_sth->fetchrow_array()
	) {

		if ($contact_email) {
			$destinations{$panel_id}{"email"}{$contact_email}++;
		}

		if ($person_id) {
			$destinations{$panel_id}{"ids"}{$person_id}++;
		}

	}

	while (
		my (
			$panel_id,
			$coach_id, $coach_email,
		) = $coach_sth->fetchrow_array()
	) {

		if ($coach_email) {
			$destinations{$panel_id}{"email"}{$coach_email}++;
		}

		if ($coach_id) {
			$destinations{$panel_id}{"ids"}{$coach_id}++;
		}
	}

	my $counter;

	foreach my $panel_id (sort keys %destinations) {

		my $round_string;
		my $map_text;

		foreach my $code (keys (%{$sections{$panel_id}{"entries"}})) {
			$round_string .= " vs " if $round_string;
			$round_string .= $code;
		}

		next unless $round_string;
		$round_string = " Debate between ".$round_string;

		if ($sections{$panel_id}{"flip_status"} eq "done") {

			$round_string .= "\n\n The flip for this debate is complete:\n";

			foreach my $code (sort keys (%{$sections{$panel_id}{"entries"}})) {
				$round_string .= $code.": ".$sections{$panel_id}{'results'}{$code}."\n";
			}

		} elsif ($sections{$panel_id}{"flip_status"} eq "winner") {

			$round_string .= "\n\nThe winner of the flip is ".$sections{$panel_id}{"winner"};

			$round_string .= "\nWinner has until ".$sections{$panel_id}{"deadline"}." to make a choice";
			$round_string .= "\n\nDecide on your Tabroom account";
			$map_text .= "\nat <% $Tab::url_prefix %>/user/enter/flip.mhtml\n";
			$map_text .= "\nWID ".$sections{$panel_id}{"winner_id"}." WTS ".$sections{$panel_id}{"winner_timestamp"};

		} elsif ($sections{$panel_id}{"flip_status"} eq "loser") {

			$round_string .= "\n\n ".$sections{$panel_id}{"loser"}." may now make their flip choice ";
			$round_string .= "until ".$sections{$panel_id}{"deadline"};

			$round_string .= "\n\nDecide on your Tabroom account";
			$map_text .= "\nat <% $Tab::url_prefix %>/user/enter/flip.mhtml\n";

		} elsif ($sections{$panel_id}{"flip_status"} eq "anyone") {

			$round_string .= "\n\nThe deadline for a flip choice has expired.  Anyone may now choose.  First to choose wins";
			$round_string .= "until ".$sections{$panel_id}{"deadline"};

			$round_string .= "\n\nDecide on your Tabroom account";
			$map_text .= "\nat <% $Tab::url_prefix %>/user/enter/flip.mhtml\n";
		}

		my @email = keys %{$destinations{$panel_id}{"email"}};
		my @ids = keys %{$destinations{$panel_id}{"ids"}};

		$m->comp( "/funclib/send_notify.mas",
			from    => $sections{$panel_id}{"from"},
			tourn   => $tourn_id,
			ids     => \@ids,
			url     => $Tab::url_prefix.'/user/enter/flip.mhtml',
			subject => "Coinflip status update",
			body    => $round_string.$map_text
		);

		$counter += (scalar (keys %{$destinations{$panel_id}{"email"}})) + (scalar (keys %{$destinations{$panel_id}{"ids"}}))
	}

	$round_sth->finish();
	$student_sth->finish();
	$coach_sth->finish();

	if ($round_id ) {

		my $sth = $dbh->prepare("
			delete from round_setting where round = ? and tag = 'flip_blasted'
		");

		$sth->execute($round_id);
		$sth->finish();

		$sth = $dbh->prepare("
			insert into round_setting (tag, round, value, value_date) values ('flip_blasted', ?, 'date', now())
		");

		$sth->execute($round_id);
		$sth->finish();

		my $round = Tab::Round->retrieve($round_id);

		$m->comp("/funclib/log.mas",
			type        => 'tabbing',
			event       => $event_id,
			tourn       => $tourn_id,
			round       => $round_id,
			panel       => $panel_id,
			person      => $person,
			description => "Flips blasted for round ".$round->name." (flight $flight)",
		);

	}

	return $counter." messages sent about flips ";

</%init>"
