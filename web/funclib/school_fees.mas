<%args>
	$school
	$ignore_judging    => undef
	$tourn             => undef
	$tourn_settings    => undef
	$all               => undef
	$names             => undef
	$entry_fees        => undef
	$concessions       => undef
	$payments          => undef
	$show_deleted      => undef
	$categories        => undef
	$category_settings => undef
	$events            => undef
	$concession_array  => undef
	$school_settings   => undef
	$bulk              => undef
	$schools           => undef
	$entries           => undef
	$weekend           => undef
</%args>
<%init>

	use POSIX;
	use Math::Round;

	my $total;
	my @felines;
	my $event_settings;

	unless ($tourn) {
		if ($school && $school->id && $school->tourn) {
			$tourn = $school->tourn;
			my %ts = $tourn->all_settings();
			$tourn_settings = \%ts;
		} else {
			$m->comp("/funclib/abort.mas", message => "I found neither a school nor a tournament");
		}
	}

	my $school_id = eval {
		return $school->id;
	};

	unless ($school_id) {
		$school_id = int($school);
		$school = Tab::School->retrieve($school_id);
	}

	my $symbol = $tourn_settings->{"currency"};

	$entry_fees++ if $all;
	$payments++ if $all;
	$concessions++ if $all;

	my $total_entry_fees;
	my $only_entry_fees;
	my $total_concessions;
	my $total_payments;
	my $alterna_state = $tourn_settings->{"fees_alternate_state"};

	if ($alterna_state) {
		undef $alterna_state
			unless $school
			&& $school->chapter
			&& $school->chapter->state eq $alterna_state;
	}

	unless ($schools) {

		unless ($tourn_settings->{$tourn->id}{"hotels"}) {
			my @hotels = $tourn->hotels;

			if (@hotels) {
				%{$tourn_settings->{$tourn->id}{"hotels"}} = map {$_->id => $_} @hotels;
			}
		}

		if ($school_settings->{$school_id}) {

			if ($tourn_settings->{$tourn->id}{"hotels"}) {
				if ($tourn_settings->{$tourn->id}{"require_hotel_confirmation"}) {
					if ($school_settings->{$school_id}{'hotel_confirmation'}) {
						$schools->{"hotels"}{$school_id} = $school_settings->{$school_id}{'hotel'};
					}
				} else {
					$schools->{"hotels"}{$school_id} = $school_settings->{$school_id}{'hotel'};
				}
			}

			$schools->{"all_fee_discount"}{$school_id}        = $school_settings->{$school_id}{'all_fee_discount'};
			$schools->{"concession_fee_discount"}{$school_id} = $school_settings->{$school_id}{'concession_fee_discount'};
			$schools->{"individuals"}{$school_id}             = $school_settings->{$school_id}{'individuals'};
			$schools->{"entry_fee_discount"}{$school_id}      = $school_settings->{$school_id}{'entry_fee_discount'};
			$schools->{"judge_surcharge"}{$school_id}         = $school_settings->{$school_id}{'judge_surcharge'};

		} else {

			if ($tourn_settings->{$tourn->id}{"hotels"}) {
				if ($tourn_settings->{$tourn->id}{"require_hotel_confirmation"}) {
					if ($school->setting('hotel_confirmation')) {
						$schools->{"hotels"}{$school_id} = $school->setting('hotel');
					}
				} else {
					$schools->{"hotels"}{$school_id} = $school->setting('hotel');
				}
			}

			$schools->{"all_fee_discount"}{$school_id}        = $school->setting('all_fee_discount');
			$schools->{"concession_fee_discount"}{$school_id} = $school->setting('concession_fee_discount');
			$schools->{"individuals"}{$school_id}             = $school->setting('individuals');
			$schools->{"entry_fee_discount"}{$school_id}      = $school->setting('entry_fee_discount');
			$schools->{"judge_surcharge"}{$school_id}         = $school->setting('judge_surcharge');
		}
	}

	if ($entry_fees && $tourn_settings->{"per_person_fee"}) {

		my %person_line = ();
		my $individuals = $schools->{"individuals"}{$school_id};

		$person_line{"fee"} = $individuals * $tourn_settings->{"per_person_fee"};

		if ($schools->{"entry_fee_discount"}{$school_id}) {
			$person_line{"fee"} = $person_line{"fee"} * ($schools->{"entry_fee_discount"}{$school_id} / 100);
			$person_line{"fee"} = nearest(.01, $person_line{"fee"});
		}

		$total += $person_line{"fee"};
		$total_entry_fees += $person_line{"fee"};
		$only_entry_fees += $person_line{"fee"};

		unless ($bulk) {
			$person_line{"name"} = $individuals.' people at x '.$tourn_settings->{"per_person_fee"};
			$person_line{"quantity"} = $individuals;
			$person_line{"per_unit"} = $tourn_settings->{"per_person_fee"};
			$person_line{"fee"} = $individuals * $tourn_settings->{"per_person_fee"};
			$person_line{"short_name"} = "Individuals in Attendance";

			if ($schools->{"entry_fee_discount"}{$school_id}) {
				$person_line{"name"} .= " x ".$schools->{"entry_fee_discount"}{$school_id}."% discount";
				$person_line{"short_name"} .= " x ".$schools->{"entry_fee_discount"}{$school_id}."% off";
			}

			push (@felines, {%person_line});
		}
	}

	my $judging_fees;

	if ($entry_fees) {

		my @entries;
		@entries = @{$entries} if $entries;

		unless (@entries || $bulk) {

			my $limit;

			if ($weekend) {
				$limit = " and exists (
					select event_setting.id from event_setting
					where event_setting.event = event.id
						and event_setting.tag = 'weekend'
						and event_setting.value = ".int($weekend)."
				)";
			}

			Tab::Entry->columns(TEMP => "no_judges");

			Tab::Entry->set_sql( with_event => "
				select entry.*, entry.event as eventid, event.category as categoryid,
					no_judge_burden.value as no_judges
				from (entry, event)
					left join event_setting no_judge_burden
						on no_judge_burden.event = entry.event
						and no_judge_burden.tag = 'no_judge_burden'
				where entry.school = ?
					and entry.unconfirmed = 0
					and entry.event = event.id
					and not exists (
						select entry_setting.id
						from entry_setting
						where entry_setting.entry = entry.id
						and entry_setting.tag = 'rejected_by'
					)
				$limit
				order by entry.code, entry.id
			");

			@entries = Tab::Entry->search_with_event($school_id);

		}

		my %entries_by_event;
		my %entries_by_category;

		foreach my $entry (@entries) {

			if ($entry->waitlist) {
				push @{$entries_by_event{$entry->eventid}{"waitlist"}}, $entry;
				unless ($entry->no_judges) {
					push @{$entries_by_category{$entry->categoryid}{"waitlist"}}, $entry;
				}
			} else {
				push @{$entries_by_event{$entry->eventid}{"confirmed"}}, $entry;
				unless ($entry->no_judges) {
					push @{$entries_by_category{$entry->categoryid}{"confirmed"}}, $entry;
				}
			}
		}

		my $hotel_multiplier;
		my $hotel;

		if ($tourn_settings->{$tourn->id}{"hotels"}) {
			$hotel = $tourn_settings->{$tourn->id}{"hotels"}{$schools->{"hotels"}{$school_id}};
			$hotel_multiplier = $hotel->multiple if $hotel;
		}

		unless ($bulk) {
			if ($hotel && $hotel_multiplier > 1) {
				my %hotel_warning = ();
				$hotel_warning{"name"} = "You are marked as staying at ".$hotel->name.".  Your entry fees are therefore adjusted by ".$hotel->multiple."x";
				$hotel_warning{"message"}++;
				push @felines, \%hotel_warning;
			}
		}

		my @events;
		@events = @{$events} if $events;
		@events = $tourn->events unless @events;

		EVENT:
		foreach my $event (@events) {

			my @entries;
			@entries = @{$entries_by_event{$event}{"confirmed"}} if $entries_by_event{$event}{"confirmed"};

			push @entries, @{$entries_by_event{$event}{"waitlist"}}
				if ($tourn_settings->{"invoice_waitlist"} && $entries_by_event{$event}{"waitlist"});

			if ($ARGS{"worlds_event"} == $event) {
				push @entries, @{$schools->{"worlds"}{$school_id}} if (
					$schools
					&& $schools->{"worlds"}
					&& $schools->{"worlds"}{$school_id}
				);
			}

			next unless @entries;

			my %uniq;
			@entries = grep { ! $uniq{$_} ++ } @entries;

			unless ($event_settings->{$event}) {
				%{$event_settings->{$event}} = $event->all_settings();
				$event_settings->{$event}{"fee"} = $event->fee;
			}

			my $fee_per = $event_settings->{$event}{"fee"};

			if ($alterna_state) {
				if ($event_settings) {
					$fee_per = $event_settings->{$event}{"alt_state_fee"}
				} else {
					$fee_per = $event->setting("alt_state_fee")
				}
			}

			my $fee_total = $fee_per * scalar @entries;

			if ($hotel_multiplier > 0) {
				$fee_total = $fee_total * $hotel_multiplier;
				$fee_per = $fee_per * $hotel_multiplier;
			}

			if ($schools->{"entry_fee_discount"}{$school_id}) {
				$fee_total = $fee_total * ($schools->{"entry_fee_discount"}{$school_id} / 100);
				$fee_total = nearest(.01, $fee_total);
			}

			next EVENT unless $fee_total;
			$total_entry_fees += $fee_total;
			$only_entry_fees += $fee_total;
			$total += $fee_total;

			unless ($bulk) {

				$fee_per = sprintf("%.2f", $fee_per);
				my %line_hash= ();
				$line_hash{"quantity"} = scalar @entries;
				$line_hash{"per_unit"} = $fee_per;
				$line_hash{"short_name"} = "Entries in ".$event->name;
				$line_hash{"name"} .= scalar @entries. " entries in ".$event->abbr.' x '.$fee_per;
				$line_hash{"fee"} = $fee_total;

				if ($schools->{"entry_fee_discount"}{$school_id}) {
					$line_hash{"name"} .= " x ".$schools->{"entry_fee_discount"}{$school_id}."% discount";
					$line_hash{"short_name"} .= " x ".$schools->{"entry_fee_discount"}{$school_id}."% off";
				}

				push (@felines, {%line_hash});
			}
		}

		if ($tourn_settings->{"nsda_nats"} && (not defined $bulk)) {

			EVENT:
			foreach my $event (@events) {

				if ($event_settings->{$event->id}) {
					next EVENT unless $event_settings->{$event->id}{"usa_wsdc"};
				} else {
					next EVENT unless $event->setting("usa_wsdc");
				}

				Tab::Student->set_sql( school_wsdc => "
					select distinct student.id
					from student, entry_student, entry
					where entry.event = ?
						and entry.id = entry_student.entry
						and entry_student.student = student.id
						and student.chapter = ?
				");

				my @worlds_students = Tab::Student->search_school_wsdc(
					$event->id,
					$school->chapter->id
				);

				if (@worlds_students) {

					my $count = scalar @worlds_students;
					my $fee_per = $event->fee;

					if ($hotel_multiplier != 0) {
						$fee_per = $fee_per * $hotel_multiplier;
					}

					my $fee_total = $fee_per * $count;

					if ($schools->{"entry_fee_discount"}{$school_id}) {
						$fee_total = $fee_total * ($schools->{"entry_fee_discount"}{$school_id} / 100);
						$fee_total = nearest(.01, $fee_total);
					}

					if ($fee_total) {

						$total_entry_fees += $fee_total;
						$only_entry_fees += $fee_total;
						$total += $fee_total;
						$fee_per = sprintf("%.2f", $fee_per);

						unless ($bulk) {

							my $name = "$count competitors in ".$event->abbr.' x '.$fee_per;

							my %line_hash= ();

							$line_hash{"quantity"} = $count;
							$line_hash{"per_unit"} = $fee_per;
							$line_hash{"short_name"} = "Students in ".$event->name;
							$line_hash{"name"} = $name;
							$line_hash{"fee"} = $fee_total;

							if ($schools->{"entry_fee_discount"}{$school_id}) {
								$line_hash{"name"} .= " x ".$schools->{"entry_fee_discount"}{$school_id}."% discount";
								$line_hash{"short_name"} .= " x ".$schools->{"entry_fee_discount"}{$school_id}."% off";
							}

							push (@felines, {%line_hash});

						}
					}
				}
			}
		}

		unless ($ignore_judging || $tourn_settings->{"no_school_judges"}) {

			my @categories;
			@categories = @{$categories} if $categories;
			@categories = $tourn->categories unless @categories;

			GROUP:
			foreach my $category (@categories) {

				next if $weekend > 0 && $weekend->id != $category->setting("weekend");
				my $category_id = $category->id;

				next unless $entries_by_category{$category_id}{"confirmed"}
					|| ( $entries_by_category{$category_id}{"waitlist"} && $tourn_settings->{"judges_waitlist"} );

				unless ($category_settings->{$category_id}) {
					%{$category_settings->{$category_id}} = $category->all_settings();
					@{$category_settings->{$category_id}{"shifts"}} = $category->shifts();
				}

				my $rounds_per = $category_settings->{$category_id}{"rounds_per"};
				my $judge_per  = $category_settings->{$category_id}{"judge_per"};
				my $auto_bond  = $category_settings->{$category_id}{"auto_bond"};
				my $attending_judge_fee = $category_settings->{$category_id}{"attending_judge_fee"};

				$rounds_per++ if $category_settings->{$category_id}{"nats_category"};

				if ($category_settings->{$category_id}{"drops_no_burden"}) {

					my @undropped;

					foreach my $entry (@{$entries_by_category{$category_id}{"confirmed"}}) {
						push @undropped, $entry unless $entry->dropped;
					}

					@{$entries_by_category{$category_id}{"confirmed"}} = @undropped;

					if ($entries_by_category{$category_id}{"waitlist"}) {

						undef @undropped;

						foreach my $entry (@{$entries_by_category{$category_id}{"waitlist"}}) {
							push @undropped, $entry unless $entry->dropped;
						}

						@{$entries_by_category{$category_id}{"waitlist"}} = @undropped;
					}
				}

				my $extra;
				my $uncovered;

				if ($category_settings->{$category_id}{"nats_category"} && $bulk) {

					my $fee = $category_settings->{$category_id}{"round_hire_fee"};

					if ($fee) {

						foreach my $hire (@{$schools->{"hires"}{$school_id}{$category_id}}) {
							my $accepted = $hire->rounds_accepted;
							if ($accepted) {
								$total_entry_fees += $accepted * $fee;
								$total += $accepted * $fee;
								$judging_fees += $accepted * $fee;
							}
						}
						undef @{$schools->{"hires"}{$school_id}{$category_id}};
					}

				} elsif ($category_settings->{$category_id}{"nats_category"}) {

					my %reasons = $m->comp("/funclib/judgemath/nats_check_judging.mas",
						school            => $school,
						tourn_settings    => $tourn_settings,
						school_settings   => $school_settings->{$school_id},
						category_settings => $category_settings,
						event_settings    => $event_settings
					);

					if ($reasons{"nope"}) {
						my %warning_hash;
						$warning_hash{"name"} = $reasons{"text"};
						push (@felines, {%warning_hash});
					}

				} else {

					($uncovered, $extra ) = $m->comp(
						"/funclib/judgemath/uncovered_burden_by_category.mas",
						category          => $category,
						category_settings => $category_settings->{$category_id},
						tourn_settings    => $tourn_settings,
						school_settings   => $school_settings->{$school_id},
						event_settings    => $event_settings,
						judges            => $schools->{"judges"}{$school_id}{$category_id},
						hires             => $schools->{"hires"}{$school_id}{$category_id},
						school            => $school,
						confirmed         => $entries_by_category{$category_id}{"confirmed"},
						waitlist          => $entries_by_category{$category_id}{"waitlist"},
						bulk              => $bulk
					);
				}

				if ($auto_bond) {

					my %judge_fee_hash;

					my $category_burden = $m->comp(
						"/funclib/judgemath/judges_needed_by_category.mas",
						category          => $category,
						category_settings => $category_settings->{$category_id},
						tourn_settings    => $tourn_settings,
						school_settings   => $school_settings->{$school_id},
						event_settings    => $event_settings,
						judges            => $schools->{"judges"}{$school_id}{$category_id},
						hires             => $schools->{"hires"}{$school_id}{$category_id},
						school            => $school,
						confirmed         => $entries_by_category{$category_id}{"confirmed"},
						waitlist          => $entries_by_category{$category_id}{"waitlist"},
						bulk              => $bulk
					);

					$judge_fee_hash{"fee"} = $category_burden * $auto_bond;

					unless ($bulk) {

						if ($category_burden) {
							$judge_fee_hash{"name"} = $category_burden." ".$category->abbr." judge obligation x ";
							$judge_fee_hash{"name"} .= $auto_bond;
						}

						$judge_fee_hash{"quantity"} = $category_burden;
						$judge_fee_hash{"per_unit"} = $auto_bond;
						$judge_fee_hash{"short_name"} = "Judge Obligation";

						push (@felines, {%judge_fee_hash});
					}

					$total_entry_fees += $judge_fee_hash{"fee"};
					$total += $judge_fee_hash{"fee"};
					$judging_fees += $judge_fee_hash{"fee"};

				}

				if ($attending_judge_fee) {

					my %judge_fee_hash;
					my @judges;

					if ($schools->{"judges"}{$school_id}
						&& $schools->{"judges"}{$school_id}{$category_id}
					) {

						@judges = @{$schools->{"judges"}{$school_id}{$category_id}};

					} else {

						@judges = $school->judges(category => $category_id);
					}

					unless ($bulk) {

						if (@judges) {
							$judge_fee_hash{"name"} = scalar @judges.' individual judges at x ';
							$judge_fee_hash{"name"} .= $attending_judge_fee;
						}

						$judge_fee_hash{"fee"} =
							scalar @judges * $attending_judge_fee
							if @judges;

						$judge_fee_hash{"quantity"} = scalar @judges;
						$judge_fee_hash{"per_unit"} = $attending_judge_fee;
						$judge_fee_hash{"short_name"} = "Judges in Attendance";

						push (@felines, {%judge_fee_hash});
					}

					$total_entry_fees += $judge_fee_hash{"fee"};
					$total += $judge_fee_hash{"fee"};
					$judging_fees += $judge_fee_hash{"fee"};
				}

				if ($category_settings->{$category_id}{"track_judge_hires"}) {

					my ($requests, $total_accepted) = $m->comp(
						'/funclib/school_hires.mas',
						school            => $school,
						category          => $category,
						category_settings => $category_settings->{$category_id},
						hires             => $schools->{"hires"}{$school_id}{$category_id},
						bulk              => $bulk
					);

					my @adjustments;
					my %adjustments;
					my %hired_fee = ();

					%adjustments = $m->comp(
						"/funclib/judge_hire_adjustments.mas",
						school            => $school,
						category          => $category,
						category_settings => $category_settings->{$category_id},
						hires             => $schools->{"hires"}{$school_id}{$category_id}
					);

					@adjustments = sort {$b <=> $a} keys %adjustments;

					push @adjustments, 0;
					my $adjustment_amount;

					foreach my $adjustment (@adjustments) {

						my $accepted = $total_accepted;

						if ($adjustment == 0) {
							$accepted = $total_accepted;
						} else {
							$accepted = $adjustments{$adjustment};
							$accepted = $total_accepted if $accepted > $total_accepted;
							$total_accepted -= $accepted;
						}

						if ($category_settings->{$category_id}{"round_hire_fee"}) {

							my $fee = $category_settings->{$category_id}{"round_hire_fee"};
							$fee = $fee + ($fee * ($adjustment / 100));

							if ($accepted ) {

								$hired_fee{"fee"} = $accepted * $fee;
								$total_entry_fees += $accepted * $fee;
								$total += $accepted * $fee;
								$judging_fees += $accepted * $fee;

								unless ($bulk) {

									if ($tourn_settings->{"nsda_nats"}) {
										$hired_fee{"name"} = $accepted." days hired judging in ";
									} else {
										$hired_fee{"name"} = $accepted." rounds hired judging in ";
									}
									$hired_fee{"name"} .= $category->name.' at '.$tourn_settings->{currency}.$fee." each";

									$hired_fee{"quantity"} = $accepted;
									$hired_fee{"per_unit"} = $fee;
									$hired_fee{"short_name"} = "Rounds of ".$category->abbr." hired judging";
									push (@felines, {%hired_fee});
								}
							}

						} elsif ($category_settings->{$category_id}{"hired_fee"}) {

							$accepted = ceil($accepted / $judge_per) if $judge_per;
							my $fee = $category_settings->{$category_id}{"hired_fee"};
							$fee = $fee + ($fee * ($adjustment / 100));

							if ($accepted ) {

								$hired_fee{"fee"} = $accepted * $fee;
								$total += $accepted * $fee;
								$total_entry_fees += $accepted * $fee;
								$judging_fees += $accepted * $fee;

								unless ($bulk) {

									$hired_fee{"name"} = $accepted." hired judges for ".$category->name.' at '.$fee." each";
									$hired_fee{"quantity"} = $accepted;
									$hired_fee{"per_unit"} = $fee;
									$hired_fee{"short_name"} = $category->abbr." hired judges";
									push (@felines, {%hired_fee});
								}

							}

						} elsif ($category_settings->{$category_id}{"uncovered_entry_fee"}) {

							my $fee = $category_settings->{$category_id}{"uncovered_entry_fee"};
							$fee = $fee + ($fee * ($adjustment / 100));

							if ($accepted ) {

								my $entry = "entries";
								$entry = "entry" if $accepted == 1;

								$hired_fee{"fee"} = $accepted * $fee;
								$total += $accepted * $fee;
								$total_entry_fees += $accepted * $fee;
								$judging_fees += $accepted * $fee;

								unless ($bulk) {

									$hired_fee{"name"} = "$accepted $entry covered by hires in ";
									$hired_fee{"name"} .= $category->name.' at ';
									$hired_fee{"name"} .= $fee." each";

									$hired_fee{"quantity"} = $accepted;
									$hired_fee{"per_unit"} = $fee;
									$hired_fee{"short_name"} = $category->abbr." entries covered by hired judging";
									push (@felines, {%hired_fee});

								}
							}
						}
					}

					# If there are still missing judges despite the hires, warn the
					# user and invalidate the invoice if that's not OK

					if ($uncovered > 0) {

						my %judge_fee_hash = ();
						$uncovered = ceil($uncovered / $judge_per) if $judge_per;

						if ($category_settings->{$category_id}{"missing_judge_fee"}) {

							if ($rounds_per) {

								$judge_fee_hash{"fee"} = $uncovered * $category_settings->{$category_id}{"missing_judge_fee"};

								$total += $judge_fee_hash{"fee"};
								$total_entry_fees += $judge_fee_hash{"fee"};
								$judging_fees += $judge_fee_hash{"fee"};

								unless ($bulk) {

									my $round = "round";
									$round .= "s" if $uncovered != 1;

									$judge_fee_hash{"name"} = "Missing $uncovered $round in ".$category->name;
									$judge_fee_hash{"quantity"} = $uncovered;
									$judge_fee_hash{"per_unit"} = $category_settings->{$category_id}{"missing_judge_fee"};

									if ($tourn_settings->{"nsda_nats"}) {
										$judge_fee_hash{"short_name"} = $category->abbr." uncovered days of judging";
									} else {
										$judge_fee_hash{"short_name"} = $category->abbr." uncovered rounds of judging";
									}

									unless ($category_settings->{$category_id}{'missing_judge_fee_is_hired'}) {
										$judge_fee_hash{"warn"}++;
										$judge_fee_hash{"name"} .= ".\n\nThis charge does not ";
										$judge_fee_hash{"name"} .= "count as approved hired judging.\n\n";
										$judge_fee_hash{"name"} .= "Consult the tournament's policies.";
									}
								}

							} elsif ($judge_per) {

								$judge_fee_hash{"fee"} =
									$uncovered * $category_settings->{$category_id}{"missing_judge_fee"};

								$total += $judge_fee_hash{"fee"};
								$total_entry_fees += $judge_fee_hash{"fee"};
								$judging_fees += $judge_fee_hash{"fee"};

								unless ($bulk) {

									my $judge = "judge";
									$judge .= "s" if $uncovered != 1;
									$judge_fee_hash{"name"} = "Missing $uncovered $judge in ".$category->name;

									$judge_fee_hash{"quantity"} = $uncovered;
									$judge_fee_hash{"per_unit"} = $category_settings->{$category_id}{"missing_judge_fee"};
									$judge_fee_hash{"short_name"} = $category->abbr." judges under obligation";

									unless ($category_settings->{$category_id}{'missing_judge_fee_is_hired'}) {
										$judge_fee_hash{"warn"}++;
										$judge_fee_hash{"name"} .= ".\n\nThis charge does not ";
										$judge_fee_hash{"name"} .= "count as an approved hired judge.\n\n";
										$judge_fee_hash{"name"} .= "Consult the tournament's policies.";
									}
								}

							}

						} else {

							unless ($bulk) {

								$judge_fee_hash{"warn"}++;

								if ($judge_per) {

									$judge_fee_hash{"name"} = "You are under by $uncovered judges ";
									$judge_fee_hash{"name"} .= "in ".$category->name.". Hire or register ";
									$judge_fee_hash{"name"} .= "more judges to cover your obligation by ";
									$judge_fee_hash{"name"} .= "the deadline, or the tournament may ";
									$judge_fee_hash{"name"} .= "reject your entry.";

								} elsif ($rounds_per) {

									if ($tourn_settings->{"nsda_nats"}) {
										$judge_fee_hash{"name"} = "You are under by $uncovered days in ";
									} else {
										$judge_fee_hash{"name"} = "You are under by $uncovered rounds in ";
									}
									$judge_fee_hash{"name"} .= $category->name." judging. Hire or register more ";
									if ($tourn_settings->{"nsda_nats"}) {
										$judge_fee_hash{"name"} .= "days to cover your obligation, or the ";
									} else {
										$judge_fee_hash{"name"} .= "rounds to cover your obligation, or the ";
									}
									$judge_fee_hash{"name"} .= "tournament may reject your entry";

								}
							}
						}

						push (@felines, {%judge_fee_hash});
					}

				} elsif ($uncovered > 0) {

					my %judge_fee_hash = ();

					$uncovered = ceil($uncovered / $judge_per) if $judge_per > 0;

					$judge_fee_hash{"fee"} = $uncovered
						* $category_settings->{$category_id}{'missing_judge_fee'};

					$total += $judge_fee_hash{"fee"};
					$total_entry_fees += $judge_fee_hash{"fee"};
					$judging_fees += $judge_fee_hash{"fee"};

					unless ($bulk) {

						if ($judge_per) {

							$judge_fee_hash{"name"}  = "Under $uncovered judge(s) ";
							$judge_fee_hash{"name"} .= "in ".$category->name;

						} elsif ($rounds_per) {

							$judge_fee_hash{"name"} = " Under $uncovered round(s) ";
							$judge_fee_hash{"name"} .= "in ".$category->name;

						}

						if (
							$category_settings->{$category_id}{'missing_judge_fee'}
							&& (not defined $category_settings->{$category_id}{'missing_judge_fee_is_hired'})
						) {
							$judge_fee_hash{"warn"} = 1;
							$judge_fee_hash{"name"} .= ".\n\nThis charge does not ";
							$judge_fee_hash{"name"} .= "count as an approved hired judge.\n\n";
							$judge_fee_hash{"name"} .= "Consult the tournament's policies.";
						}
					}

					push (@felines, {%judge_fee_hash});

				}

				if ($category_settings->{$category_id}{"shifts"}) {

					my %stimes_under = $m->comp(
						"/funclib/judgemath/judge_partials_short.mas",
						category          => $category,
						category_settings => $category_settings->{$category_id},
						event_settings    => $event_settings,
						tourn_settings    => $tourn_settings,
						school_settings   => $school_settings->{$school_id},
						school            => $school,
						confirmed         => $entries_by_category{$category_id}{"confirmed"},
						waitlist          => $entries_by_category{$category_id}{"waitlist"},
						judges            => $schools->{"judges"}{$school_id}{$category_id},
						hires             => $schools->{"hires"}{$school_id}{$category_id},
						shifts			  => $category_settings->{$category_id}{"shifts"},
						bulk              => $bulk
					);

					foreach my $key (keys %stimes_under) {

						my $stime = Tab::JudgeShift->retrieve($key);

						next unless $stimes_under{$stime->id} > 0;

						if ($stime->no_hires) {

							my %judge_fee_hash = ();
							$judge_fee_hash{"name"} .= "You are under judge obligation by ";
							$judge_fee_hash{"name"} .= $stimes_under{$stime->id}." judge(s) in ";
							$judge_fee_hash{"name"} .= $category->name." ".$stime->name;

							$judge_fee_hash{"warn"} = 1;
							push (@felines, {%judge_fee_hash});

						}

						if ($stime->fine) {

							my %stime_fine = ();
							$stime_fine{"fee"}  =  $stime->fine * $stimes_under{$stime->id};
							$total += $stime->fine * $stimes_under{$stime->id};
							$total_entry_fees += $stime->fine * $stimes_under{$stime->id};
							$judging_fees += $stime->fine * $stimes_under{$stime->id};

							unless ($bulk) {

								$stime_fine{"name"} = $stimes_under{$stime->id}." ".$category->name;
								$stime_fine{"name"} .= " judges under in ".$stime->name." at ".$stime->fine." each";

								$stime_fine{"quantity"} = $stimes_under{$stime->id};
								$stime_fine{"per_unit"} = $stime->fine;
								$stime_fine{"short_name"} = "Judges under obligation in ".$stime->name;
								push (@felines, {%stime_fine});

							}
						}
					}
				}

			} #end of foreach group
		}
	}

	if ( $entry_fees &&
		(	$tourn_settings->{"per_student_fee"}
			|| $tourn_settings->{$tourn->id}{"hotels"}
		)
	) {

		my $hotel;
		my $hotel_surcharge;

		if ($tourn_settings->{$tourn->id}{"hotels"}) {
			$hotel = $tourn_settings->{$tourn->id}{"hotels"}{$schools->{"hotels"}{$school_id}};
			$hotel_surcharge = $hotel->surcharge if $hotel;
		}

		if ($tourn_settings->{"per_student_fee"} || $hotel_surcharge ) {

			my @students = $m->comp(
				"/funclib/school_students.mas",
				school   => $school,
				waitlist => $tourn_settings->{"invoice_waitlist"}
			);

			if ($tourn_settings->{"per_student_fee"}) {

				my %student_line = ();

				$student_line{"fee"} = (scalar @students) * $tourn_settings->{"per_student_fee"};

				$total += $student_line{"fee"};

				$total_entry_fees += $student_line{"fee"};
				$only_entry_fees += $student_line{"fee"};

				unless ($bulk) {

					$student_line{"name"} = scalar @students.' individual students at x '.$tourn_settings->{"per_student_fee"};
					$student_line{"quantity"} = scalar @students;
					$student_line{"per_unit"} = $tourn_settings->{"per_student_fee"};
					$student_line{"short_name"} = "Students in Attendance";

					push (@felines, {%student_line});

				}
			}

			if ($hotel_surcharge) {

				my %surcharge_line = ();

				$surcharge_line{"fee"} = (scalar @students) * $hotel_surcharge;

				$total += $surcharge_line{"fee"};
				$total_entry_fees += $surcharge_line{"fee"};
				$only_entry_fees += $surcharge_line{"fee"};

				unless ($bulk) {

					if ($surcharge_line{"fee"} < 0) {
						$surcharge_line{"name"} = "Hotel discount: ".scalar @students.' competitors staying in the block x '.$hotel_surcharge.$tourn_settings->{currency};
						$surcharge_line{"short_name"} = "Block hotel discount";

					} else {

						$surcharge_line{"name"} = "Hotel surcharge: ".scalar @students.' competitors staying outside the block x '.$hotel_surcharge.$tourn_settings->{currency};
						$surcharge_line{"short_name"} = "Non-block hotel surcharge";
					}

					$surcharge_line{"quantity"} = scalar @students;
					$surcharge_line{"per_unit"} = $hotel_surcharge;

					push (@felines, {%surcharge_line});

				}
			}
		}
	}

	my @all_orders;
	my %concessions_by_code;

	if ($concessions) {

		my @concessions;

		@concessions = @{$concession_array} if $concession_array;
		@concessions = $tourn->concessions unless @concessions;

		if ($bulk) {

			foreach my $order_id (keys %{$schools->{'orders'}{$school_id}}) {
				$total += $schools->{"orders"}{$school_id}{$order_id}{"total"};
				$total_concessions += $schools->{"orders"}{$school_id}{$order_id}{"total"};

			}

		} else {

			foreach my $concession (@concessions) {

				my @orders = Tab::ConcessionPurchase->search(
					school     => $school_id,
					concession => $concession->id
				);

				my $quantity;

				foreach my $order (@orders) {
					$quantity += $order->quantity;
				}

				next unless $quantity;

				$total += $quantity * $concession->price;
				$total_concessions += $quantity * $concession->price;

				push @all_orders, @orders;
				my %line = ();

				$line{"name"} = $quantity." ".$concession->name." at ".$concession->price." each";
				$line{"fee"} = $quantity * $concession->price;

				$line{"quantity"} = $quantity;
				$line{"per_unit"} = $concession->price;
				$line{"short_name"} = $concession->name;

				if ($concession->billing_code) {
					$line{"billing_code"} = $concession->billing_code;
					$concessions_by_code{$concession->billing_code} += ($quantity * $concession->price);
				}

				push (@felines, {%line});
			}
		}
	}

	my @fines;
	my $fine_total;
	my $bond_total;

	Tab::Fine->columns(TEMP => "personfirst");
	Tab::Fine->columns(TEMP => "personlast");
	Tab::Fine->columns(TEMP => "personemail");

	if ($entry_fees || $payments) {

		my @all_fines;

		@all_fines = @{$schools->{"fines"}{$school_id}}
			if $schools
			&& $schools->{"fines"}
			&& $schools->{"fines"}{$school_id};

		unless ($bulk || @all_fines) {

			my $limit;

			if ($show_deleted) {
			} else {
				$limit = " and deleted != 1 ";
			}

			if ($payments && $entry_fees) {

			} elsif ($entry_fees) {
				$limit = " and payment = 0 ";
			} elsif ($payments) {
				$limit = " and payment = 1 ";
			}

			Tab::Fine->set_sql( by_school => "
				select fine.*,
					person.first as personfirst,
					person.last as personlast,
					person.email as personemail
				from fine
				left join person on fine.levied_by = person.id
				where fine.school = ?
					$limit
			");

			push @fines, Tab::Fine->search_by_school($school_id);

		} else {

			foreach my $fine (@all_fines) {

				next if ( (not defined $show_deleted) && $fine->deleted);
				next if ( (not defined $entry_fees) && $fine->payment == 0);
				next if ( (not defined $payments) && $fine->payment != 0);

				push @fines, $fine;
			}
		}

		FINE:
		foreach my $fine (@fines) {

			my %fine_hash;

			unless ($bulk) {

				my $reason = $fine->reason;

				$fine_hash{"name"} .= $reason;
				$fine_hash{"short_name"} .= $reason;
				$fine_hash{"nsda_invoice"} = $fine->invoice;

				if ($fine->personfirst || $fine->personlast) {
					$fine_hash{"done_by"} = $fine->personfirst." ".$fine->personlast." (".$fine->personemail.")";
				}
				$fine_hash{"levied_at"} = $fine->levied_at;

				if ($fine->deleted) {

					$fine_hash{"deleted"}++;

					$fine_hash{"name"} .= " deleted at "
						if $fine->deleted_at;

					$fine_hash{"name"} .= &Tab::niceshortdt($fine->deleted_at->set_time_zone($tourn->tz))
						if $fine->deleted_at;

					$fine_hash{"name"} .= " by ". $fine->deleted_by->first." ".$fine->deleted_by->last
						if $fine->deleted_by && $names;

				} else {

					$fine_hash{"name"} .= " recorded "
						if $fine->levied_at;

					$fine_hash{"name"} .= &Tab::eurodate($fine->levied_at->set_time_zone($tourn->tz))
						if $fine->levied_at;

					$fine_hash{"name"} .= " by ". $fine->levied_by->first." ".$fine->levied_by->last
						if $fine->levied_by && $names;
				}

				$fine_hash{"fine_id"} = $fine->id;
				$fine_hash{"fee"} = $fine->amount;

				push (@felines, {%fine_hash});
			}

			next if $fine->deleted();

			if ($fine->payment > 0) {
				$fine_hash{"fee"} = "true";
				$total_payments += $fine->amount;
			} else {

				$total_entry_fees += $fine->amount;

				if (lc($fine->reason) eq "judge bond") {
					$bond_total += $fine->amount;
				} else {
					$fine_total += $fine->amount;
				}
			}

			$total += $fine->amount();

		} # end of foreach fine
	}

	my %totals = ();

	if ($entry_fees) {
		if ($schools->{"all_fee_discount"}{$school_id}) {
			my $discount = $total_entry_fees * ($schools->{"all_fee_discount"}{$school_id} / 100);
			$discount = nearest(.01, $discount);
			$total_entry_fees -= $discount;
			$total -= $discount;

			my %discount_line = ();
			$discount_line{"name"} = $schools->{"all_fee_discount"}{$school_id}."% discount to all fees";
			$discount_line{"short_name"} = $schools->{"all_fee_discount"}{$school_id}."% off fees";
			$discount_line{"quantity"} = 1;
			$discount_line{"per_unit"} = $discount;
			$discount_line{"fee"} = -$discount;
			push (@felines, {%discount_line});
		}
	}

	if ($concessions) {
		if ($schools->{"concession_fee_discount"}{$school_id}) {
			my $discount = $total_concessions * ($schools->{"concession_fee_discount"}{$school_id} / 100);
			$discount = nearest(.01, $discount);
			$total_concessions -= $discount;
			$total -= $discount;

			my %discount_line = ();
			$discount_line{"name"} = $schools->{"concession_fee_discount"}{$school_id}."% discount to concessions";
			$discount_line{"short_name"} = $schools->{"concession_fee_discount"}{$school_id}."% off concessions";
			$discount_line{"quantity"} = 1;
			$discount_line{"per_unit"} = $discount;
			$discount_line{"fee"} = -$discount;
			push (@felines, {%discount_line});
		}
	}

	if ($all) {
		$totals{"entries"}     = $only_entry_fees;
		$totals{"entry_fees"}  = $total_entry_fees;
		$totals{"concessions"} = $total_concessions;
		$totals{"total_fees"}  = $total_concessions + $total_entry_fees;
		$totals{"payments"}    = $total_payments;
		$totals{"judges"}      = $judging_fees;
		$totals{"bond"}        = $bond_total;
		$totals{"fines"}       = $fine_total;
		$totals{"balance"}     = $total;

		$totals{"concessions_by_code"} = \%concessions_by_code;
	}

	return ($total, \@felines, \%totals, \@fines, \@all_orders, $judging_fees);

</%init>
