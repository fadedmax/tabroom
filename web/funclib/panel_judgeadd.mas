<%args>
	$panel    => undef
	$panel_id => undef
	$judge    => undef
	$judge_id => undef
	$chair    => 0
	$done     => 0
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	return unless ($judge || $judge_id) && ($panel || $panel_id);

	$judge_id = $judge->id if $judge && (not defined $judge_id);
	$panel_id = $panel->id if $panel && (not defined $panel_id);

	# If I ever figure out what is sending a "4" as a chair flag I'm
	# going to murder it.

	$chair = 1 if $chair > 0;
	$chair = 0 if $chair < 1;

	Tab::Ballot->set_sql("empties" => "
		select ballot.*
			from ballot
		where 1=1
		and ballot.judge IS NULL
		and ballot.panel = ?
	");

	my @empty_ballots = Tab::Ballot->search_empties( $panel_id );
	my $i_can_haz_entries;

	if (@empty_ballots) {

		if (Tab::Ballot->search(panel => $panel_id, judge => $judge_id)) {
			return;
		}

		my $sth = $dbh->prepare("
			update ballot set judge = ? where judge IS NULL and panel = ?
		");

		my $score_sth = $dbh->prepare("
			delete score.*
				from score, ballot
				where ballot.judge = ?
				and ballot.panel = ?
				and ballot.id = score.ballot
		");

		eval {
			$sth->execute($judge_id, $panel_id);
			$score_sth->execute($judge_id, $panel_id);
		};

	} else {

		my @ballots = Tab::Ballot->search(panel => $panel_id);

		my %existing_judges;
		my $sample_judge;

		foreach my $ballot (@ballots) {

			if ($ballot->judge > 0) {

				if ($ballot->judge->id == $judge_id) {
					return;
				}

				push @{$existing_judges{$ballot->judge->id}}, $ballot;

				unless ($sample_judge) {
					$sample_judge = $ballot->judge->id;
				}

			} else {

			}
		}

		return if $existing_judges{$judge_id};

		if ($ARGS{"wudc"}) {
			$done = 1 unless $chair == 1;
		}

		my $created;
		my %did_it;


		my $sth = $dbh->prepare("
			update ballot set judge_started = NULL where id = ?
		");

		unless ( $existing_judges{$judge_id} && @{$existing_judges{$judge_id}}) {

			foreach my $ballot (@{$existing_judges{$sample_judge}}) {

				next if $did_it{"ballot"}{$ballot->id}++;
				next if $did_it{"entry"}{$ballot->entry}++;

				$done = 0 unless $done;
				$i_can_haz_entries++ if $ballot->entry > 0;

				my $copy = eval {
					return $ballot->copy({
						judge         => $judge_id,
						chair         => $chair,
						tv            => 0,
						audit         => $done
					});
				};

				$sth->execute($copy);
				$created++;
			}

			unless ($created) {

				Tab::Ballot->create({
					judge => $judge_id,
					panel => $panel_id,
					chair => $chair
				});
			}
		}
	}

	my $limit;
	if ($i_can_haz_entries) {
		$limit = " or ballot.entry = 0 ";
	}

	Tab::Ballot->set_sql( delete_empties => "
		delete ballot.*
		from ballot
		where ballot.panel = ?
		and (ballot.judge = 0 or ballot.judge is null $limit )
	");

	Tab::Ballot->sql_delete_empties->execute($panel_id);

	return;

</%init>
