<%args>
	$string => undef
	$dt     => undef
	$tz     => undef
	$length => undef
	$format => undef
</%args>
<%init>

	#After I messed this up 93,341 times
	if ($format && (not defined $length)) {
		$length = $format;
	}

	if (not defined $length) {
		$length = "short";
	}

	unless ($tz) {
		$tz = "America/New_York";
	}

	if ($dt) {
		$dt = $dt->clone();
	} else {
		$dt = eval {
			return DateTime::Format::MySQL->parse_datetime($string);
		};
	}

	return unless $dt;

	my $response = eval {
		return $dt->year;
	};

	return unless $response;

	if ($tz && $dt) {
		eval {
			$dt->set_time_zone($tz);
		};
	}


	if ($ARGS{"day_abbr"}) {
		$m->print($dt->day_abbr." ");
	}

	if ($length eq "sortable") {

		if ($ARGS{"return"}) {
			return $dt->ymd;
		}
		$m->print($dt->ymd);

	} elsif ($length eq "csv") {

		$m->print($dt->year."-".$dt->month."-".$dt->day." ".$dt->hour.":".$dt->strftime('%M'));

	} elsif ($length eq "shortest") {

		$m->print($dt->month."/".$dt->day);

	} elsif ($length eq "shorter") {

		$m->print($dt->mdy('/'));

	} elsif ($length eq "short") {

		$m->print($dt->month_abbr." ".$dt->day);

	} elsif ($length eq "formal") {

		$m->print($dt->month_name." ".$dt->day);
		$m->print(", ".$dt->year);

	} elsif ($length eq "medium" || (not defined $length)) {

		$m->print($dt->day." ".$dt->month_abbr." ".$dt->year);

	} elsif ($length eq "long") {

		$m->print($dt->day." ".$dt->month_name." ".$dt->year);

	} elsif ($length eq "longer") {

		$m->print($dt->day_abbr." ".$dt->day." ".$dt->month_name." ".$dt->year);

	} elsif ($length eq "day") {

		$m->print($dt->day_abbr);

	} elsif ($length eq "murica" && $ARGS{'span'}) {

		if ($tz) {
			$ARGS{'span'}->set_time_zone($tz);
		}

		if ($ARGS{'span'}->year != $dt->year) {
			$m->print($dt->month_name." ".$dt->day.", ".$dt->year);
			$m->print(" &ndash; ".$ARGS{"span"}->month_name." ".$ARGS{"span"}->day.", ".$ARGS{"span"}->year);
		} elsif ($ARGS{'span'}->month != $dt->month) {
			$m->print($dt->month_name." ".$dt->day."&ndash;");
			$m->print($ARGS{"span"}->month_name." ".$ARGS{"span"}->day.", ".$dt->year);
		} else {
			$m->print($dt->month_name." ".$dt->day."&ndash;".$ARGS{"span"}->day,", ".$dt->year);
		}

		unless ($ARGS{"no_days"}) {
			$m->print(" (".$dt->day_abbr."-".$ARGS{"span"}->day_abbr.")");
		}

	} elsif ($length eq "murica") {

		if ($ARGS{"return"}) {
			return $dt->day_abbr." ".$dt->month_name." ".$dt->day.", ".$dt->year;
		} else {
			$m->print($dt->day_abbr." ".$dt->month_name." ".$dt->day.", ".$dt->year);
		}

	} elsif ($length eq "murica_short") {
		if ($ARGS{"return"}) {
			return $dt->month_name." ".$dt->day.", ".$dt->year;
		} else {
			$m->print($dt->month_name." ".$dt->day.", ".$dt->year);
		}
	} elsif ($length eq "murica_fixed") {

		if ($ARGS{"return"}) {
			return $dt->month_abbr." ".$dt->day.", ".$dt->year;
		} else {
			$m->print($dt->month_abbr." ".$dt->day.", ".$dt->year);
		}

	} elsif ($length eq "casual") {

		$m->print($dt->day_name." the ".Lingua::EN::Numbers::Ordinate::ordinate($dt->day));

	} elsif ($length eq "murica_shorterday") {

		if ($ARGS{"comma"}) {
			$m->print($dt->day_abbr." ".$dt->month_abbr." ".$dt->day.",");
		} else {
			$m->print($dt->day_abbr." ".$dt->month_abbr." ".$dt->day);
		}

	} elsif ($length eq "murica_shorter") {

		if ($ARGS{"comma"}) {
			$m->print($dt->month_abbr." ".$dt->day.",");
		} else {
			$m->print($dt->month_abbr." ".$dt->day);
		}

	} elsif ($length eq "formal") {

		$m->print($dt->month_name." ".$dt->day.", ".$dt->year);

	} elsif ($length eq "longest") {

		$m->print($dt->day_name." ".$dt->day." ".$dt->month_name." ".$dt->year);
	}


</%init>
