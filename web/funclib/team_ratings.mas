<%args>
	$circuit_id => undef
	$circuit    => undef
	$startdate  => undef
	$enddate    => undef
</%args>
<%init>

	use Time::HiRes qw( time );
	use Data::Dumper;
	my $start = time();
	my $ntoshow=300;

	$circuit = Tab::Circuit->retrieve($circuit_id) unless $circuit;
	$m->abort unless $circuit;

	# Get date ranges
	my ($start_date, $end_date) = $m->comp("/funclib/seasonal_date_range.mas");

	# CREATE AN HONORS_WEIGHT FOR ALL EVENTS WITHOUT AN EVENT_SETTING FOR ONE

	$m->comp(
		"/funclib/reset_event_rating_weights.mas",
		circuit_id => $circuit->id
	);

	my $end = time();

	#NOW PULL USERS AND POINTS

	Tab::Student->columns(TEMP => qw/points/);
	Tab::Student->columns(TEMP => qw/avg_points/);
	Tab::Student->columns(TEMP => qw/chapter/);
	Tab::Student->columns(TEMP => qw/nevents/);

	# For the love of God Jon please make things universal and not particular
	# to NDT/CEDA

	my @competitors;

	if ($circuit->id == 43) {

		Tab::Student->set_sql(pull_competitors => "

			select student.*,
				sum((result.percentile/10) * event_setting.value) as points,
				avg((result.percentile/10) * event_setting.value) as avg_points,
				chapter.name as chapter,
				count(entry.id) as nevents

			from student, entry_student, entry, result, event, event_setting,
				chapter, tourn, chapter_circuit, result_set

			where student.chapter = chapter.id
			and chapter.id = chapter_circuit.chapter
			and chapter_circuit.circuit = ?
			and entry_student.student = student.id
			and entry.id = entry_student.entry
			and result.entry = entry.id
			and event.id = entry.event
			and event_setting.event = event.id
			and event_setting.tag = 'honors_weight'
			and event.type = 'debate'
			and entry.dropped = 0
			and result.percentile > 0
			and result_set.id = result.result_set
			and result_set.label = 'Final Places'
			and tourn.id = entry.tourn
			and tourn.start >= ?
			and tourn.end <= ?
			group by student.id
			order by points desc
		");

		@competitors = Tab::Student->search_pull_competitors( $circuit->id, $start_date, $end_date);

	} else {

		Tab::Student->set_sql(pull_competitors => "

			select student.*,
				sum(result.percentile/10) as points,
				avg(result.percentile/10) as avg_points,
				count(entry.id) as nevents

			from student, entry_student, entry, result, event,
				tourn, tourn_circuit, result_set

			where tourn_circuit.circuit = ?
			and tourn_circuit.tourn = tourn.id
			and entry_student.student = student.id
			and entry.id = entry_student.entry
			and result.entry = entry.id
			and event.id = entry.event
			and entry.dropped = 0
			and result.percentile > 0
			and result_set.id = result.result_set
			and result_set.label = 'Final Places'
			and tourn.id = entry.tourn
			and tourn.start >= ?
			and tourn.end <= ?
			group by student.id
			order by points desc
		");

		@competitors = Tab::Student->search_pull_competitors( $circuit->id, $start_date, $end_date );
	}

	my %team_rating;

	foreach my $comp (@competitors) {

		$team_rating{$comp->id}{'total'} = sprintf("%.2f", $comp->points);
		$team_rating{$comp->id}{'avg'} = sprintf("%.2f", $comp->avg_points);
	}

	return %team_rating ;

</%init>
