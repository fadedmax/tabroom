<%args>
	$tourn
	$add_one => undef
	$weekend => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my %all_days;
	my %ts_days;

	my $dbh = Tab::DBI->db_Main();

	# First populate any day that has a round in it already
	my $sth = $dbh->prepare("
		select timeslot.id,
			CONVERT_TZ(timeslot.start, '+00:00', tourn.tz) start,
			CONVERT_TZ(timeslot.end, '+00:00', tourn.tz) end,
			timeslot.end rawend
		from timeslot, tourn
		where timeslot.tourn = ?
			and timeslot.tourn = tourn.id
	");

	$sth->execute($tourn->id);
	my $results = $sth->fetchall_hash;
	my %taken_day;

	foreach my $ref (@{$results}) {

		my $raw_start = substr($ref->{start}, 5, 2).'-'.substr($ref->{start}, 8, 2);

		unless ($taken_day{$raw_start}++) {
			my $dt = DateTime::Format::MySQL->parse_datetime($ref->{start});
			$dt->set_time_zone($tz);
			$dt->truncate( to => "day");
			$ts_days{$dt->mdy('/')} = $dt;
		}

		my $raw_end = substr($ref->{end}, 8, 4).'-'.substr($ref->{end}, 8, 2);

		unless ($taken_day{$raw_end}++) {
			my $end_dt = DateTime::Format::MySQL->parse_datetime($ref->{end});
			$end_dt->set_time_zone($tz);
			$end_dt->truncate( to => "day");
			$ts_days{$end_dt->mdy('/')} = $end_dt;
		}
	}

	$sth->finish();

	if ($tourn->setting("nsda_district")) {

		my $limit;

		if ($weekend) {
			$limit = " and weekend.id = ".$weekend->id;
		}

		my $sth = $dbh->prepare("
			select distinct weekend.id,
				CONVERT_TZ(weekend.start, '+00:00', tourn.tz),
				CONVERT_TZ(weekend.end, '+00:00', tourn.tz)
			from weekend, tourn
			where weekend.tourn = ?
				and weekend.tourn = tourn.id
				$limit
		");

		$sth->execute($tourn->id);

		while (
			my ($id, $start, $end) = $sth->fetchrow_array()
		) {

			my $start_dt = DateTime::Format::MySQL->parse_datetime($start);
			$start_dt->set_time_zone($tourn->tz);
			$start_dt->truncate( to => "day");

			my $end_dt = DateTime::Format::MySQL->parse_datetime($end);
			$end_dt->set_time_zone($tourn->tz);
			$end_dt->truncate( to => "day");

			$all_days{$start_dt->mdy('/')} = $start_dt->clone();

			while ($start_dt->day_of_year < $end_dt->day_of_year) {
				$start_dt->add(days => 1);
				$all_days{$start_dt->mdy('/')} = $start_dt->clone();
			}
		}

		$sth->finish();

	} else {

		my $start = $tourn->start->clone;
		my $end = $tourn->end->clone;

		$start->set_time_zone("UTC");
		$end->set_time_zone("UTC");

		$start->set_time_zone($tz);
		$end->set_time_zone($tz);

		$end->truncate(to => 'day');
		$start->truncate(to => 'day');

		$all_days{$start->mdy('/')} = $start->clone;

		my $counter;

		while ($start->epoch < $end->epoch) {
			$counter++;
			$start->add(days => 1);
			$all_days{$start->mdy('/')} = $start->clone;
		}

	}

	if ($ARGS{"both"}) {

		my @ts_days;
		my @all_days;

		my $counter;
		foreach my $key (keys %ts_days) {
			push @ts_days, $ts_days{$key};
			$counter++;
		}

		undef $counter;
		foreach my $key (keys %all_days) {
			push @all_days, $all_days{$key};
			$counter++;
		}

		@ts_days = sort {$a->epoch <=> $b->epoch} @ts_days;
		@all_days = sort {$a->epoch <=> $b->epoch} @all_days;

		return \@ts_days, \@all_days;

	} else {

		my @days;

		foreach my $key (keys %ts_days) {
			push @days, $ts_days{$key};
		}

		foreach my $key (keys %all_days) {
			next if $ts_days{$key};
			push @days, $all_days{$key};
		}

		@days = sort {$a->epoch <=> $b->epoch} @days;

		return @days;

	}

</%init>
