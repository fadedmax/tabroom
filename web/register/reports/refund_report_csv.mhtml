<%args>
	$tourn
	$tourn_settings
</%args>
<%init>

    my $name = $tourn->name;
    $name =~ s/[\W_]//g;
    my $filename = "RefundInformation-$name.csv";

	$m->clear_buffer;
    $r->content_type('application/csv');
    $r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	$m->print("School, ID, Balance, Method, Method Changed,Last Changed By,Last Changed Email,");
	$m->print("Refund Payable To, Payable Changed, Refund Address, Address Changed\n");

	my %school_data = $m->comp(
        "/funclib/balances.mas",
        tourn          => $tourn,
        tourn_settings => $tourn_settings,
        all            => 1
    );

	my %school_settings = $m->comp("/funclib/school_settings.mas",
		tourn => $tourn
	);

	my $dbh = Tab::DBI->db_Main();
	my $sth = $dbh->prepare("
		select school.id, school.name,
			chapter.nsda,
			refund_payable.value_text payable,
			refund_address.value_text address,
			refund_method.value method,
			CONVERT_TZ(refund_payable.timestamp, '+00:00', tourn.tz) payable_ts,
			CONVERT_TZ(refund_address.timestamp, '+00:00', tourn.tz) address_ts,
			CONVERT_TZ(refund_method.timestamp, '+00:00', tourn.tz) method_ts,
			last_changed.first, last_changed.last,
			last_changed.email

		from (school, tourn)

		left join chapter on chapter.id = school.chapter

		left join school_setting refund_method
			on refund_method.tag = 'refund_method'
			and refund_method.school = school.id

		left join person last_changed
			on last_changed.id = refund_method.last_changed

		left join school_setting refund_payable
			on refund_payable.tag = 'refund_payable'
			and refund_payable.school = school.id

		left join school_setting refund_address
			on refund_address.tag = 'refund_address'
			and refund_address.school = school.id

		where school.tourn = tourn.id
			and tourn.id = ?
			and exists (select entry.id from entry where entry.unconfirmed = 0 and entry.school = school.id)
			and exists (select chapter.id from chapter where school.chapter = chapter.id)
		order by school.name
	");

	$sth->execute($tourn->id);
	my $results = $sth->fetchall_hash();
	my %schools = map {$_->{id} => $_} @{$results};

	foreach my $school (@{$results}) {

		my $school_id = $school->{id};
		$m->print('"'.$school->{name}.'",');
		$m->print('"'.$school->{nsda}.'",');
		$m->print('"'.$school_data{$school_id}{"balance"}.'",');
		$m->print('"'.$school->{"method"}.'",');
		$m->print('"'.$school->{"method_ts"}.'",');
		$m->print('"'.$school->{"first"}." ".$school->{last}.'",');
		$m->print('"'.$school->{"email"}.'",');
		$m->print('"'.$school->{"payable"}.'",');
		$m->print('"'.$school->{"payable_ts"}.'",');

		my $address_ref = eval {
			return JSON::decode_json($school->{address});
		};

		if (keys %{$address_ref}) {
			$m->print('"'.$address_ref->{"contact_name"}.'",');
			$m->print('"'.$address_ref->{"street"}.'",');
			$m->print('"'.$address_ref->{"secondary"}.'",');
			$m->print('"'.$address_ref->{"city"}.'",');
			$m->print('"'.$address_ref->{"state"}.'",');
			$m->print('"'.$address_ref->{"zip"}.'",');
			$m->print('"'.$address_ref->{"country"}.'",');
			$m->print('"'.$school->{"address_ts"}.'",');
		} elsif ($school->{address}) {
			$m->print('"'.$school->{address});
			$m->print('"'.$school->{"address_ts"}.'",');
		}

		$m->print("\n");

	} # end of foreach school

	$m->abort;

</%init>
