<%args>
    $person => undef
    $key    => undef
</%args>
<%init>

    # Written by ATH, Apr. 2020
    use JSON;
    my $json = JSON->new->allow_nonref;
    $r->content_type('application/json');

    my $dbh = Tab::DBI->db_Main();

    unless ($key eq $Tab::hacky_api_key) {
        my %err = (message => 'Unauthorized.');
        $r->status(401);
        print $json->pretty->encode(\%err);
        $m->abort;
    }

    # Get the person data to include with the resposne
    my $profile = Tab::Person->retrieve($person);
    unless ($profile) {
        my %err = (
            message => 'No person with the ID'.$person.' was found.'
        );
        print $json->pretty->encode(\%err);
        $m->abort;
    }

    # Tournaments entered as a competitor, happening now
    my $entrySQL = "
        select
            tourn.id as 'tourn_id',
            tourn.name as 'tourn_name',
            entry.id as 'entry_id',
            entry.code,
            entry.name,
            event.name as 'event'
        from entry, entry_student, student, event, tourn
        where student.person = ?
        and (tourn.start > now() OR (now() > tourn.start and tourn.end > now()))
        and student.id = entry_student.student
        and entry_student.entry = entry.id
        and entry.event = event.id
        and event.tourn = tourn.id
        and entry.active = 1
        group by entry.id
    ";
    my $sth = $dbh->prepare($entrySQL);
    $sth->execute($person);

    # Tournaments entered as a judge, happening now
    my $judgeSQL = "
        select
            tourn.id as 'tourn_id',
            tourn.name as 'tourn_name',
            judge.id as 'judge_id',
            judge.code,
            judge.first,
            judge.last,
            category.name as 'category'
        from judge, category, tourn
        where judge.person = ?
			and judge.category = category.id
			and category.tourn = tourn.id
			and (tourn.start > now() OR (now() > tourn.start and tourn.end > now()))
        group by judge.id
    ";
    my $sth2 = $dbh->prepare($judgeSQL);
    $sth2->execute($person);

    # Advisors for a school entered at a tournament happening now
    my $advisorSQL = "
        select
            distinct school.chapter as 'chapter',
            school.id as 'school',
            tourn.id as 'tourn_id',
            tourn.name as 'tourn_name'
        from school
			inner join permission on permission.chapter = school.chapter and permission.tag = 'chapter'
			inner join tourn on tourn.id = school.tourn
        where
            permission.person = ?
            and (tourn.start > now() OR (now() > tourn.start and tourn.end > now()))
    ";
    my $sth3 = $dbh->prepare($advisorSQL);
    $sth3->execute($person);

    # Non-retired students on a roster for a school at a tournament happening now
    my $studentSQL = "
        select
            distinct school.chapter as 'chapter',
            tourn.id as 'tourn_id',
            tourn.name as 'tourn_name'
        from school
        inner join student on student.chapter = school.chapter
        inner join tourn on tourn.id = school.tourn
        where
            student.person = ?
            and (tourn.start > now() OR (now() > tourn.start and tourn.end > now()))
            and student.retired = 0
    ";
    my $sth4 = $dbh->prepare($studentSQL);
    $sth4->execute($person);

    # Tournament admins with permission
    my $adminSQL = "
        select
            distinct tourn.id as 'tourn_id',
            tourn.name as 'tourn_name',
            tourn.start as 'tourn_start',
            tourn.end as 'tourn_end',
            permission.tag as 'tourn_permission',
            GROUP_CONCAT(contact_person.email) as 'tourn_contact'
        from tourn
        inner join permission on permission.tourn = tourn.id
        left join permission contact on contact.tourn = tourn.id and contact.tag = 'contact'
        left join person contact_person on contact_person.id = contact.person
        where
            permission.person = ?
            and (tourn.start > now() OR (now() > tourn.start and tourn.end > now()))
        group by tourn.id
    ";
    my $sth5 = $dbh->prepare($adminSQL);
    $sth5->execute($person);

    $m->clear_buffer();

    my @tourns;

    while (
        my ($tourn_id, $tourn_name, $entry_id, $code, $name, $event) = $sth->fetchrow_array()
    ) {
        my %competitor_hash = (
            type       => 'competitor',
            tourn_id   => $tourn_id,
            tourn_name => $tourn_name,
            entry_id   => $entry_id,
            code       => $code,
            name       => $name,
            event      => $event,
        );
        push @tourns, \%competitor_hash;
    }

    while (
        my ($tourn_id, $tourn_name, $judge_id, $code, $first, $last, $category) = $sth2->fetchrow_array()
    ) {
        my %judge_hash = (
            type       => 'judge',
            tourn_id   => $tourn_id,
            tourn_name => $tourn_name,
            judge_id   => $judge_id,
            code       => $code,
            name       => $first . ' ' . $last,
            category   => $category,
        );
        push @tourns, \%judge_hash;
    }

    while (
        my ($chapter, $school, $tourn_id, $tourn_name) = $sth3->fetchrow_array()
    ) {
        my %advisor_hash = (
            type       => 'advisor',
            chapter    => $chapter,
            school     => $school,
            tourn_id   => $tourn_id,
            tourn_name => $tourn_name,
        );
        push @tourns, \%advisor_hash;
    }

    while (
        my ($chapter, $tourn_id, $tourn_name) = $sth4->fetchrow_array()
    ) {
        my %student_hash = (
            type       => 'student',
            chapter    => $chapter,
            tourn_id   => $tourn_id,
            tourn_name => $tourn_name,
        );
        push @tourns, \%student_hash;
    }

    while (
        my ($tourn_id, $tourn_name, $tourn_start, $tourn_end, $tourn_permission, $tourn_contact) = $sth5->fetchrow_array()
    ) {
        my %admin_hash = (
            type       => 'admin',
            tourn_id   => $tourn_id,
            tourn_name => $tourn_name,
            tourn_start => $tourn_start,
            tourn_end => $tourn_end,
            tourn_permission => $tourn_permission,
            tourn_contact => $tourn_contact,
        );
        push @tourns, \%admin_hash;
    }

    my %json_hash = (
        profile => {
            first   => $profile->first,
            last    => $profile->last,
            name    => $profile->first . ' ' . $profile->last,
            email   => $profile->email,
            phone   => $profile->phone,
            pronoun => $profile->pronoun,
        },
        tourns => \@tourns,
    );

    print $json->pretty->encode(\%json_hash);

	;

</%init>
