<%args>
	$date => undef
</%args>
<%init>

	my $now = DateTime->now();
	my $dbh = Tab::DBI->db_Main();

    my %zones = (
        'America/Los_Angeles'   => "us-west-2",
        'America/Denver'        => "us-west-2",
        'America/Phoenix'       => "us-west-2",
        'America/Adak'          => "us-west-2",
        'America/Anchorage'     => "us-west-2",
        'America/Boise'         => "us-west-2",
        'America/Curacao'       => "us-west-2",
        'America/Denver'        => "us-west-2",
        'America/Edmonton'      => "us-west-2",
        'America/El_Salvador'   => "us-west-2",
        'America/Los_Angeles'   => "us-west-2",
        'America/Managua'       => "us-west-2",
        'America/Mexico_City'   => "us-west-2",
        'America/Nome'          => "us-west-2",
        'America/Phoenix'       => "us-west-2",
        'America/Regina'        => "us-west-2",
        'America/Santo_Domingo' => "us-west-2",
        'America/Sitka'         => "us-west-2",
        'America/Tijuana'       => "us-west-2",
        'America/Vancouver'     => "us-west-2",
        'America/Winnipeg'      => "us-west-2",
		'Asia/Seoul'            => "us-west-2",
		'Asia/Shanghai'         => "us-west-2",
		'Asia/Singapore'        => "us-west-2",
		'Asia/Taipei'           => "us-west-2",
		'Asia/Tokyo'            => "us-west-2",
        'Pacific/Honolulu'      => "us-west-2",
        'Pacific/Guam'          => "us-west-2",
    );

	my $sth = $dbh->prepare("
		select
			tourn.id,
			tourn.name,
			nc_purchased.value,
			nco_purchased.value,
			nsda_campus_days.value_text,
			nsda_campus_observer_days.value_text,

			CONVERT_TZ(tourn.start, '+00:00', tourn.tz),
			CONVERT_TZ(tourn.end, '+00:00', tourn.tz),

			tourn.tz
		from (tourn)
			 left join tourn_setting nsda_campus_days
				on tourn.id = nsda_campus_days.tourn
				and nsda_campus_days.tag = 'nsda_campus_days'

			 left join tourn_setting nsda_campus_observer_days
				on tourn.id = nsda_campus_observer_days.tourn
				and nsda_campus_observer_days.tag = 'nsda_campus_observer_days'

			 left join tourn_setting nco_purchased
				on tourn.id = nco_purchased.tourn
				and nco_purchased.tag = 'nco_purchased'

			 left join tourn_setting nc_purchased
				on tourn.id = nc_purchased.tourn
				and nc_purchased.tag = 'nc_purchased'

			where tourn.start < (NOW() + INTERVAL 1 HOUR)
			and tourn.end > NOW()
		group by tourn.id
	");

	$sth->execute();

	my %zonecount;
	my $default = "us-east-2";

	while (
		my (
			$tourn_id, $name, $purchased, $observers,
			$day_json, $obs_day_json, $start, $end, $tz
		)  = $sth->fetchrow_array()
	) {

		my $tourn = Tab::Tourn->retrieve($tourn_id);

		my %days = $m->comp("/funclib/campus_days.mas",    
			tourn  => $tourn
		);    

		my $daycount;

        foreach my $day_id (
            sort {
                $days{$a}{"start"}->epoch <=> $days{$b}{"end"}->epoch
            } keys %days
        ) {
			$daycount++;

			if ($days{$day_id}{"start"} < $now && $days{$day_id}{"end"} > $now) {
				last;
			}
		}

		my $days = eval{
			return JSON::decode_json($day_json);
		};

		my $obs_days = eval{
			return JSON::decode_json($obs_day_json);
		};

		my $zone = $zones{$tz};
		$zone = $default unless $zone;

		$zonecount{$zone}{"tournaments"}++;
		$zonecount{$zone}{"today"} += $days->{$daycount}{"count"};
		$zonecount{$zone}{"today"} += $obs_days->{$daycount}{"count"};
		$zonecount{$zone}{"purchased"} += $purchased + $observers;
	}

	$sth->finish();

	$sth = $dbh->prepare("
		select
			tourn.id,
			event.id,
			event.type,
			tourn.tz,
			count(distinct entry.id)

		from tourn, event, entry, event_setting campus
			where tourn.start < (NOW() + INTERVAL 11 HOUR)
			and tourn.end > NOW()

			and tourn.id = event.tourn
			and event.id = entry.event
			and entry.active = 1
			and event.id = campus.event
			and campus.tag = 'online_mode'
			and campus.value in ('nsda_campus', 'nsda_campus_observers')
		group by event.id
	");

	$sth->execute();

	while (
		my (
			$tourn_id, $event_id, $event_type, $tz, $count
		) = $sth->fetchrow_array()
	) {

		my $rooms;

		if ($event_type eq "congress") {

			$rooms = POSIX::ceil($count / 12);

		} elsif ($event_type eq "speech") {

			$rooms = POSIX::ceil($count / 6);

		} elsif ($event_type eq "debate" || $event_type eq "wsdc") {

			$rooms = POSIX::ceil($count / 2);
		}

		my $zone = $zones{$tz};
		$zone = $default unless $zone;

		$zonecount{$zone}{"max_rooms"} += $rooms;
	}

	$sth->finish();

	$m->clear_buffer();
	$r->content_type('application/json');
	$m->print(JSON::encode_json(\%zonecount));

	;

	$m->abort();

</%init>

