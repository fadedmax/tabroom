<%init>


	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			person1.id p1id, person1.first p1first, person1.last p1last, person1.email p1email, person1.nsda nsda,
			person2.id p2id, person2.first p2first, person2.last p2last, person2.email p2email

			from person person1, person person2

			where person1.nsda > 0
			and person1.nsda = person2.nsda
			and person1.id < person2.id
			and person1.last != person2.last
	");

	$sth->execute();

	my $delink_cj_sth = $dbh->prepare("
		update chapter_judge set nsda = NULL where nsda = ? and person = ?
	");
	my $delink_person_sth = $dbh->prepare("
		update person set nsda = NULL where nsda = ? and person.id = ?
	");

	my $result_refs = $sth->fetchall_hash();

	foreach my $result (@{$result_refs}) {

		my ($personref, $raw) = $m->comp(
			"/funclib/nsda/api_client.mas",
			path => "/members/".$result->{"nsda"}
		);

		unless ($personref->{"email"}) {
			$m->print("<p>NSDA Number ".$result->{"nsda"}." does not exist! Delink everywhere!</p>");
			$delink_cj_sth->execute($result->{"nsda"}, $result->{"p1id"});
			$delink_person_sth->execute($result->{"nsda"}, $result->{"p1id"});
			$delink_cj_sth->execute($result->{"nsda"}, $result->{"p2id"});
			$delink_person_sth->execute($result->{"nsda"}, $result->{"p2id"});
			$m->flush_buffer();
		} else {

			if (
				$personref->{"email"} eq $result->{"p1email"}
				&& $personref->{"email"} ne $result->{"p2email"}
			) {
				$m->print("<p>".$result->{'p2first'}." ".$result->{"p2last"}." email ".$result->{'p2email'}." not matched. Delinking from ".$personref->{"email"}."</p>");
				$delink_cj_sth->execute($result->{"nsda"}, $result->{"p2id"});
				$delink_person_sth->execute($result->{"nsda"}, $result->{"p2id"});
				$m->flush_buffer();
			} elsif (
				$personref->{"email"} eq $result->{"p2email"}
				&& $personref->{"email"} ne $result->{"p1email"}
			) {
				$m->print("<p>".$result->{'p1first'}." ".$result->{"p1last"}." email ".$result->{'p1email'}." not matched. Delinking from ".$personref->{"email"}."</p>");
				$delink_cj_sth->execute($result->{"nsda"}, $result->{"p1id"});
				$delink_person_sth->execute($result->{"nsda"}, $result->{"p1id"});
				$m->flush_buffer();
			} elsif (
				$personref->{"last"} eq $result->{"p1last"}
				&& $personref->{"last"} ne $result->{"p2last"}
			) {
				$m->print("<p>".$result->{'p2first'}." ".$result->{"p2last"}." email ".$result->{'p2email'}." not matched. Delinking from ".$personref->{"email"}."</p>");
				$delink_cj_sth->execute($result->{"nsda"}, $result->{"p2id"});
				$delink_person_sth->execute($result->{"nsda"}, $result->{"p2id"});
				$m->flush_buffer();
			} elsif (
				$personref->{"last"} eq $result->{"p2last"}
				&& $personref->{"last"} ne $result->{"p1last"}
			) {
				$m->print("<p>".$result->{'p1first'}." ".$result->{"p1last"}." email ".$result->{'p1email'}." not matched. Delinking from ".$personref->{"email"}."</p>");
				$delink_cj_sth->execute($result->{"nsda"}, $result->{"p1id"});
				$delink_person_sth->execute($result->{"nsda"}, $result->{"p1id"});
				$m->flush_buffer();
			} else {

				$m->print("<p>NSDA Number ".$result->{"nsda"}." no clear match:</p>");
				$m->print("<p> Record ".$personref->{'first'}." ".$personref->{"last"}." email ".$personref->{'email'}."</p>");
				$m->print("<p>Candidates ".$result->{'p1first'}." ".$result->{"p1last"}." ".$result->{"p1email"}."</p>");
				$m->print("<p>".$result->{'p2first'}." ".$result->{"p2last"}." email ".$result->{'p2email'}."</p>");

				my $possible = Tab::Person->search( email => $personref->{"email"})->first;

				if ($possible) {
					$m->print("Actual match found via email!");
					$possible->nsda($result->{"nsda"});
					$possible->update();
					$delink_cj_sth->execute($result->{"nsda"}, $result->{"p1id"});
					$delink_person_sth->execute($result->{"nsda"}, $result->{"p1id"});
					$delink_cj_sth->execute($result->{"nsda"}, $result->{"p2id"});
					$delink_person_sth->execute($result->{"nsda"}, $result->{"p2id"});
				}
			}
		}
	}

	$sth->finish();

	$sth = $dbh->prepare("
		select
			person1.id p1id, person1.first p1first, person1.last p1last, person1.email p1email, person1.last_access p1la,
			person2.id p2id, person2.first p2first, person2.last p2last, person2.email p2email, person2.last_access p2la
		from (person person1, person person2)
		where person1.nsda > 0
			and person1.nsda = person2.nsda
			and person1.id < person2.id
	");

	$sth->execute();

	my $resrefs = $sth->fetchall_hash();

	my $person = Tab::Person->retrieve(1);

	foreach my $result (@{$resrefs}) {

		my $d1 = $result->{"p1la"};
		my $d2 = $result->{"p2la"};

		$d1 =~ s/[\D_]//g;
		$d2 =~ s/[\D_]//g;

		if ($d1 > $d2) {
			$m->print("<p>MERGE of ".$result->{"p2la"}." ".$result->{"p2email"}." ".$result->{"p2first"}." ".$result->{"p2last"}." into ".$result->{"p1la"}." ".$result->{"p1email"});

			my $msg = $m->comp("/user/admin/person_merge_save.mhtml",
				person      => $person,
				target_id   => $result->{"p1id"},
				return      => 1,
				"pick_".$result->{"p2id"} => 1
			);

			$m->print("<p>".$msg."</p>");
			$m->flush_buffer();

		} elsif ($d2 > $d1) {
			$m->print("<p>MERGE of ".$result->{"p1la"}." ".$result->{"p1email"}." ".$result->{"p1first"}." ".$result->{"p1last"}." into ".$result->{"p2la"}." ".$result->{"p2email"});

			my $msg = $m->comp("/user/admin/person_merge_save.mhtml",
				person      => $person,
				target_id   => $result->{"p2id"},
				return      => 1,
				"pick_".$result->{"p1id"} => 1
			);

			$m->print("<p>".$msg."</p>");
			$m->flush_buffer();
		}
	}

	$m->print("<h3>Fin</h3>");


</%init>
