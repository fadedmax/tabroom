<%args>
	$tourn
	$person
	$priority
	$protocol_id
	$count             => 0
	$name              => undef
	$tiebreak_id       => undef
	$count_round       => undef
	$highlow           => undef
	$chair             => "all"
	$truncate          => 0
	$truncate_smallest => 0
	$highlow_count     => 0
	$highlow_threshold => 0
	$highlow_target    => 0
	$multiplier        => 1
	$result            => undef
	$violation         => 0
	$child             => 0
</%args>
<%init>

	unless ($name) {
		my $err = "No tiebreaker name sent";
		$m->redirect("tiebreaks.mhtml?protocol_id=".$protocol_id."&err=$err");
	}

	$multiplier = 1 if $multiplier == 0;
	$violation = 0 if (not defined $violation) || $violation == "";

	$highlow_count = 1
		if $highlow
		&& $highlow_count < 1;

	$highlow_count = 0 unless $highlow_count;
	$highlow_threshold = 0 unless $highlow_threshold;
	$highlow_target = 0 unless $highlow_target;
	$truncate = 0 unless $truncate;
	$child = 0 unless $child;

	my $protocol = Tab::Protocol->retrieve($protocol_id);

	if ($highlow == 5 && $name ne "congress_speech") { 
		my $err = "The best N score limiter only works with the Congress Speeches tiebreaker";
		$m->redirect("tiebreaks.mhtml?protocol_id=$protocol_id&err=$err");
	}

	if ($name eq "judgepref" || $name eq "coinflip") {

		my @already = Tab::Tiebreak->search(
			protocol => $protocol->id,
			priority     => $priority
		);

		foreach my $al (@already) {
			next if $al->id == $tiebreak_id;
			my $err = "Judges Preference and Coinflips cannot be at the same priority level as other tiebreakers.  Hit back on your browser and try again.";
			$m->redirect("tiebreaks.mhtml?err=$err");
		}
	}

	undef $count_round unless $count eq "specific";

	my $tiebreak;
	my $description;

	if ($tiebreak_id) {

		$tiebreak = Tab::Tiebreak->retrieve($tiebreak_id);

		if ($tiebreak) { 

			$description .= "Tiebreak changed for ".$protocol->name." ";
			$description .= "from ".$tiebreak->name." ".$tiebreak->priority;
			$description .= " ".$tiebreak->count." ".$tiebreak->highlow_count;

			$tiebreak->name($name);
			$tiebreak->protocol($protocol->id);
			$tiebreak->count($count);
			$tiebreak->count_round($count_round);
			$tiebreak->highlow($highlow);
			$tiebreak->chair($chair);
			$tiebreak->highlow_count($highlow_count);
			$tiebreak->highlow_threshold($highlow_threshold);
			$tiebreak->highlow_target($highlow_target);
			$tiebreak->multiplier($multiplier);


			$tiebreak->violation($violation);
			$tiebreak->truncate($truncate);
			$tiebreak->truncate_smallest($truncate_smallest);
			$tiebreak->priority($priority);
			$tiebreak->child($child);

			$tiebreak->update();
		}

	} else {

		$tiebreak = Tab::Tiebreak->create({
			name              => $name,
			protocol          => $protocol->id,
			count             => $count,
			count_round       => $count_round,
			highlow           => $highlow,
			chair             => $chair,
			highlow_count     => $highlow_count,
			highlow_threshold => $highlow_threshold,
			highlow_target    => $highlow_target,
			multiplier        => $multiplier,
			violation         => $violation,
			truncate          => $truncate,
			truncate_smallest => $truncate_smallest,
			priority          => $priority,
			child             => $child
		});

		$description .= "Tiebreak created for ".$protocol->name." ";
	}

	if ($result) {

		$tiebreak->result($result);
		$tiebreak->update();

	} else {

		Tab::Tiebreak->set_sql( null_result => "
			update tiebreak set result = NULL where id = ?
		");

		Tab::Tiebreak->sql_null_result->execute($tiebreak->id);
	}

	$description .= " to ".$tiebreak->name." Priority ".$tiebreak->priority;
	$description .= " Count ".$tiebreak->count if $tiebreak->count;
	$description .= " Highlow ".$tiebreak->highlow if $tiebreak->highlow;
	$description .= " HL Threshold ".$tiebreak->highlow_threshold if $tiebreak->highlow_threshold;
	$description .= " HL Target ".$tiebreak->highlow_target if $tiebreak->highlow_target;
	$description .= " HL Count ".$tiebreak->highlow_count if $tiebreak->highlow_count;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now(time_zone => $tz);

    $m->comp("/funclib/log.mas",
		type        => 'tabbing',
		tourn       => $tourn->id,
		person      => $person->id,
		description => $description
	);

	my $msg = "Tiebreak saved";
	$m->redirect("tiebreaks.mhtml?protocol_id=".$protocol->id."&msg=$msg");

</%init>
