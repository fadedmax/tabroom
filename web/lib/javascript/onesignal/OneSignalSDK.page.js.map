{"version":3,"file":"OneSignalSDK.page.js","mappings":"sCAUA,SAAgBA,IACZ,YAAiC,IAAlBC,OAAOC,aACwB,IAAnCD,OAAOC,OAAOC,gBAC7B,CAEA,SAAgBC,IACZ,MAA2C,oBAA5BC,yBAEXA,wBAAwBC,UAAUC,eAAe,uBACzD,C,oJAbA,0CACI,OAAOH,KAAuBJ,GAClC,EAEA,6BAKA,sBAMA,yBAII,MAI4B,yBAArBQ,UAAUC,QAJWD,UAAUE,eAAiB,CAC3D,C,8FC1BA,aAGA,0BAkDA,QAjDW,EAAAC,gBAAP,SAAuBC,GACnB,IAAMC,EAAgBC,SAASC,cAAc,UAC7CF,EAAcG,IAAMJ,EAEpBC,EAAcI,OAAQ,EACtBH,SAASI,KAAKC,YAAYN,EAC9B,EAEO,EAAAO,iBAAP,WAmBY,MAfiB,yCAiB7B,EACO,EAAAC,gBAAP,WACIC,EAAoBX,gBAAgB,UAAGW,EAAoBF,mBAAkB,sCAA8BE,EAAoBC,SACnI,EACO,EAAAC,MAAP,YACQ,IAAAC,gCACAH,EAAoBD,kBAGpBK,KAAKC,8BAEb,EACO,EAAAA,6BAAP,WACI,IAAIC,EAAa,uDACb,IAAAC,iBACAD,GACI,yIAERE,QAAQC,IAAIH,EAChB,EACJ,EAlDA,GAAa,EAAAN,oBAAAA,EAmDbA,EAAoBC,QAAmDS,OAAO,O,GCrD1EC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCdA,OACAhB,oBAAoBE,O","sources":["webpack://onesignal-web-sdk/../../home/runner/work/OneSignal-Website-SDK/OneSignal-Website-SDK/build/ts-to-es6/src/page/utils/BrowserSupportsPush.js","webpack://onesignal-web-sdk/../../home/runner/work/OneSignal-Website-SDK/OneSignal-Website-SDK/build/ts-to-es6/src/page/utils/OneSignalShimLoader.js","webpack://onesignal-web-sdk/webpack/bootstrap","webpack://onesignal-web-sdk/../../home/runner/work/OneSignal-Website-SDK/OneSignal-Website-SDK/build/ts-to-es6/src/entries/sdk.js"],"sourcesContent":["// Light weight JS to detect browsers push notification capabilities\n//\n// This is used by the OneSignalSDK.page.js shim\n// DO NOT add other imports since it is an ES5 target and dead code imports can't be clean up.\n// Checks if the browser supports push notifications by checking if specific\n//   classes and properties on them exist\nexport function isPushNotificationsSupported() {\n    return supportsVapidPush() || supportsSafariLegacyPush();\n}\n// Does the browser support legacy Safari push? (only available on macOS)\nexport function supportsSafariLegacyPush() {\n    return (typeof window.safari !== 'undefined' &&\n        typeof window.safari.pushNotification !== 'undefined');\n}\n// Does the browser support the standard Push API\nexport function supportsVapidPush() {\n    return (typeof PushSubscriptionOptions !== 'undefined' &&\n        // eslint-disable-next-line no-prototype-builtins\n        PushSubscriptionOptions.prototype.hasOwnProperty('applicationServerKey'));\n}\n// Is Safari on iOS or iPadOS\nexport function isIosSafari() {\n    // Safari's \"Request Desktop Website\" (default for iPad) masks the\n    // userAgent as macOS. So we are using maxTouchPoints to assume it is\n    // iOS, since there are no touch screen Macs.\n    return isSafariBrowser() && navigator.maxTouchPoints > 0;\n}\n// Is any Safari browser, includes macOS and iOS.\nfunction isSafariBrowser() {\n    return navigator.vendor === 'Apple Computer, Inc.';\n}\n/* Notes on browser results which lead the logic of the functions above */\n// Safari\n//   macOS - typeof safari.pushNotification == \"object\"\n//         - iframe context - typeof safari == \"undefined\"\n//   iOS -  typeof safari == \"undefined\"\n// Chrome\n//   HTTP & HTTPS - typeof PushSubscriptionOptions == \"function\"\n//   HTTP - navigator.serviceWorker == \"undefined\"\n// Firefox\n//   Normal - typeof PushSubscriptionOptions == \"function\"\n//     HTTP & HTTPS - typeof PushSubscriptionOptions == \"function\"\n//# sourceMappingURL=BrowserSupportsPush.js.map","import { isIosSafari, isPushNotificationsSupported, } from './BrowserSupportsPush';\n// NOTE: Careful if adding imports, ES5 targets can't clean up functions never called.\n// See sdk.ts for what entry points this handles\nexport class OneSignalShimLoader {\n    static addScriptToPage(url) {\n        const scriptElement = document.createElement('script');\n        scriptElement.src = url;\n        // Using defer over async; async timing is inconsistent and may interrupt DOM rendering\n        scriptElement.defer = true;\n        document.head.appendChild(scriptElement);\n    }\n    // Same logic from SdkEnvironment\n    static getPathAndPrefix() {\n        const buildOrigin = typeof __BUILD_ORIGIN__ !== 'undefined'\n            ? __BUILD_ORIGIN__ || 'localhost'\n            : 'localhost';\n        const productionOrigin = 'https://cdn.onesignal.com/sdks/web/v16/';\n        if (typeof __BUILD_TYPE__ === 'undefined') {\n            return productionOrigin;\n        }\n        const isHttps = typeof __IS_HTTPS__ !== 'undefined' ? __IS_HTTPS__ : true;\n        const protocol = isHttps ? 'https' : 'http';\n        const port = isHttps ? 4001 : 4000;\n        switch (__BUILD_TYPE__) {\n            case 'development':\n                return __NO_DEV_PORT__\n                    ? `${protocol}://${buildOrigin}/sdks/web/v16/Dev-`\n                    : `${protocol}://${buildOrigin}:${port}/sdks/web/v16/Dev-`;\n            case 'staging':\n                return `https://${buildOrigin}/sdks/web/v16/Staging-`;\n            default:\n                return productionOrigin;\n        }\n    }\n    static loadFullPageSDK() {\n        OneSignalShimLoader.addScriptToPage(`${OneSignalShimLoader.getPathAndPrefix()}OneSignalSDK.page.es6.js?v=${OneSignalShimLoader.VERSION}`);\n    }\n    static start() {\n        if (isPushNotificationsSupported()) {\n            OneSignalShimLoader.loadFullPageSDK();\n        }\n        else {\n            this.printEnvironmentNotSupported();\n        }\n    }\n    static printEnvironmentNotSupported() {\n        let logMessage = 'OneSignal: SDK is not compatible with this browser.';\n        if (isIosSafari()) {\n            logMessage +=\n                ' To support iOS please install as a Web App. See the OneSignal guide https://documentation.onesignal.com/docs/safari-web-push-for-ios';\n        }\n        console.log(logMessage);\n    }\n}\nOneSignalShimLoader.VERSION = typeof __VERSION__ === 'undefined' ? 1 : Number(__VERSION__);\n//# sourceMappingURL=OneSignalShimLoader.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is OneSignalSDK.page.js (ES5)\n *   * This is an entry point for pages\n * This is a shim to detect if the browser supports the full OneSignal SDK before loading it.\n *   * Full PageSDK (ES6) - OneSignalSDK.page.es6.js\n *   * Shim PageSDK (ES5) - OneSignalSDK.page.js (This File)\n */\n// NOTE: Careful if adding imports, ES5 targets can't clean up functions never called.\nimport { OneSignalShimLoader } from '../page/utils/OneSignalShimLoader';\nOneSignalShimLoader.start();\n//# sourceMappingURL=sdk.js.map"],"names":["supportsSafariLegacyPush","window","safari","pushNotification","supportsVapidPush","PushSubscriptionOptions","prototype","hasOwnProperty","navigator","vendor","maxTouchPoints","addScriptToPage","url","scriptElement","document","createElement","src","defer","head","appendChild","getPathAndPrefix","loadFullPageSDK","OneSignalShimLoader","VERSION","start","isPushNotificationsSupported","this","printEnvironmentNotSupported","logMessage","isIosSafari","console","log","Number","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}