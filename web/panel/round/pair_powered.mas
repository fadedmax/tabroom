<%args>
	$person
	$round_id 		=> undef
	$round			=> undef
	$debug          => undef
	$lag_pair_round => undef
</%args>
<%init>

	use List::Util 'shuffle';

	$round = Tab::Round->retrieve($round_id) if $round_id && not defined $round;
	$m->abort unless $round;

	my $event = $round->event;
	my $tourn = $event->tourn;

	my %event_settings = $event->all_settings();

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(time_zone => $tz);

	my $pullup_method = $event_settings{"pullup_method"};
	my $pullup_repeat = $event_settings{"pullup_repeat"};
	my $school_debates_self = $event_settings{"school_debates_self"};
	my $powermatch_method = $event_settings{"powermatch"};

	my $school_penalty = 1000000000000000000
		unless $event_settings{"school_debates_self"};

	my $hit_before_penalty = 1000000000000;
	my $wrong_side_penalty = 100000000000;
	my $pullup_penalty = 10000;

	if ($event_settings{"pullup_minimize"}) {
		$pullup_penalty     = 100000000000000;
		$wrong_side_penalty = 100000000;
	}

	my $hit_pullup_again_penalty = 1000000000
		if $event_settings{"prevent_hitting_pullup_twice"};

	# Erase any current round already in place
	$m->comp("/funclib/round_dump.mas",
		person => $person,
		round => $round
	);

	# Find the round whose seeding to base this round powermatching on.
	my $previous_round = Tab::Round->retrieve($lag_pair_round) if $lag_pair_round;

	my %entry_round_record = ();
	my $round_count;
	my $highest_round;

	foreach my $other_round (sort {$b->name <=> $a->name} $event->rounds) {
		next if $other_round->name >= $round->name;
		$round_count++;
		$highest_round = $other_round unless $highest_round;
	}

	my $before;

	foreach my $other_round (sort {$a->name <=> $b->name} $event->rounds) {

		next if $other_round->name >= $round->name;

		if ($before && $other_round->type ne "prelim") {

			#Generate the hash for the next round;

			my %record = $m->comp("/funclib/entry_wins.mas",
				round    => $before,
				event    => $event,
				first_tb => $event_settings{"bracket_by_ballots"}
			);

			$entry_round_record{$other_round->id} = \%record;
		}

		$before = $other_round;
	}

	$previous_round = $highest_round unless $previous_round;

	unless ($highest_round) {
		$m->print("<P>I cannot determine what round to powermatch based on.  I suspect you have round 1 set to be a powermatched (high-high or high-low) round, which is alas, impossible.  Set it to 'prelim/preset' and try again");
		$m->abort;
	}

	# This enables side constrained rounds in even numbered debates unless
	# otherwise disabled (IE for Public Forum or a similar event);

	#Odd number of previous rounds means we're side constrained.

	my $side_constraints++ if $round_count % 2;

	undef $side_constraints
		if $event_settings{"no_side_constraints"};

	# Entries in seed order based on the previous round
	my (
		$entries_ref, $tbs_ref, $desc_ref,
		$forfeit_ref, $tier_dir, $panrank_ref,
		$panletter_ref, $long_desc_ref
	) = $m->comp("/tabbing/results/order_entries.mas",
			round => $previous_round
		);


	my %entry_record = $m->comp(
		"/funclib/entry_wins.mas",
			round    => $previous_round,
			event    => $event,
			first_tb => $event_settings{"bracket_by_ballots"}
		);

	my %entry_byes = $m->comp(
		"/funclib/entry_byes.mas",
			event    => $event,
			round    => $previous_round,
			first_tb => $event_settings{"bracket_by_ballots"}
		);

	my @entries = $event->entries( active => 1);

	my $dbh = Tab::DBI->db_Main();
	my @byes;

	if ($event_settings{"autobye_nojudge"}) {

		my %entry_info;

		my $bye_sth = $dbh->prepare('
			select entry.id, round.id
			from entry, round, panel, ballot
			where entry.id = ballot.entry
				and ballot.panel = panel.id
				and panel.round = round.id
				and (ballot.bye = 1 or panel.bye = 1)
				and entry.event = ?
		');

		$bye_sth->execute($event->id);

		while (
			my (
				$entry_id, $round_id
			) = $bye_sth->fetchrow_array()
		) {
			$entry_info{$entry_id}{"bye_count"}++;
		}

		my $available_judges = $m->comp("/funclib/round_available_judges.mas", round => $round);

		my $num_flights = $round->flighted;
		$num_flights = 1 unless $num_flights;

		my $num_judges = $round->setting('num_judges');
		$num_judges = 1 unless $num_judges;

		$available_judges = $available_judges * $num_flights;
		my $num_debates = POSIX::floor( (scalar @entries) / (2 * $num_judges));

		# Sort entries so those with fewer byes go to the front
		@entries = shuffle(@entries);

		@entries = sort {
			$entry_info{$a}{"bye_count"} <=> $entry_info{$b}{"bye_count"}
		} @entries;

		while ($num_debates > $available_judges) {
			my $excluded = shift @entries;
			push @byes, $excluded;
			$num_debates = POSIX::floor( (scalar @entries) / 2);
		}
	}

	my %entry_by_id = map {$_->id => $_} @entries;
	my %entry_code = map {$_->id => $_->code} @entries;

	my %entry_school = map {$_->id => $_->school->id} @entries;

	if ($event_settings{"region_constrain"}) { 
		%entry_school = map {$_->id => $_->school->region} @entries;
	}

    #pull hybrid school conflicts
	my @hybrid_strikes = Tab::Strike->search(
		tourn => $event->tourn->id,
		type  => 'hybrid'
	);

	my %hybrid_conflict = map {$_->school."-".$_->entry => 1} @hybrid_strikes; 

	# Rework the entries array to just be an array of IDs.  This will increase
	# speed a lot.

	@entries = keys %entry_by_id;

	# Sort out the seed order of each entry and also the remaining tiebreakers
	# to sort out where in the bracket pullups should live.

	my %entry_seed = ();

	foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
		foreach my $entry (@{${$entries_ref}{$key}}) {
			$entry_seed{$entry} = $key;
		}
	}

	my %entry_opponents = ();

	my $opponents_sth = $dbh->prepare("
		select entry.id, opponent.id, ballot.side, round.id, round.type, round.name
			from entry, entry opponent, ballot, ballot oppballot, panel, round
			where round.event = ?
			and round.name <= ?
			and round.id = panel.round
			and panel.id = ballot.panel
			and panel.id = oppballot.panel
			and oppballot.entry != ballot.entry
			and oppballot.entry = opponent.id
			and ballot.entry = entry.id
			and ballot.bye != 1
			and oppballot.bye != 1
			and panel.bye != 1
			order by round.name");

	$opponents_sth->execute($event->id, $highest_round->name);

	my %side_due = ();
	my %met_before = ();

	my %opp_wins = ();
	my %pullup_count = ();
	my %hit_pullup_count = ();

	while (
		my ( $entry, $opp, $side, $round_id, $round_type, $round_name)
		= $opponents_sth->fetchrow_array()
	) {

		push @{$entry_opponents{$entry}}, $opp;
		$met_before{$entry}{$opp}++;

		$opp_wins{$entry}{"record"} += $entry_record{$opp};
		$opp_wins{$entry}{"count"}++;

		unless ($round_type eq "prelim") {
			if ($entry_round_record{$round_id}{$entry} < $entry_round_record{$round_id}{$opp}) {
				$pullup_count{$entry}++;
			}
			if ($entry_round_record{$round_id}{$entry} > $entry_round_record{$round_id}{$opp}) {
				$hit_pullup_count{$entry}++;
			}
		}

		next unless $side_constraints && $round_id == $highest_round->id;

		$side_due{$entry} = 2 if $side == 1;
		$side_due{$entry} = 1 if $side == 2;
	}

	# For SOP you must also enter in the entry's opponent seeds into their
	# bracket position.  For seed order it stays the same.

	my %opp_seed = ();
	my %entry_sop = ();
	my %bracket_entries = ();

	foreach my $entry (@entries) {

		my $counter;
		my $total;

		push @{$bracket_entries{$entry_record{$entry}}}, $entry;

		$entry_sop{$entry} = $entry_seed{$entry};

		foreach my $opp (@{$entry_opponents{$entry}}) {
			$total += $entry_seed{$opp};
			$counter++;
		}

		$opp_seed{$entry} = ($total / $counter) if $counter;
		$entry_sop{$entry} += ($opp_seed{$entry});
	}

	# Sort the debaters in the bracket without winloss as a factor to determine
	# pullup positions

	foreach my $key (sort {$b <=> $a} keys %{$desc_ref}) {

		next if ${$desc_ref}{$key} eq "W"
			&& (not defined $event_settings{"pullup_minimize"});

		@entries =
				sort { int(100 * ${$tbs_ref}{$a}{$key}) <=> int(100 * ${$tbs_ref}{$b}{$key})  }
			@entries
			if ${$tier_dir}{$key} eq "up";

		@entries =
				sort { int(100 * ${$tbs_ref}{$b}{$key})
				<=> int(100 * ${$tbs_ref}{$a}{$key})  }
			@entries
			if ${$tier_dir}{$key} eq "down";
	}

	my %entry_hilo = map { $entries[$_] => $_ } 0 .. $#entries;

	my %entry_position = %entry_hilo if $powermatch_method eq "seed";
	%entry_position = %entry_sop if $powermatch_method ne "seed";

	my %pullup_score = ();
	my %pullup_entities = ();
	my $num_entries = scalar @entries;

	# Score each debater based on how likely they can be pulled up.   Big
	# penalty for being pulled up, smaller penalty in order for being out of
	# position.

	foreach my $entry (@entries) {

		$pullup_score{$entry} = 1;

		if ($pullup_method eq "oppwin" || $pullup_method eq "middle" ) {

			$pullup_score{$entry} += $opp_wins{$entry};

		} elsif ($pullup_method eq "lowseed") {

			# This is the method used by APDA infidels.  Higher scores to the
			# people who shouldn't be pulled up.

			$pullup_score{$entry} += ($num_entries * 2) - $entry_seed{$entry};
			$pullup_entities{$entry}{"num_entries"} = $num_entries;
			$pullup_entities{$entry}{"seed"} = $entry_seed{$entry};

		} else {

			# Default is to use SOP.  Higher scores to the people who shouldn't
			# be pulled up as often.

			$pullup_score{$entry} += ($num_entries * 2) - $opp_seed{$entry};
			$pullup_entities{$entry}{"num_entries"} = $num_entries;
			$pullup_entities{$entry}{"sop"} = $entry_sop{$entry};
		}

		# Prevent someone from getting pulled up twice unless there's no other
		# choice in this bracket (doubled).

		if ($pullup_count{$entry} && not defined $pullup_repeat) {
			$pullup_score{$entry} += $pullup_score{$entry};
		}
	}

	@entries = sort {$entry_seed{$a}  <=> $entry_seed{$b}} @entries;

	my $worst_entry = pop @entries;
	my $worst_position = $entry_position{$worst_entry};

	push @entries, $worst_entry;

	# If there's an uneven number of debaters we assign a bye.

	if ($num_entries % 2) {

		my $aff_count;
		my $neg_count;

		foreach my $entry (@entries) {

			$met_before{$entry}{"BYE"} += $entry_byes{$entry};

			# Have to do it twice or else it'll be a lower penalty than
			# debating the same person twice.
			$met_before{"BYE"}{$entry} += $entry_byes{$entry};

			$aff_count++ if $side_due{$entry} == 1;
			$neg_count++ if $side_due{$entry} == 2;
		}

		# Adds a bye into the mix to pair a debater with.
		unshift @entries, "BYE";

		# Put the bye into the worst bracket
		unshift @{$bracket_entries{0}}, "BYE";

		# Byes have no wins of course since their opponents shouldn't either.
		$entry_record{"BYE"} = 0;
		$entry_code{"BYE"} = "BYE";

		# Bye is placed at the top of the bracket so it gets the lowest possible seed.
		$entry_position{"BYE"} = 1;

		#Don't pull the bye up unless all else fails. Very high pullup score.
		$pullup_score{"BYE"} = $num_entries * 1000000000000000000;

		# Make sure the bye goes to the short side if it's side constrained
		$side_due{"BYE"} = 1 if $aff_count && $neg_count && $aff_count < $neg_count;
		$side_due{"BYE"} = 2 if $aff_count && $neg_count && $aff_count > $neg_count;

	}

	my %opponent_score = ();
	my %score_elements = ();

	foreach my $entry (@entries) {

		foreach my $opponent (@entries) {

			next if $opponent == $entry;

			my $log++ if $entry_record{$opponent} == 5;

			# Same school debates are the worst outcome
			$opponent_score{$entry}{$opponent} += $school_penalty
				if $entry_school{$opponent} == $entry_school{$entry};

			unless ($event_settings{"hybrids_can_hit"}) {
				$opponent_score{$entry}{$opponent} += $school_penalty
				if $hybrid_conflict{$entry_school{$opponent}."-".$entry};
			}

			$score_elements{$entry}{$opponent}{"school"} = $school_penalty
				if $entry_school{$opponent} == $entry_school{$entry};

			$score_elements{$entry}{$opponent}{"school"} = $school_penalty
				if $entry_school{$opponent} == $entry_school{$entry};

			# If the debaters have debated before penalize them but not as much as same schools.
			$opponent_score{$entry}{$opponent}
				+= $hit_before_penalty * $met_before{$entry}{$opponent};

			$score_elements{$entry}{$opponent}{"previous_hit"}
				= $hit_before_penalty * $met_before{$entry}{$opponent};

			# Wrong side debates are undesirable as long as they're clean.
			$opponent_score{$entry}{$opponent} += $wrong_side_penalty
				if $side_due{$entry}
				&& $side_due{$entry} == $side_due{$opponent};

			$score_elements{$entry}{$opponent}{"wrong_side"} = $wrong_side_penalty
				if $side_due{$entry}
				&& $side_due{$entry} == $side_due{$opponent};

		}

	}

	# Now figure out how far off position every debater is against entry.

	foreach my $tier (sort {$b <=> $a} keys %bracket_entries) {

		my @bracket_entries = @{$bracket_entries{$tier}};

		# Top of bracket gets the worst opponents...
		@bracket_entries =
			sort {$entry_position{$a} <=> $entry_position{$b}}
			@bracket_entries;

		# Unless it's a high high round.
		@bracket_entries =
			sort {$entry_position{$b} <=> $entry_position{$a}}
			@bracket_entries
			if $round->type eq "highhigh";

		my $num_bracket = scalar @bracket_entries;

		my $rank;

		foreach my $be (@bracket_entries) {

			$rank++;

			foreach my $opponent (@entries) {

				next if $opponent == $be;

				# Bracket pullups get a penalty proportional to how many times
				# they'd be pulled up and their pullup score (based on whether
				# they've been pulled up before and their oppwin or seed
				# position.

				# Ordinarily you are only penalized for getting pulled up, not
				# for debating the pullup.

				if ($entry_record{$opponent} > $entry_record{$be}) {

					# The extra ten thousand in this one prevents double
					# pullups unless it must be so.

					$opponent_score{$be}{$opponent}
						+= (abs($entry_record{$opponent} - $tier) ** 8)
						* $pullup_penalty;

					$opponent_score{$be}{$opponent} += $pullup_penalty * $pullup_score{$be};

					$score_elements{$be}{$opponent}{"pullup"}
						= abs($entry_record{$opponent} - $tier)
						* $pullup_penalty
						* $pullup_score{$be};

					$score_elements{$be}{$opponent}{"pullup_record_diff"}
						= abs($entry_record{$opponent} - $tier)." in tier $tier";

					$score_elements{$be}{$opponent}{"pullup_base_score"}
						= $pullup_score{$be};

				}

				# Unless you're APDA and therefore insane

				if ($entry_record{$opponent} < $entry_record{$be}) {

					$opponent_score{$be}{$opponent}
						+= (abs($tier - $entry_record{$opponent}) ** 8)
						* $hit_pullup_again_penalty
						* $hit_pullup_count{$be};
				}

				# And they get a score based on where in the bracket they are.
				# This is multiplied by the rank within the bracket of the
				# entry so that the top entry will get the most desirable
				# opponent (lowest seed) possible within the bounds of the
				# other constraints.   Squared to make differences between
				# ranks in low brackets more pronounced.

				$opponent_score{$be}{$opponent}
					+= ($worst_position - $entry_position{$opponent})
					* ( ($num_entries - $rank) ** 3)
					* .01;

				$score_elements{$be}{$opponent}{"position"}
					= ($worst_position - $entry_position{$opponent})
					* (($num_entries - $rank) ** 3)
					* .01;

				$score_elements{$be}{$opponent}{"worst_position"} = $worst_position;
				$score_elements{$be}{$opponent}{"entry_position"} = $entry_position{$opponent};
				$score_elements{$be}{$opponent}{"rank"} = $rank;

			}
		}
	}

	my %debates;
	my @opponents = @entries;

	@entries = sort {$entry_position{$a}  <=> $entry_position{$b}} @entries;
	@entries = sort {$entry_record{$b}  <=> $entry_record{$a}} @entries;

	foreach my $entry (@entries) {

		next if $debates{$entry};

		@opponents = sort {
			($opponent_score{$a}{$entry} + $opponent_score{$entry}{$a})
			<=>
			($opponent_score{$b}{$entry} + $opponent_score{$entry}{$b})
		}
		@opponents;

		my $opponent;

		foreach my $candidate (@opponents) {
			next if $candidate == $entry;
			next if $debates{$candidate};
			$opponent = $candidate;
			last if $opponent;
		}

		$debates{$entry} = $opponent;
		$debates{$opponent} = $entry;

	}

	my %log_me = (
		592621 => 1,
		594635 => 1,
		595467 => 1
	);

	foreach my $entry (keys %log_me) {

		foreach my $other (keys %log_me) {

			next if $entry == $other;

			my $entry_score = $opponent_score{$entry}{$other};
			my $other_score = $opponent_score{$other}{$entry};

			my $entry_school = $score_elements{$entry}{$other}{"school"};
			my $entryh = $score_elements{$entry}{$other}{"previous_hit"};
			my $entry_ws = $score_elements{$entry}{$other}{"wrong_side"};
			my $entry_tierrank = $score_elements{$entry}{$other}{"rank"};
			my $entry_pullup = $score_elements{$entry}{$other}{"pullup"};
			my $entry_posi = $score_elements{$entry}{$other}{"position"};

			my $other_school = $score_elements{$other}{$entry}{"school"};
			my $otherh = $score_elements{$other}{$entry}{"previous_hit"};
			my $other_ws = $score_elements{$other}{$entry}{"wrong_side"};
			my $other_tierrank = $score_elements{$other}{$entry}{"rank"};
			my $other_pullup = $score_elements{$other}{$entry}{"pullup"};
			my $other_posi = $score_elements{$other}{$entry}{"position"};

		}

	}

	foreach my $pass (1 .. 100) {

		my $swapped;

		foreach my $entry (sort {$entry_position{$b} <=> $entry_position{$a}} keys %debates) {

			my $opponent = $debates{$entry};

			my $new_opponent;
			my $swap_entry;
			my $score_differential = 0;

			foreach my $other_entry (sort {$entry_seed{$a} <=> $entry_seed{$b}} keys %debates) {

				next if $other_entry == $entry;		# don't swap me with myself.
				next if $other_entry == $opponent;   # don't swap me with my opponent;

				my $other_opponent = $debates{$other_entry};

				next if $other_opponent == $entry;   # don't swap me with my existing opponent either
				next if $other_opponent == $opponent;   # don't swap me with my existing opponent either

				# Score the original debates
				my $old_score = $opponent_score{$entry}{$opponent}
					+ $opponent_score{$opponent}{$entry}
					+ $opponent_score{$other_entry}{$other_opponent}
					+ $opponent_score{$other_opponent}{$other_entry};

				# Score the new debates
				my $new_score = $opponent_score{$entry}{$other_opponent}
					+ $opponent_score{$other_opponent}{$entry}
					+ $opponent_score{$other_entry}{$opponent}
					+ $opponent_score{$opponent}{$other_entry};

				# If the new debates are better overall, propose the swap
				if ($old_score - $new_score > $score_differential) {

					$new_opponent = $other_opponent;
					$swap_entry = $other_entry;
					$score_differential = $old_score - $new_score;
				}

			}

			if ($new_opponent) {

				if ($log_me{$entry} && $log_me{$opponent}) {

					my $old_score1 = $opponent_score{$entry}{$opponent}
						+ $opponent_score{$opponent}{$entry};

					my $old_score2 = $opponent_score{$swap_entry}{$new_opponent}
						+ $opponent_score{$new_opponent}{$swap_entry};

					my $new_score1 = $opponent_score{$entry}{$new_opponent}
						+ $opponent_score{$new_opponent}{$entry};

					my $new_score2 = $opponent_score{$swap_entry}{$opponent}
						+ $opponent_score{$opponent}{$swap_entry};

					my $os1_school = $score_elements{$entry}{$opponent}{"school"}
						+ $score_elements{$opponent}{$entry}{"school"};

					my $os1p = $score_elements{$entry}{$opponent}{"previous_hit"}
						+ $score_elements{$opponent}{$entry}{"previous_hit"};

					my $os1_ws = $score_elements{$entry}{$opponent}{"wrong_side"}
						+ $score_elements{$opponent}{$entry}{"wrong_side"};

					my $os1_tierrank = $score_elements{$entry}{$opponent}{"rank"}
						+ $score_elements{$opponent}{$entry}{"rank"};

					my $os1_pullup = $score_elements{$entry}{$opponent}{"pullup"}
						+ $score_elements{$opponent}{$entry}{"pullup"};

					my $os1_posi = $score_elements{$entry}{$opponent}{"position"}
						+ $score_elements{$opponent}{$entry}{"position"};

					my $os2_school = $score_elements{$swap_entry}{$new_opponent}{"school"}
						+ $score_elements{$new_opponent}{$swap_entry}{"school"};

					my $os2p = $score_elements{$swap_entry}{$new_opponent}{"previous_hit"}
						+ $score_elements{$new_opponent}{$swap_entry}{"previous_hit"};

					my $os2_ws = $score_elements{$swap_entry}{$new_opponent}{"wrong_side"}
						+ $score_elements{$new_opponent}{$swap_entry}{"wrong_side"};

					my $os2_tierrank = $score_elements{$swap_entry}{$new_opponent}{"rank"}
						+ $score_elements{$new_opponent}{$swap_entry}{"rank"};

					my $os2_pullup = $score_elements{$swap_entry}{$new_opponent}{"pullup"}
						+ $score_elements{$new_opponent}{$swap_entry}{"pullup"};

					my $os2_posi = $score_elements{$swap_entry}{$new_opponent}{"position"}
						+ $score_elements{$new_opponent}{$swap_entry}{"position"};


					my $ns1_school = $score_elements{$entry}{$new_opponent}{"school"}
						+ $score_elements{$new_opponent}{$entry}{"school"};

					my $ns1p = $score_elements{$entry}{$new_opponent}{"previous_hit"}
						+ $score_elements{$new_opponent}{$entry}{"previous_hit"};

					my $ns1_ws = $score_elements{$entry}{$new_opponent}{"wrong_side"}
						+ $score_elements{$new_opponent}{$entry}{"wrong_side"};

					my $ns1_tierrank = $score_elements{$entry}{$new_opponent}{"rank"}
						+ $score_elements{$new_opponent}{$entry}{"rank"};

					my $ns1_pullup = $score_elements{$entry}{$new_opponent}{"pullup"}
						+ $score_elements{$new_opponent}{$entry}{"pullup"};

					my $ns1_posi = $score_elements{$entry}{$new_opponent}{"position"}
						+ $score_elements{$new_opponent}{$entry}{"position"};


					my $ns2_school = $score_elements{$swap_entry}{$opponent}{"school"}
						+ $score_elements{$opponent}{$swap_entry}{"school"};

					my $ns2p = $score_elements{$swap_entry}{$opponent}{"previous_hit"}
						+ $score_elements{$opponent}{$swap_entry}{"previous_hit"};

					my $ns2_ws = $score_elements{$swap_entry}{$opponent}{"wrong_side"}
						+ $score_elements{$opponent}{$swap_entry}{"wrong_side"};

					my $ns2_tierrank = $score_elements{$swap_entry}{$opponent}{"rank"}
						+ $score_elements{$opponent}{$swap_entry}{"rank"};

					my $ns2_pullup = $score_elements{$swap_entry}{$opponent}{"pullup"}
						+ $score_elements{$opponent}{$swap_entry}{"pullup"};

					my $ns2_posi = $score_elements{$swap_entry}{$opponent}{"position"}
						+ $score_elements{$opponent}{$swap_entry}{"position"};

				}

				$debates{$entry} = $new_opponent;
				$debates{$new_opponent} = $entry;

				$debates{$swap_entry} = $opponent;
				$debates{$opponent} = $swap_entry;

				$swapped++;

			}
		}
		last unless $swapped;
	}

	# If this is not a sidelocked debate we snake the sides so the good teams
	# don't all end up aff and thus wreak havoc on the next round's bracket.

	my $sides;

	my $letter = 1;
	$letter = "A" if $event_settings{"panel_labels"} eq "letters";

	my %done;

	foreach my $entry (sort {$entry_seed{$a} <=> $entry_seed{$b}} keys %debates) {

		next if $done{$entry}++;
		my $opponent = $debates{$entry};
		next if $done{$opponent}++;

		my $bye = 0;
		$bye++ if $opponent eq "BYE";
		$bye++ if $entry eq "BYE";
		next if $bye > 1;

		unless ($side_due{$entry}) {
			$side_due{$entry} = ($side_due{$opponent} % 2) + 1;
			$side_due{$entry} = ($sides++ % 2) + 1 unless $side_due{$entry};
		}

		unless ($side_due{$opponent}) {
			$side_due{$opponent} = ($side_due{$entry} % 2) + 1;
		}

		my $bracket = $entry_record{$entry};
		$bracket = $entry_record{$opponent} if $entry_record{$opponent} > $bracket;

		my $score = $opponent_score{$entry}{$opponent} + $opponent_score{$opponent}{$entry};

		my $panel = Tab::Panel->create({
			round   => $round->id,
			bye     => $bye,
			letter  => $letter,
			flight  => 1,
			bracket => $bracket
		});

		if ($entry ne "BYE") {

			my $pullup = 0;
			$pullup++ if $entry_record{$entry} < $entry_record{$opponent};

			Tab::Ballot->create({
				panel  => $panel->id,
				bye    => $bye,
				audit  => $bye,
				entry  => $entry,
				side   => $side_due{$entry}
			});

		}

		if ($opponent ne "BYE") {

			my $pullup = 0;
			$pullup++ if $entry_record{$opponent} < $entry_record{$entry};

			if ($side_due{$entry} == $side_due{$opponent}) {
				if ($side_due{$opponent} == 2) {
					$side_due{$opponent} = 1;
				} else {
					$side_due{$opponent} = 2;
				}
			}

			Tab::Ballot->create({
				panel  => $panel->id,
				bye    => $bye,
				audit  => $bye,
				entry  => $opponent,
				side   => $side_due{$opponent}
			});
		}
	}

	return;

</%init>

