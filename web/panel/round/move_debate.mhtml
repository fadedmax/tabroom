<%args>
	$person
	$tourn
	$entry_id => undef
	$side     => undef
	$panel_id => undef
	$round_id => undef
</%args>
<%init>

	$m->clear_buffer;
	$r->content_type('application/json');

	unless ($entry_id) {
		$m->print('{
			"error"   : \1,
			"message" : "No valid entry ID sent"
		}');
		$m->abort();
	}

	unless ($panel_id) {
		$m->print('{
			"error"   : \1,
			"message" : "No valid section ID sent"
		}');
		$m->abort();
	}

	unless ($panel_id eq "notAssigned" || $side) {
		$m->print('{
			"error"   : \1,
			"message" : "No valid side sent"
		}');
		$m->abort();
	}

	my $dbh = Tab::DBI->db_Main();
	my $origin_entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my $round = Tab::Round->retrieve($round_id);

	my $remove_sth = $dbh->prepare("
		delete ballot.*
			from ballot, panel
		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = ?
	");

	if ($panel_id eq "notAssigned") {

		$remove_sth->execute($round->id, $origin_entry->id);
		$remove_sth->finish();

		my $description = $origin_entry->code." was removed from ".$round->realname;

		my %response = (
			error   => \0,
			message => $description
		);

		$m->print(JSON::encode_json(\%response));
		$m->flush_buffer();
		$m->abort();
	}

	my $target_panel = Tab::Panel->retrieve($panel_id) if $panel_id;

	Tab::Panel->set_sql( origin => "
		select panel.*
			from panel, ballot
			where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = ?
	");

	unless ($target_panel && $origin_entry) {

		my %response = (
			error   => \1,
			message => "No debate for '.$panel_id.' or entry for '.$entry_id.' found.  Please refresh this page and start again"
		);

		$m->print(JSON::encode_json(\%response));
		$m->flush_buffer();
		$m->abort();
	}

	Tab::Entry->set_sql( target => "
		select entry.*
			from entry, ballot
		where ballot.panel = ?
			and ballot.side = ?
			and ballot.entry = entry.id
	");

	my $origin_panel = Tab::Panel->search_origin($target_panel->round->id, $origin_entry->id)->first;
	my $target_entry = Tab::Entry->search_target($target_panel->id, $side)->first;

	if ($origin_entry == $target_entry) {
		$m->print('{
			"error"   : \1,
			"message" : "No move made: origin and destination are the same, so that would be weird."
		}');
		$m->abort();
	}

	if ($origin_panel == $target_panel) {

		my $tb = $origin_panel->ballots( entry => $origin_entry )->first;
		my $target_side = $tb->side;

		my $description = $origin_entry->code." swapped sides";

		if ($target_entry) {
			$description .= " with ".$target_entry->code;
		}

		$m->comp("/funclib/swap_sides.mas", panel => $origin_panel);

		$m->print('{
			"error"        : \0,
			"message"      : "'.$description.'",
			"origin_panel" : "'.$origin_panel.'",
			"origin_side"  : "'.$target_side.'",
			"target_entry" : "'.$target_entry.'"
		}');

		$m->abort();
	}

	my $origin_side;
	my $description;

	if ($origin_panel && $origin_entry) {
		my $origin_ballot = Tab::Ballot->search( entry => $origin_entry, panel => $origin_panel)->first;
		$origin_side = $origin_ballot->side;
		$remove_sth->execute($round->id, $origin_entry->id);
	}

	if ($target_panel && $target_entry) {
		$remove_sth->execute($round->id, $target_entry->id);
	}

	my $noflop;

	if ($target_panel && $origin_entry > 0) {

		my @judges = $m->comp("/funclib/panel_judges.mas", panel => $target_panel);

		if (@judges) {

			foreach my $judge (@judges) {
				eval {
					Tab::Ballot->create({
						panel => $target_panel,
						side  => $side,
						judge => $judge->id,
						entry => $origin_entry->id
					});
				};
			}
		} else {

			my $ballot = eval {
				return Tab::Ballot->create({
					panel => $target_panel->id,
					side  => $side,
					entry => $origin_entry->id
				});
			};
		}

		$description .= "Moved ".$origin_entry->code." into debate ".$target_panel->id;
	}

	if ($origin_panel && $target_entry) {

		my @judges = $m->comp("/funclib/panel_judges.mas", panel => $origin_panel);

		if (@judges) {

			foreach my $judge (@judges) {
				eval {
					Tab::Ballot->create({
						panel => $origin_panel,
						side  => $origin_side,
						judge => $judge->id,
						entry => $target_entry
					});
				};
			}
		} else {

			my $ballot = eval {
				return Tab::Ballot->create({
					panel => $origin_panel->id,
					side  => $origin_side,
					entry => $target_entry
				});
			};
		}

		$description .= "\n" if $description;
		$description .= "Moved ".$target_entry->code." into debate ".$origin_panel->letter;
	}

	$m->comp("/funclib/log.mas",
		type        => 'move',
		event       => $round->event->id,
		entry       => $origin_entry->id,
		person      => $person->id,
		tourn       => $tourn->id,
		description => $description
	);

	my %json = (
		error        => \0,
		message      => $description
	);

	if ($origin_panel) {
		$json{"origin_panel"} = $origin_panel->id;
	} else {
		$json{"origin_panel"} = 'notAssigned';
	}

	if ($target_entry) {
		$json{"target_entry"} = $target_entry->id;
	}
	if ($origin_side) {
		$json{"origin_side"} = $origin_side;
	}

	$m->print(JSON::encode_json(\%json));

	$m->abort();

</%init>
