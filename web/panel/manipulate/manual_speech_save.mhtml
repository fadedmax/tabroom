<%args>
	$tourn
	$round_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	$m->abort unless $round;

	my $event = $round->event;
	my @entries = $event->entries(active => 1);

	my $congress++ if $event->type eq "congress";

	my %judges_by_panel = ();

	my @panels = $round->panels;
    @panels =
		map  { $_->[0] }
		sort { $a->[1] <=> $b->[1] }
		map  { [$_, $_->letter=~/(\d+)/] }
		@panels;

    @panels =
		map  { $_->[0] }
		sort { $a->[1] cmp $b->[1] }
		map  { [$_, $_->letter=~/(\D+)/] }
		@panels;

    my %panel_numbers;
    my $counter = 1;

    foreach my $panel (@panels) {
        $panel_numbers{$counter} = $panel;
		$counter++;
    }

	foreach my $panel (@panels) {
		push @{$judges_by_panel{$panel->id}},
			$m->comp("/funclib/panel_judges.mas", panel => $panel);
	}

	my %other_panels;
	my %other_panels_judges;

	my $dbh = Tab::DBI->db_Main();

	my $delete_sth = $dbh->prepare("
		delete ballot.* from ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.entry = ?
	");


	if ($congress) {

		foreach my $other_round ($event->rounds) {

			next if $round_id == $other_round->id;
			next if $other_round->type eq "elim"
				|| $other_round->type eq "final"
				|| $other_round->type eq "runoff";

			foreach my $other_panel ($round->panels) {

				push @{$other_panels{$other_panel->letter}}, $other_panel;

				push @{$judges_by_panel{$other_panel->id}},
					$m->comp("/funclib/panel_judges.mas", panel => $other_panel);
			}
		}
	}

	ENTRY:
	foreach my $entry (@entries) {

		next unless $ARGS{$entry->id};
		next unless $panel_numbers{$ARGS{$entry->id}};

		my @panels;

		push @panels, $panel_numbers{$ARGS{$entry->id}};
		push @panels, @{$other_panels{$panel_numbers{$ARGS{$entry->id}}->letter}}
			if $other_panels{$panel_numbers{$ARGS{$entry->id}} };

		foreach my $panel (@panels) {

			my $panel_id = $panel->id;
			my %taken;
			my $order = 1;
			my @panel_ballots = $panel->ballots();

			BALLOT:
			foreach my $ballot (@panel_ballots) {

				unless ($ballot->entry > 0) {
					next;
				}

				if ($ballot->entry->id == $entry->id) {
					next ENTRY; #I am already here
				} else {
					$taken{$ballot->speakerorder}++;
					$order++ if $order == $ballot->speakerorder;
				}

				while ($taken{$order}) {
					$order++;
				}
			}

			$delete_sth->execute($round->id, $entry->id);

			if ($judges_by_panel{$panel_id} && @{$judges_by_panel{$panel_id}}) {

				my %done;

				foreach my $judge (@{$judges_by_panel{$panel_id}}) {

					next if $done{$judge->id}++;

					unless (Tab::Ballot->search(
						panel        => $panel_id,
						judge        => $judge->id,
						entry        => $entry->id,
					)) {
						Tab::Ballot->create({
							panel        => $panel_id,
							judge        => $judge->id,
							entry        => $entry->id,
							speakerorder => $order
						});
					}
				}

			} else {

				unless (Tab::Ballot->search(
					panel        => $panel_id,
					entry        => $entry->id,
				)) {
					Tab::Ballot->create({
						panel        => $panel_id,
						entry        => $entry->id,
						speakerorder => $order
					});
				}
			}
		}
	}

	my $msg = "Manual panels saved";

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&msg=$msg");

</%init>
