<%args>
	$round_id
	$team1
	$seed1 => undef
	$wins1
	$team2
	$seed2 => undef
	$wins2
	$bracket_to_return
</%args>
<%flags>
        inherit => undef
</%flags>
<%init>

	#print "Round:".$round_id."<br>";
	#print "Team1:".$team1."<br>";
	#print "Seed1:".$seed1."<br>";
	#print "wins1:".$wins1."<br>";
	#print "Team2:".$team2."<br>";
	#print "Seed2:".$seed2."<br>";
	#print "wins2:".$wins2."<br>";

	my $bye = 0;
	my $bracket = $wins1;

	my $round = Tab::Round->retrieve($round_id);

	Tab::Panel->set_sql(check_already => "
		select distinct panel.*
		from panel, ballot
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.entry = ?
	");

	my $already1 = Tab::Panel->search_check_already($round_id, $team1)->first;
	my $already2 = Tab::Panel->search_check_already($round_id, $team2)->first;

	if ($already1 || $already2) {

		return;

	} else {

		Tab::Round->set_sql( max_letter => "select max(cast(letter as signed)) from panel where round = ?");
		my $letter = Tab::Round->sql_max_letter->select_val($round_id);
		$letter++;

		if ( $wins2 > $wins1 ) {
			$bracket = $wins2;
		}

		if ($team2 == -1) {
			$bye = 1;
		}

		my $panel = Tab::Panel->create({
			round   => $round_id,
			bye     => $bye,
			letter  => $letter,
			bracket => $bracket,
			flight  => 1
		});

		#necessary for return value
		if ($panel->id) {
			$m->print($panel->id);
		} else {
			$m->print("FAIL");
		}

		Tab::Ballot->create({
			panel  => $panel->id,
			entry  => $team1,
			side   => 1,
			audit  => $bye
		});

		if ($team2 > -1) {

			unless (
				Tab::Ballot->search(
					panel => $panel->id,
					entry => $team2,
				)
			) {

				Tab::Ballot->create({
					panel  => $panel->id,
					entry  => $team2,
					side   => 2,
					audit  => $bye
				});

			}

		}

		my $sidelock = 1 unless int($round->name) % 2;

		unless ($sidelock) {
			undef $sidelock if $round->event->setting("no_side_constraints");
		}

		my $sla = $round->setting("sidelock_against");

		if ($sla eq "NONE" || $sla eq "RANDOM") {
			undef $sidelock;
		} elsif ($sla) {
			$sidelock++;
		}

		unless ($sidelock || $round->event->setting("pullup_minimize")) {
			$round->setting("sides_not_set", 1);
		}

		unless ( $bracket_to_return == -42 ) {
			$m->redirect("manual_powermatch.mhtml?round_id=$round_id&bracket=$bracket_to_return");
		}

	}

	return;

</%init>
