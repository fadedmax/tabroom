<%args>
	$panel_id
	$entry_id
	$position
</%args>
<%init>

	my $panel = Tab::Panel->retrieve($panel_id);
	my $entry = Tab::Entry->retrieve($entry_id);
	my $round = $panel->round;

	my $dbh = Tab::DBI->db_Main();

	my $score_sth = $dbh->prepare("
		delete score.*
			from score, ballot, panel
		where ballot.entry = ?
			and panel.round = ?
			and panel.id = ballot.panel
			and ballot.id = score.ballot
	");

	$score_sth->execute($entry, $round);

	my $ballot_sth = $dbh->prepare("
		delete ballot.*
			from ballot, panel
		where ballot.entry = ?
			and panel.round = ?
			and panel.id = ballot.panel
	");

	$ballot_sth->execute($entry, $round);
	;

	my @other_entry_ballots = Tab::Ballot->search(  panel => $panel_id, speakerorder => $position );

	Tab::Ballot->set_sql( existing => "
		select ballot.*
			from ballot, panel
		where ballot.entry = ?
			and ballot.panel = panel.id
			and panel.round = ?
	");

	my @existing_ballots = Tab::Ballot->search_existing( $entry->id, $panel->round);

	my $other;

	if (@other_entry_ballots) {

		foreach my $ballot (@other_entry_ballots) {

			foreach my $value ($ballot->values) {
				$value->delete;
			}

			$other = $ballot->entry;
			$ballot->entry($entry_id);
			$ballot->audit("0");
			$ballot->update;

		}

	} else {

		my $judgeful;

		foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {

			$judgeful++;

			Tab::Ballot->create({
				panel        => $panel->id,
				entry        => $entry_id,
				judge        => $judge->id,
				audit        => 0,
				speakerorder => $position
			});
		}

		unless ($judgeful) {
			Tab::Ballot->create({
				panel        => $panel->id,
				entry        => $entry_id,
				audit        => 0,
				speakerorder => $position
			});
		}
	}

	#Now put the person displaced back where I came from

	if ($other) {

		if (@existing_ballots) {

			foreach my $ballot (@existing_ballots) {

				$ballot->entry($other->id);
				$ballot->audit(0);
				$ballot->update;

			}

		} else {

			#Give this person a bye.

			my @existing = $round->panels;

			@existing = sort {$b->letter <=> $a->letter} @existing;
			@existing = sort {$b->letter cmp $a->letter} @existing if $round->event->setting("panel_labels") eq "letters";

			my $last = shift @existing;

			my $letter = $last->letter;

			if ($letter eq "Z") {
				$letter = "AA";
			} elsif ($letter eq "AZ") {
				$letter = "BA";
			} elsif ($letter eq "BZ") {
				$letter = "CA";
			} elsif ($letter eq "CZ") {
				$letter = "DA";
			} elsif ($letter eq "DZ") {
				$letter = "EA";
			} elsif ($letter eq "EZ") {
				$letter = "FA";
			} else {
				$letter++;
			}

			my $bye_panel = Tab::Panel->create({
				round  => $round->id,
				letter => $letter,
				flight => 1,
				bye    => 1
			});

			Tab::Ballot->create({
				panel => $bye_panel->id,
				entry => $other->id,
				bye   => 1,
				audit => 0,
			});

		}

	} else {

		# Otherwise, delete the ballots that are now unused, and the panel too
		# if it's just a bye placeholder.

		my $bye_panel;

		foreach my $ballot (@existing_ballots) {
			$bye_panel = $ballot->panel if $ballot->panel->bye;
			$ballot->delete;
		}

		$bye_panel->delete if $bye_panel;

	}

	my $msg = $entry->code." was swapped into position ".$position." of section ".$panel->letter;
	$msg = $entry->code." was swapped for ".$other->code if $other;

	$m->redirect("wudc_round_edit.mhtml?round_id=".$round->id."&entry_id=$entry_id&msg=$msg");

</%init>
