<%args>
	$tourn
	$tourn_settings
	$person
	$round
	$woami   => undef
</%args>
<%init>

	$m->abort unless $round;
	my $event = $round->event;
	$m->abort unless $event->tourn == $tourn->id;

	my $dbh = Tab::DBI->db_Main();

	my @types;
	my $show_strength++ if $round->type eq "elim";

	if ($tourn_settings->{"nsda_nats"}) {
		push @types, "district_code";
		push @types, "district_name";
		push @types, "state";

		if ($round->type eq "prelim") {
			push @types, "autoqual";
		}
	} else {
		push @types, "school_name";
		push @types, "school_code";
		if ($tourn_settings->{"nsda_district"}) {
			push @types, "blocs";
		}
	}

	if ($show_strength) {
		push @types, "strength";
		push @types, "seed";
		push @types, "section_rank";
		push @types, "chamber";
	}

	push @types, "PO" if $round->type ne "prelim";
	push @types, "last_name";

	my %district_region;

	if ($tourn_settings->{'district_regions'}  || $tourn_settings->{'ncfl'} ) {

		my %regions_by_id = map {$_->id => $_} $tourn->regions;

		eval {
			%district_region = %{JSON::decode_json $tourn_settings->{'district_regions'}};
		};

		foreach my $key (%district_region) {
			$district_region{$key} = $regions_by_id{$district_region{$key}};
		}

		push @types, "region";

	} elsif ($tourn_settings->{'regions'} ) {
		push @types, "region";
	}

	my @averages = ("strength", "seed", "section_rank") if $show_strength;

	my %colors = (
		district_code => "red",
		district_name => "blue",
		school_name   => "blue",
		school_code   => "red",
		region        => "bluegreen",
		state         => "green",
		PO            => "blue",
		autoqual     => "purple",
		seed          => "purple",
		chamber       => "black",
		section_rank  => "grey",
		strength      => "orange",
		last_name     => 'black'
	);

	my %sizes = (
		district_code => "third",
		district_name => "full",
		school_code   => "half",
		school_name   => "full",
		school        => "full",
		region        => "third",
		state         => "third",
		PO            => "third",
		autoqual      => "third",
		seed          => "third",
		chamber       => "quarter",
		section_rank  => "third",
		strength      => "third"
	);

	my %label = (
		autoqual     => "AQ",
		POs          => "PO",
		PO           => "PO",
		pos          => "PO",
		po           => "PO",
		section_rank => "1",
		seed         => "1",
		strength     => "1"
	);

	my @all_colors;

	foreach (keys %colors) {
		push @all_colors, $colors{$_};
	}

	my %event_settings = $event->all_settings;
    my $entries_ref;

	if ($show_strength) {

		my $previous_round = Tab::Round->search(
			name => ($round->name - 1),
			event => $event->id
		)->first;

		if ($previous_round) {
			my @results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $previous_round,
			) if $previous_round;

			$entries_ref = pop @results if @results;
		}
	}

	my %entries;

	if ($show_strength) {

		foreach my $seed_entry (keys %{$entries_ref->{'seed'}}) {
			$entries{$seed_entry}{"seed"}
				= $entries_ref->{'seed'}{$seed_entry};
		}

		foreach my $section_rank_entry (keys %{$entries_ref->{'seed'}}) {
			$entries{$section_rank_entry}{"section_rank"}
				= $entries_ref->{'section_rank'}{$section_rank_entry};
		}

		foreach my $section_entry (keys %{$entries_ref->{'section'}}) {
			$entries{$section_entry}{"chamber"}
				= $entries_ref->{'section'}{$section_entry};
		}

		foreach my $strength_entry (keys %{$entries_ref->{'tiebreak'}{"1"}}) {
			$entries{$strength_entry}{"strength"}
				= $entries_ref->{'tiebreak'}{"1"}{$strength_entry};
		}
	}

	my $panel_sth = $dbh->prepare("
		select
			entry.id, entry.code, entry.name,
			school.id schoolid, school.code schoolcode, school.name schoolname,
			region.id regionid, region.code regioncode, region.name regionname,
			district.id districtid, district.code districtcode, district.name districtname,
			chapter.state, ballot.speakerorder,
			panel.id panel, panel.letter letter,
			student.last lastname

		from (entry, ballot, panel)

			left join school on school.id = entry.school
			left join region on region.id = school.region
			left join district on district.id = school.district
			left join chapter on chapter.id = school.chapter
			left join entry_student es on es.entry = entry.id
			left join student on es.student = student.id

		where entry.active = 1
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = ?
	");

	$panel_sth->execute($round->id);
	my $panel_refs = $panel_sth->fetchall_hash();

	my %panels;

	foreach my $entry (@{$panel_refs}) {
		$panels{$entry->{"panel"}}{"entries"}{$entry->{"id"}} = $entry;
		$panels{$entry->{"panel"}}{"letter"} = $entry->{"letter"};

		delete $entries{$entry->{"id"}}{"PO"};

		$entries{$entry->{"id"}}{"code"} = $entry->{"code"};
		$entries{$entry->{"id"}}{"school"} = $entry->{"schoolid"};
		$entries{$entry->{"id"}}{"school_code"} = $entry->{"schoolid"};
		$entries{$entry->{"id"}}{"school_name"} = $entry->{"schoolname"};

		if ($tourn_settings->{'district_regions'} ) {

			if ($district_region{$entry->{"districtid"}}) {

				$entries{$entry->{"id"}}{"region_code"}
					= $district_region{$entry->{"districtid"}}->code;

				$entries{$entry->{"id"}}{"region"}
					= $district_region{$entry->{"districtid"}}->code;

				$entries{$entry->{"id"}}{"region_name"}
					= $district_region{$entry->{"districtid"}}->name;
			}

		} else {
			$entries{$entry->{"id"}}{"region_code"} = $entry->{"regioncode"};
			$entries{$entry->{"id"}}{"region"}      = $entry->{"regioncode"};
			$entries{$entry->{"id"}}{"region_name"} = $entry->{"regionname"};
		}

		$entries{$entry->{"id"}}{"district_code"} = $entry->{"districtcode"};
		$entries{$entry->{"id"}}{"district_name"} = $entry->{"districtname"};
		$entries{$entry->{"id"}}{"last_name"}     = $entry->{"lastname"};

		if ($tourn_settings->{"nsda_nats"}) {
			$entries{$entry->{"id"}}{"state"} = $entry->{"regioncode"};
		} else {
			$entries{$entry->{"id"}}{"state"} = $entry->{"state"};
		}

		$entries{$entry->{"id"}}{"region"}
			= $district_region{$entry->{"districtid"}}->code
			if $district_region{$entry->{"districtid"}};
    }

	if ($round->type eq "elim" || $round->type eq "final") {

		my @this_ties = $m->comp("/funclib/congress_ties.mas", round => $round);
		@this_ties = sort {$a->name <=> $b->name} @this_ties;

		my $earliest;

		if (@this_ties) {
			$earliest = $this_ties[0]->name;
		} else {
			$earliest = $round->name;
		}

		my $last = $earliest - 1;
		my $previous = $event->rounds( name => $last)->first;
		my $round_ids;

		foreach my $tie ($m->comp("/funclib/congress_ties.mas", round => $previous)) {
			$round_ids .= ',' if $round_ids;
			$round_ids .= $tie->id;
		}

		if ($round_ids) {
			my $sth = $dbh->prepare("
				select
					entry.id
					from entry, ballot, score, panel
				where panel.round in ($round_ids)
					and panel.id = ballot.panel
					and ballot.entry = entry.id
					and ballot.id = score.ballot
					and score.tag = 'po'
			");

			$sth->execute();

			while (
				my $eid = $sth->fetchrow_array()
			) {
				$entries{$eid}{"PO"} = 1;
			}
		}
	}

	my @blocs = $m->comp("/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "nsda_house_bloc"
	) if $tourn_settings->{"nsda_district"}
		&& $event->abbr eq "HSE";

	my %blocs_by_entry = map {$_->entry->id => $_->value} @blocs if @blocs;

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (keys %panels) {
%				foreach my $average (@averages) {
					averageContents('<% $panel %>', "<% $average %>");
%				}
%			}

		});

		function averageContents(panelID, targetType) {

			var total = 0, counter = 0, average = 0, already = {};

			console.log("averaging the score for target "+targetType+"s in panel "+panelID);

			$("#"+panelID).find("."+targetType+"s").each(function(index) {

				var targetScore = parseInt($(this).text());
				var entryID = $(this).attr("entry");

				if (!(entryID in already)) {
					total = total + targetScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) {
				average = (total / counter);
			}

			$("#average_"+targetType+"_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) {
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) {
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".statetoggle").removeClass('invert');
			$(".districttoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) {

			$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
			$(".text_"+clashType+"_"+clashKey).toggleClass("hidden");
			$(`.${clashType}_${clashKey}_button`).toggleClass('invert');

			if (clashType === "hits" || clashType == "PO") {
				$("."+clashType).toggleClass(colorToggle);
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").toggleClass("hidden");

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_confirm.mhtml",{
                        entry_id : ui.draggable.attr("id"),
                        panel_id : this.id
                    }).done(function(data) {

						console.log(data);
						console.log(data.message);
						console.log(data.error);

						if (data.error) {
							alertify.error(data.message);
						} else {
							console.log("THINGS ARE SUCCESS!: "+data.message);
							alertify.set('notifier','delay', 2);
							alertify.notify(data.message, "custom");
							alertify.set('notifier','delay', 5);
						}
					});

					// remove the original element from its origin to this
					// location, and make it visible again while destroying the
					// clone.  this is necessary because the default jquery
					// draggable behavior does not play well with scrollable
					// windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");

%					foreach my $average (@averages) {
						averageContents(panelID, "<% $average %>");
%					}

					$("#"+this.id).removeClass("strength_"+panelID);

                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$(".draggable").draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) {

					$("."+this.id).hide();

%					foreach my $type (@types) {
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).removeClass("dk<% $colors{$type} %>");
%					}

				},

				start: function(event, ui) {

%					foreach my $color (@all_colors) {
						$(".entries").removeClass("dk<% $color %>");
%					}

%					foreach my $type (@types) {
						var <% $type %>ID = $("#"+this.id).attr("<% $type %>");
						$(".<% $type %>_"+<% $type %>ID).addClass("dk<% $colors{$type} %>");
%					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"
			});

		});

	</script>

		<div class="full flexrow">

			<span class="twentieth">
				<a
					title = "Print cards with snake information"
					class = "buttonwhite rah edtext padless fa fa-2x fa-file-pdf-o"
					href  = "snake_congress_cards.mhtml?round_id=<% $round->id %>"
				>
				</a>
			</span>

			<span class="quarter">
				<h5><% $round->realname %>
					<% $round->type eq "prelim" ? "Prelims" : "Snake" %> </h5>
			</span>

			<span class="fiveeighths grow rightalign">

				<span class="semibold">
					Show:
				</span>
<%perl>
				foreach my $type (@types) {

					my $label_type = $type;
					$label_type =~ s/\_/ /g;
					$label_type =~ s/section/C/g;
					$label_type =~ s/district/D/g;
					$label_type =~ s/ rank/ Rank/g;
					$label_type =~ s/strength/Rank/g;

					my $label_desc;

					$label_desc = "Rank within prelim chamber" if $type eq "section_rank";
					$label_desc = "Overall prelim seed" if $type eq "seed";
					$label_desc = "Prelim chamber assignment" if $type eq "chamber";
					$label_desc = "Total of ranks from prelims" if $type eq "strength";
					$label_desc = "Was a presiding officer" if $type eq "PO";
</%perl>
					<span
						id      = "<% $type %>s"
						title   = "<% $label_desc %>"
						class   = "buttonwhite <% $colors{$type} %>text padless smallish semibold"
						onClick = "toggleShow(this.id)";
					>
						<% ucfirst($label_type) %>
					</span>
%				}

			</span>
		</div>

		<div class="border flexrow grow wrap top">
<%perl>

		my $count;

		foreach my $panel_id (sort keys %panels) {

			my $panel = $panels{$panel_id};
			my %counter = ();
</%perl>

			<span
				class = "marless marleft top grow fifth"
				id    = "panel_<% $panel_id %>"
			>

				<div class="yellowrow padmore smallish centeralign semibold marno bordersides bordertop">
					Chamber <% $panel->{"letter"} %>
				</div>

				<div
					id    = "<% $panel_id %>"
					panel   = "<% $panel_id %>"
					class = "row nospace bordersides droppable centeralign"
				>

<%perl>
					foreach my $entry_id (sort keys %{$panel->{"entries"}}) {

						$counter{"autoqual"}{""}++ if $entries{$entry_id}{"autoqual"};
						$counter{"PO"}{""}++ if $entries{$entry_id}{"PO"};

						$counter{"region"}{$entries{$entry_id}{"region"}}++
							if $entries{$entry_id}{"region"};

   						if ($tourn_settings->{"nsda_nats"}) {
							$counter{"district"}{$entries{$entry_id}{"district_code"}}++;
							$counter{"state"}{$entries{$entry_id}{"state"}}++;
							$counter{"last_name"}{$entries{$entry_id}{"last_name"}}++;
						} else {
							$counter{"school"}{$entries{$entry_id}{"school_code"}}++;
						}

</%perl>
						<span
							title="<% $entries{$entry_id}{"code"} %> <% $entries{$entry_id}{"name"} ? ":".$entries{$entry_id}{"name"} : "" %>"
							class="
								nowrap biggish martop padtop padbottom marbottom draggable leftalign wider
								school_<% $entries{$entry_id}{"school"} %>
								<% $entries{$entry_id}{"PO"} ? "PO" : "" %>
%								if ($tourn_settings->{"nsda_nats"}) {
									district_<% $entries{$entry_id}{"district_code"} %>
									state_<% $entries{$entry_id}{"state"} %>
%								}
								region_<% $entries{$entry_id}{"region"} %>
							"
							id     = "<% $entry_id %>"
							school = "<% $entries{$entry_id}{"schoolid"} %>"
							entry  = "<% $entry_id %>"

%							if ($tourn_settings->{"nsda_nats"}) {
								district = "<% $entries{$entry_id}{"district"} %>"
								state    = "<% $entries{$entry_id}{"state"} %>"
%							}
						>

							<span class="marno padless full borderbottom codes" >
								<% $entries{$entry_id}{"code"} %>
							</span>

%							foreach my $tag (@types) {

%								my $short_tag = $tag;
%								$short_tag =~ s/\_code//g;
%								$short_tag =~ s/\_name//g;

								<span
									class="leftalign <% $tag %>s <% $colors{$tag} %>text <% $sizes{$tag} %> semibold hidden
									<% $short_tag ne $tag
										? "text_".$short_tag."_".$entries{$entry_id}{$tag}
										: ""
									%>"
									entry   = "<% $entry_id %>"
								>
									<% $entries{$entry_id}{$tag} == 1 && $tag ne "chamber"
										? $label{$tag}
										: $entries{$entry_id}{$tag}
									%>

								</span>
%							}
						</span>
%					}
				</div>

				<div class="row centeralign padmore marno bordersides borderbottom flexrow wrap">

					<p class="leftalign semibold smallish padleft full nospace">Status</p>

%					if ($round->type eq "elim") {

%						foreach my $tag (@averages) {

%							my $tag_label = $tag;
%							$tag_label =~ s/\_/ /g;
%							$tag_label =~ s/\Section/Sct/g;

							<div class = "half padless flexrow  <% $colors{$tag} %>text" >
								<span class="threefifths rightalign smallish padright">
									<% ucfirst($tag_label) %>:
								</span>
								<span
									class = "twofifths leftalign semibold"
									id    = "average_<% $tag %>_<% $panel_id %>"
								>
								</span>
							</div>
<%perl>
						}
					}

					my $blah;

					foreach my $type (sort {$a cmp $b} keys %counter) {

						foreach my $key (sort {$a cmp $b} keys %{$counter{$type}}) {

							next unless $counter{$type}{$key} > 1;
							$blah++;

							my $color = $colors{$type};
							$color = $colors{"district_code"} if $type eq "district";
							$color = $colors{"school_code"} if $type eq "school";
</%perl>
							<span class="half centeralign nospace">
								<span
									id      = "<% $key %>_<% $panel_id %>"
									class	= "<% $type %>_<% $key %>_button <% $type %>toggle <% $color %>text buttonwhite marbottom padless smallish fourfifths grow"
									onClick = "toggleColor(
										this.id,
										<% $panel_id %>,
										'<% $key %>',
										'<% $type %>',
										'<% $color %>'
									);"
								>
									<% $counter{$type}{$key} %>
										<% uc($type) eq "PO" ? "" : "from" %>
									<% $type ne "state" ? ucfirst($type): "" %><% $type eq "PO" ? "s" : " ".$key %>
							</span>
						</span>

%						}
%					}

%					unless ($blah) {
						<span class="buttonwhite greentext padless">
							<span class="fa fa-check fa-lg greentext">
							</span>
							All OK!
						</span>

%					}

				</div>
			</span>
%		}

		</div>



