<%args>
	$person
	$tourn
	$entry_id => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	my $now = DateTime->now();

	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my $panel_id;
	my $speaks;

	my $event = $entry->event;

	if ($entry && $event->type eq "speech") {
		($panel_id, $speaks) = split(/_/, $ARGS{"panel_marker"});
	} else {
		$panel_id = $ARGS{"panel_id"};
	}

	my $panel = Tab::Panel->retrieve($panel_id) if $panel_id;

	Tab::Ballot->set_sql( round_and_entry => "
		select distinct ballot.*
		from ballot, panel
		where ballot.entry = ?
		and ballot.panel = panel.id
		and panel.round = ?
	");

	unless ($panel && $entry) {

		my $message = "No panel $panel_id and/or entry $entry_id found.";
		$message .= " Please refresh this page and start again";

        $m->print('{ "error": true, "message": " '.$message.'"}');
        $m->abort();

	} else {

		my $round = $panel->round();

		my $err;
		my $origin;
		my $origin_id;

		foreach my $ballot (
			Tab::Ballot->search_round_and_entry(
				$entry->id,
				$round->id
			)
		) {

			if ($ballot->audit) {
				$err = "These ballots have scores! ";
				$err .= "Please use the entry screen interfaces to make changes
				because you can do some serious damage here!";

			} else {

				$origin_id = $ballot->panel->id;
				$origin = " Section ".$ballot->panel->letter;
				$origin .= " speaker ".$ballot->speakerorder if $event->type eq "speech";
				$ballot->delete;

			}
		}

		if ($err) {

        	$m->print('{ "error": true, "message": " '.$err.'"}');
			$m->abort;

		} else {

			my $ballot;
			my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

			my @ballots = $panel->ballots();

			my %taken;
			my $max_speaker;

			foreach my $ballot (@ballots) {
				$max_speaker = $ballot->speakerorder if $max_speaker < $ballot->speakerorder;
				$taken{$ballot->speakerorder}++;
			}

			if ($speaks) {
				foreach my $ballot (@ballots) {
					if ($ballot->speakerorder == $speaks) {
						$ballot->speakerorder($max_speaker + 1);
						$ballot->update();
					}
				}
			} else {
				$speaks = 1;
				while ($taken{$speaks}) {
					$speaks++;
				}
			}

			if (@judges) {

				foreach my $judge (@judges) {

					$ballot = Tab::Ballot->create({
						panel        => $panel->id,
						judge        => $judge->id,
						entry        => $entry->id,
						speakerorder => $speaks
					});
				}

			} else {

				$ballot = Tab::Ballot->create({
					panel        => $panel->id,
					entry        => $entry->id,
					speakerorder => $speaks
				});

			}

			my $description_from = "Removed ".$entry->code." from $origin. ";
			my $description = "Added ".$entry->code." to Section ".$panel->letter." from $origin. ";
			$description .= " Now speaks ".$speaks if $event->type eq "speech";

			$m->comp("/funclib/log.mas",
				type        => 'move',
				event       => $event->id,
				entry       => $entry->id,
				tourn       => $tourn->id,
				person      => $person->id,
				panel       => $origin_id,
				description => $description_from
			);

			$m->comp("/funclib/log.mas",
				type        => 'move',
				entry       => $entry->id,
				event       => $event->id,
				panel       => $panel->id,
				old_panel   => $origin_id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);

        	$m->print('{ "error": false, "message": "'.$description.'" }');
			$m->abort();

		}
	}

	$m->abort;

</%init>
