<%args>
	$judge_id
	$school_id
	$person
	$alt_id => undef
	$ada    => 0
	$rounds => undef
</%args>
<%init>


	my $dbh = Tab::DBI->db_Main();
	my $judge = Tab::Judge->retrieve($judge_id);

	$m->abort unless $judge;

	my $category = $judge->category;
	my $tourn = $category->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $err;
	my %category_settings = $category->all_settings();

	my $rounds_per = $category_settings{"rounds_per"} if $category;
	my $now = DateTime->now;

	my $school = Tab::School->retrieve($school_id);
	my $missing_rating;
	my $chapter = $school->chapter;

	my $deadline;
	my $judge_deadline = $tourn->setting("judge_deadline");
	my $category_deadline = $category_settings{"deadline"};

	$category_deadline = $judge_deadline->clone
		if $judge_deadline && (not defined $category_deadline);

	$deadline++ if $category_deadline < $now;

	if ($category_settings{"coach_ratings"}) {

		unless ($category->rating_subsets) {

			my $rating_id = $ARGS{"rating_id"};
			$rating_id = 0 unless $rating_id;
			my $rating = $judge->ratings->first;

			$missing_rating .= "<br/> Missing ".$category->name." rating " unless $rating_id;

			if ($rating) {

				$rating->rating_tier($rating_id);
				$rating->update;

			} else {

				Tab::Rating->create({
					type        => "coach",
					entered     => $now,
					judge       => $judge->id,
					rating_tier => $rating_id,
				});
			}

		} else {

			foreach my $subset ($category->rating_subsets) {

				my $tier_id = $ARGS{$subset->id};
				$tier_id = 0 unless $tier_id;

				$missing_rating .= "<br/> Missing ".$subset->name." rating." unless $tier_id;

				my $rating = $judge->ratings(rating_subset => $subset)->first;

				if ($rating) {

					$rating->rating_tier($tier_id);
					$rating->update;

				} else {

					Tab::Rating->create({
						type          => "coach",
						judge         => $judge->id,
						rating_tier   => $tier_id,
						rating_subset => $subset->id
					});

				}
			}
		}

		if ($missing_rating) {
			my $err = "You must rate the judge in every category. ".$missing_rating;
			$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$err");
		}
	}

	if ($category_settings{"departure_times"}) {

		my $departure_date = $ARGS{"departure_date"};
		my $departure_time = $ARGS{"departure_time"};

        my $departure_dt = eval {
			return Tab::dtme($departure_date, $departure_time, $tz);
        };

		if ($departure_dt) {

			my $end = $tourn->end();
			$end->add(days => 1);

			my $strike = $judge->strikes(type => "departure")->first;

			if ($strike) {

				$strike->start($departure_dt);
				$strike->end($end);
				$strike->update();

			} else {

				Tab::Strike->create({
					judge => $judge->id,
					tourn => $tourn->id,
					type  => "departure",
					start => $departure_dt,
					end   => $end
				});
			}

		} else {

			my $err = "You must specify when the judge is departing the tournament";
			$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$err");

		}
	}

	my $min_pool_counter;

	Tab::JPool->set_sql('registrant' => "
		select jpool.*
		from jpool, jpool_setting
		where jpool.category = ?
		and jpool.id = jpool_setting.jpool
		and jpool_setting.tag = 'registrant'
		and jpool_setting.value = 1
	");

	my @jpools = Tab::JPool->search_registrant($category->id);

	my %jpool_judges =
		map {$_->jpool->id => $_}
		Tab::JPoolJudge->search(judge => $judge->id);

	foreach my $jpool (@jpools) {

		if ($ARGS{$jpool->id}) {

			$min_pool_counter++;

			unless ($jpool_judges{$jpool->id}) {

				Tab::JPoolJudge->create({
					judge => $judge->id,
					jpool => $jpool->id
				});
			}

		} else {

			$jpool_judges{$jpool->id}->delete()
				if $jpool_judges{$jpool->id};

		}
	}

	if ($min_pool_counter < $category_settings{"min_registrant_jpools"}) {
		my $err = "Each judge must be entered in at least ".$category_settings{"min_registrant_jpools"}." pools";
		$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$err");
	}

	$category_settings{"strike_start"} = $tourn->start->clone
		unless $category_settings{"strike_start"};

	unless ($deadline) {
		$judge->obligation($rounds) if $rounds_per;
		$judge->alt_category($alt_id) if $alt_id;
	}

	$judge->ada($ada);

	my %judge_settings = $judge->all_settings();

	if ($ARGS{"online_hybrid"} ne $judge_settings{"online_hybrid"}) {
		$ARGS{"online_hybrid"} = 0 unless $ARGS{"online_hybrid"};
		$judge->setting("online_hybrid", $ARGS{"online_hybrid"});
	}

	if ($ARGS{"notes"} ne $judge_settings{"notes"}) {
		$judge->setting('notes', "text", $ARGS{"notes"});
		$judge->setting("notes_processed", 0);
	}

	my $cj = $judge->chapter_judge;

	if ($cj && $ARGS{"permanent_notes"} ne $cj->notes) {
		$cj->notes($ARGS{"permanent_notes"});
		$cj->notes_timestamp($now);
		$cj->update();
	}

	foreach my $tag ("parli", "diverse", "first_year", "neutral") {
		unless ($ARGS{$tag}) {
			$ARGS{$tag} = 0;
		}

		unless ($ARGS{$tag} eq $judge_settings{$tag}) {
			$judge->setting($tag, $ARGS{$tag});
		}
	}

	foreach my $tag ("qual_history") {

		unless ($ARGS{$tag}) {
			$ARGS{$tag} = 0;
		}

        my $text = $m->comp(
            '/funclib/save_editor.mas',
            text => $ARGS{$tag}
        );

		unless ($text eq $judge_settings{$tag}) {
			if ($text) {
				$judge->setting($tag, "text", $text);
			} else {
				$judge->setting($tag, 0);
			}
		}
	}

	if (
		($ARGS{"first_year"} > 0)
		&& ($category_settings{"fyo_free_strikes"})
	) {
		$judge->setting("free_strike", 1);

	} else {

		unless ($ARGS{"free_strike"} == $judge_settings{"free_strike"}) {
			$ARGS{"free_strike"} = 0 unless $ARGS{"free_strike"};
			$judge->setting("free_strike", $ARGS{"free_strike"});
		}
	}

	$ARGS{"email"} =~ s/\s+//g;
	my $judge_person = $judge->person;

	unless ($judge_person && $judge_person->email eq $ARGS{"email"}) {

		$judge_person = Tab::Person->search(email => $ARGS{"email"})->first;

		unless ($judge_person) {

			if ($category->setting("linked_only")) {

				$err = "Judges must be linked to Tabroom accounts to register.  The email ";
				$err .= $ARGS{"email"}." does not have a Tabroom account.  Please enter a valid ";
				$err .= "Tabroom account email to continue";

			} else {

				$judge->setting("email", $ARGS{"email"});
				$judge->person(0);
				$judge->update();
			}

		} else {

			if ($category->setting("link_phone_required")) {
				unless ($judge_person->phone) {
					$err = $ARGS{'email'}." is missing a phone number in their Tabroom account";
					$err .= " which is required by this tournament.  Please enter a phone number ";
					$err .= " to continue";
				}
			}

			if ($category->setting('link_campus_required')) {

				unless ($judge_person->setting("campus_test_private")) {

					my $sth = $dbh->prepare("
						select cl.id
							from campus_log cl
						where cl.person = ?
							order by cl.id desc limit 5
					");

					$sth->execute($judge_person);
					my $results = $sth->fetchall_hash();

					if (scalar @{$results} > 0) {
						$judge_person->setting("campus_test_private", "date", DateTime->now());
					} else {
						$err = $ARGS{'email'}." has not entered an NSDA Campus room to verify their tech,";
						$err .= " which is required by this tournament.  Please ask the judge to log into Tabroom ";
						$err .= " and enter the Test room with another person, and verify they can see and hear ";
						$err .= " each other before registering them.";
					}
				}
			}

			my @others = $school->judges(person => $judge_person->id);
			my $count;

			foreach my $other (@others) {
				next if $other->id == $judge->id;
				$count++;
			}

			unless ($count) {
				if ($chapter) {
					push @others, $chapter->chapter_judges(person => $judge_person->id, retired => 0);
				}

				foreach my $other (@others) {
					next if $other == $cj;
					$count++;
				}
			}

			unless ($count > 0) {

				if ($cj) {
					$cj->person($judge_person->id);
					$cj->update();
				}

				$judge->person($judge_person->id);
				$judge->update();

				$m->comp("/funclib/person_conflict.mas",
					tourn   => $tourn,
					entered => $person,
					person  => $judge_person
				);

				$judge->setting("email", 0);

				if ($judge_person->phone) {
					$ARGS{"phone"} = $judge_person->phone;
				}

			} else {

				$err .= "A judge from your school already is linked to that account.  ";
				$err .= "Please only put in the judge's OWN tabroom account. ";
			}

		}

	} elsif ($judge_person) {

		$judge->setting("email", 0);
		$judge->setting("phone", 0);

		if ($category->setting("link_phone_required")) {
			unless ($judge_person->phone) {
				$err = $ARGS{'email'}." is missing a phone number in their Tabroom account";
				$err .= " which is required by this tournament.  Please correct to continue.";

				$judge->obligation(0);
			}
		}
	}

	$ARGS{"phone"} =~ s/[\D_]//g;

	my $dupes;

	unless ($judge_person && $judge_person->phone eq $ARGS{"phone"}) {

		if ($person->phone eq $ARGS{"phone"} && $judge_person != $person) {

			undef $ARGS{"phone"};
			$err .= " Please enter the judge's phone number, not yours.  Entering your number ";
			$err .= " causes problems for the tournament reaching judges when you cannot";
			$err .= " be contacted.";

		} elsif ($chapter && $cj) {

			my $sth = $dbh->prepare("
				select cj.first, cj.last
					from chapter_judge cj, person
				where cj.chapter = ?
					and cj.id != ?
					and cj.retired != 1
					and cj.person = person.id
					and person.phone = ?
			");

			$sth->execute($chapter, $cj, $ARGS{"phone"});

			my ($first, $last) = $sth->fetchrow_array();

			if ($first && $last) {
				$dupes = $first." ".$last;
			}

			$sth->finish();
		}
	}

	if ($dupes) {

		$err .= "That phone number is also listed for your judge $dupes. ";
		$err .= "Please enter the judge's own phone number.";

	} elsif ($judge_person && $judge_person->phone ne $ARGS{"phone"}) {

		$judge_person->phone($ARGS{"phone"});
		$judge_person->update();

	} elsif ($judge_person) {

		$ARGS{"phone"} = $judge_person->phone;

	} elsif (
		(not defined $judge_person)
		&& $ARGS{"phone"}
		&& $ARGS{"phone"} ne $judge_settings{"phone"}
	) {

		$judge->setting("phone", $ARGS{"phone"});

	} elsif ($category_settings{"judge_cells"} && (not defined $ARGS{"phone"})) {

		$err .= " Judge has no phone number listed, which is required for this tournament.";
		$err .= " Please enter the judge's phone number.";
	}

	my %strike_by_event = ();

	foreach my $strike (
		Tab::Strike->search(
			type       => "event",
			judge      => $judge->id,
			registrant => 1
		)
	) {
		$strike_by_event{$strike->event->id} = $strike;
	}

	EVENT:
	foreach my $event (
		$m->comp("/funclib/event_selfstrike.mas",
			category => $category
		)
	) {

		if ($ARGS{$event->id}) {

			next EVENT if $strike_by_event{$event->id};

			Tab::Strike->create({
				judge      => $judge->id,
				event      => $event->id,
				tourn      => $tourn->id,
				type       => "event",
				registrant => 1
			});

		} else {

			my $strike = $strike_by_event{$event->id};
			$strike->delete if $strike;
		}
	}

	$judge->update();

	if ($category_settings{'reg_questions'}) {
		my $question_errs = $m->comp(
			"/funclib/judge_reg_questions.mas",
				save          => \%ARGS,
				judge         => $judge,
				reg_questions => $category_settings{"reg_questions"}
		);

		if ($question_errs) {
			$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$question_errs");
		}
	}

	if (
		$min_pool_counter < $category_settings{"min_registrant_jpools"}
	) {
		my $err = "All judges must be in a minimum of ".$category_settings{"min_registrant_jpools"}." pools";
		$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$err");
	}

	if ($err) {
		$m->redirect("judge_details.mhtml?school_id=$school_id&judge_id=$judge_id&err=$err");
	}

	my $msg = "Judge ".$judge->first." ".$judge->last." entered";
	$msg .= " and Tabroom account linked!" if $judge_person;

	$m->redirect("judges.mhtml?school_id=$school_id&category_id=".$category->id."&msg=$msg&err=$err");

</%init>
