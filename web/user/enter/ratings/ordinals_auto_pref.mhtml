<%args>
	$person
	$school
	$basis       => undef
	$category_id => undef
	$entry_id    => undef
	$student_id  => undef
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id) if $entry_id;

	my $tourn = $school->tourn;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now->set_time_zone($tz);

	my $category = Tab::Category->retrieve($category_id) if $category_id;
	$category = $entry->event->category unless $category;
	my $strike_end = $category->setting("strike_end");

	if ($strike_end < $now && (not defined $entry->setting("open_prefs")) ) {

		my $err = "Prefs deadline has passed";
		$m->redirect("ordinals_prefs.mhtml?school_id=".$school->id."&category_id=$category&err=$err");
	}

	my %ratings_by_judge = ();

	my %conflicts_by_id = ();

	foreach my $conflict ($entry->strikes( registrant => 1, conflict => 1)) {
		$conflicts_by_id{$conflict->judge->id} = $conflict;
	}

	foreach my $conflict ($entry->school->strikes( registrant => 1, conflict => 1)) {
		$conflicts_by_id{$conflict->judge->id} = $conflict;
	}

	Tab::Rating->set_sql( wipe_existing => "
		delete from rating
		where entry = ?
	");

	Tab::Rating->sql_wipe_existing->execute($entry_id);

	my @others;
	my @cj_others;

	if ($student_id) {

		my $student = Tab::Student->retrieve($student_id);
		my $ok;

		foreach my $entry_student ($entry->students) {
			$ok++ if $student->chapter->id == $entry_student->chapter->id;
		}

		unless ($ok) {
			my $err = "Don't try to snoop";
			$m->redirect("ordinals_prefs.mhtml?school_id=".$school->id."&category_id=$category_id&err=$err");
		}

		Tab::Judge->set_sql( judge_with_rating_by_person => "
			select judge.*, rating.percentile pref, judge.person personid
				from judge, judge jother, rating, entry eother, entry_student esother
			where judge.person > 0
				and judge.person = jother.person
				and judge.id != jother.id
				and judge.id = rating.judge
				and rating.type = 'entry'
				and rating.entry = eother.id
				and eother.id = esother.entry
				and esother.student = ?
			group by judge.id
			order by judge.person
		");

		Tab::Judge->set_sql( judge_with_rating_by_cj => "
			select judge.*, rating.percentile pref, judge.chapter_judge cjid
				from judge, judge jother, rating, entry eother, entry_student esother
			where judge.chapter_judge = jother.chapter_judge
				and judge.id != jother.id
				and judge.id = rating.judge
				and rating.type = 'entry'
				and rating.entry = eother.id
				and eother.id = esother.entry
				and esother.student = ?
			group by judge.id
			order by judge.person
		");

		@others = Tab::Judge->search_judge_with_rating_by_person($student->id);
		@cj_others = Tab::Judge->search_judge_with_rating_by_cj($student->id);

	} else {

		Tab::Judge->set_sql( judge_with_rating_by_person => "
			select judge.*, rating.percentile pref, judge.person personid
				from judge, judge jother, rating, entry eother, entry_student es, entry_student esother
			where judge.person > 0
				and judge.person = jother.person
				and judge.id != jother.id
				and judge.id = rating.judge
				and rating.type = 'entry'
				and rating.entry = eother.id
				and eother.id = esother.entry
				and esother.student = es.student
				and es.entry = ?
			group by judge.id
			order by judge.person
		");

		Tab::Judge->set_sql( judge_with_rating_by_cj => "
			select judge.*, rating.percentile pref, judge.chapter_judge cjid
				from judge, judge jother, rating, entry eother, entry_student es, entry_student esother
			where judge.chapter_judge = jother.chapter_judge
				and judge.id != jother.id
				and judge.id = rating.judge
				and rating.type = 'entry'
				and rating.entry = eother.id
				and eother.id = esother.entry
				and esother.student = es.student
				and es.entry = ?
			group by judge.id
			order by judge.person
		");

		@others = Tab::Judge->search_judge_with_rating_by_person($entry->id);
		@cj_others = Tab::Judge->search_judge_with_rating_by_cj($entry->id);

	}

	my %others_by_person = ();
	my %others_by_cj = ();
	my %used;

	foreach my $other (@others) {
		next unless $other->pref;
		next unless $other->personid;
		push (@{$others_by_person{$other->personid}}, $other);
		$used{$other->id}++;
	}

	foreach my $other (@cj_others) {
		next unless $other->pref;
		next unless $other->cjid;
		next if $used{$other->id};
		push (@{$others_by_cj{$other->cjid}}, $other);
	}

	my @judges = $m->comp("judges.mas", category => $category);
	my $total_rounds;
	my %judge_avg = ();

	JUDGE:
	foreach my $judge (@judges) {

		next JUDGE if $conflicts_by_id{$judge->id};

		my $count;
		my $total;

		if ($judge->chapter_judge) {
			foreach my $other (@{$others_by_cj{$judge->chapter_judge->id}}) {
				$count++;
				$total += $other->pref;
			}
		}

		if ($judge->person) {
			foreach my $other (@{$others_by_person{$judge->person->id}}) {
				$count++;
				$total += $other->pref;
			}
		}

		my $avg = $total / $count if $count;
		$judge_avg{$judge->id} = $avg;

		$total_rounds += $judge->obligation;
		$total_rounds += $judge->hired;

	}

	my %done;
	my $count;
	my $rounds_before;
	my $side_based = $entry->event->category->setting("side_based_prefs");

	foreach my $judge (sort {$judge_avg{$a->id} <=> $judge_avg{$b->id}} @judges) {

		next if $done{$judge}++;
		next unless $judge_avg{$judge->id};

		$count++;

		my $percentile = 0;
		$percentile = ( ($rounds_before + 1) / $total_rounds) * 100 if $total_rounds;

		if ($side_based) {

			Tab::Rating->create({
				type       => "entry",
				judge      => $judge->id,
				entry      => $entry_id,
				ordinal    => $count,
				percentile => $percentile,
				entered    => $now,
				side       => 1
			});

			Tab::Rating->create({
				type       => "entry",
				judge      => $judge->id,
				entry      => $entry_id,
				ordinal    => $count,
				percentile => $percentile,
				entered    => $now,
				side       => 2
			});

		} else {

			eval {
				Tab::Rating->create({
					type       => "entry",
					judge      => $judge->id,
					entry      => $entry_id,
					ordinal    => $count,
					percentile => $percentile,
					entered    => $now,
					side       => 0
				});
			};
		}

		$rounds_before += $judge->obligation;
		$rounds_before += $judge->hired;

	}

	my $msg = "$count judges preffed from previous scores.  Remaining judges unrated.";
	$m->redirect("ordinals_prefs.mhtml?entry_id=".$entry->id."&msg=$msg");

</%init>

