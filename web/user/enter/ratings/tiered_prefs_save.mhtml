<%args>
	$entry_id
	$category_id
	$dbh
</%args>
<%init>

	use POSIX;

	my $now = DateTime->now();
	my $err;

	my $entry = Tab::Entry->retrieve($entry_id);
	my $category = Tab::Category->retrieve($category_id);
	my %category_settings = $category->all_settings();


	unless ($entry) {
		$m->comp("/funclib/abort.mas", message => "No valid entry found for ID $entry_id");
	}

	my $find_sth = $dbh->prepare("select rating.id, rating.judge, rating.rating_tier from rating where entry = ?");
	$find_sth->execute($entry_id);

	my $results = $find_sth->fetchall_hash();
	my %existing_rating = map {$_->{judge} => $_} @{$results};

    my @rating_tiers = Tab::RatingTier->search(
		category => $category->id,
		type     => "mpj"
	);

    @rating_tiers = sort {$b->name <=> $a->name} @rating_tiers;

	my %conflicts_by_id = ();

	foreach my $conflict ($entry->strikes( registrant => 1, conflict => 1)) {
		$conflicts_by_id{$conflict->judge->id} = $conflict;
	}

	foreach my $conflict ($entry->school->strikes( registrant => 1, conflict => 1)) {
		$conflicts_by_id{$conflict->judge->id} = $conflict;
	}

	my $event_struck;
	if ($entry) {
		$event_struck = $m->comp("/funclib/event_strike_judges.mas", event => $entry->event->id, dbh => $dbh);
	}

    my @all_judges = $m->comp("judges.mas", category => $category);

	my @judges;
	my %judges_at_tier = ();
	my $num_judges;

	my %freebie = $m->comp("/funclib/free_strikes.mas", category => $category);
	my $rounds_per++ if $category_settings{"prefs"} eq "tiered_round";

    foreach my $judge (@all_judges) {

        next if $judge->school->id == $entry->school->id;
        next if $conflicts_by_id{$judge->id};
		next if $event_struck{$judge->id};
		next if $category_settings{free_strikes_no_pref} && $freebie{$judge->id};

        push (@judges, $judge);

		next if $freebie{$judge->id};

		if ($rounds_per) {

			my $rounds = $judge->obligation + $judge->hired;

			if (
				($category_settings{"max_rounds"} > 0)
				&& ($category_settings{"max_rounds"} < $rounds)
			) {
				$rounds = $category_settings{"max_rounds"};
			}

			$judges_at_tier{$ARGS{$judge->id}} += $rounds;
			$num_judges += $rounds;

		} else {
			$judges_at_tier{$ARGS{$judge->id}}++;
			$num_judges++;
		}
    }

    my %tier_min = ();
	my %tier_name = ();
    my %tier_limit = ();

	foreach my $tier (@rating_tiers) {

		if ($category_settings{prefs} eq "caps" || $category_settings{prefs} eq "ndt") {
	        $tier_limit{$tier->id} = $tier->max;
	        $tier_min{$tier->id} = $tier->min;
		} else {
	        $tier_limit{$tier->id} = ceil($num_judges * $tier->max / 100);
	        $tier_min{$tier->id} = floor($num_judges * $tier->min / 100);
		}

		$tier_name{$tier->id} = $tier->name;
    }

    my $cumulate++ if $category_settings{"cumulate_mjp"};
    my %spares_at_tier;

    if ($cumulate) {
		foreach my $tier (@rating_tiers) {
			if ($judges_at_tier{$tier->id} < $tier_limit{$tier->id}
				&& $tier_limit{$tier->id}
			) {

				$spares_at_tier{$tier->id} +=
					ceil($tier_limit{$tier->id} - $judges_at_tier{$tier->id});
			}
        }
    }

	my $spares_available;
	my %tier_count;

	foreach my $tier (@rating_tiers) {

		$spares_available += $spares_at_tier{$tier->id};
		my $tier_count;

		JUDGE:
		foreach my $judge (@judges) {

			next unless $ARGS{$judge->id} == $tier->id;

			my $spared;

			unless ($freebie{$judge->id}) {

				if ($rounds_per) {
					$tier_count += $judge->obligation;
					$tier_count += $judge->hired;

				} else {
					$tier_count++;
				}

				if (
					$tier_limit{$ARGS{$judge->id}}
					&& ($tier_count > $tier_limit{$ARGS{$judge->id}})
				) {
					if ( ($spares_available + $tier_limit{$ARGS{$judge->id}}) >= $tier_count) {

						if ($rounds_per) {
							$spares_available -= $judge->obligation;
							$spares_available -= $judge->hired;
							$spared++;
						} else {
							$spares_available--;
							$tier_count--;
							$spared++;
						}

					}

					unless ($spared || $tier_limit{$ARGS{$judge->id}} == 0) {
						my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
						$err = "You had too many judges rated ".$tier->name.". <br />" unless $err;
						$err .= " ".$judge->first." ".$judge->last." not rated <br />";
						next JUDGE;
					}
				}
			}

			my $ref = $existing_rating{$judge->id};

			if ($ref && $ref->{rating_tier} == $ARGS{$judge->id}) {

				delete $existing_rating{$judge->id};

			} elsif ($ref && $ref->{id}) {

				my $change_sth = $dbh->prepare("update rating set rating_tier = ?, ordinal = ?, side = 0 where id = ? ");
				$change_sth->execute($ARGS{$judge->id}, int($tier->name), $ref->{id});
				delete $existing_rating{$judge->id};

			} else {

				Tab::Rating->create({
					type        => "entry",
					judge       => $judge->id,
					entry       => $entry->id,
					rating_tier => $ARGS{$judge->id},
					ordinal     => int($tier->name),
					side        => 0,
					entered     => $now
				});
			}

		}

		$tier_count{$tier->id} = $tier_count;

	}

	my $id_string;
	my $id_count;

	foreach my $key (keys %existing_rating) {
		$id_string .= "," if $id_string;
		$id_string .= $key;
		if ($id_count++ > 4) {
			my $del_sth = $dbh->prepare("delete from rating where id IN ($id_string)");
			$del_sth->execute();
			undef $id_string;
			undef $id_count;
		}
	}

	if ($id_string) {
		my $del_sth = $dbh->prepare("delete from rating where id IN ($id_string)");
		$del_sth->execute();
	}

    @rating_tiers = sort {$a->name <=> $b->name} @rating_tiers;

	my $min_spares_available;

	foreach my $tier (@rating_tiers) {

		my $diff = $tier_min{$tier->id} - $tier_count{$tier->id};

		unless ($diff <= $min_spares_available || $diff < 1) {
			$err .= "You are $diff under on tier ".$tier->name." <br />";
			$err .= "You have ".$tier_count{$tier->id}." and need ".$tier_min{$tier->id}." <br />";
		}

		$min_spares_available -= $diff;
	}

	my $msg = $entry->name."'s prefs saved in ".$category->abbr;
	$msg =~ s/\&/and/g;

	$m->redirect("tiered_prefs.mhtml?entry_id=".$entry_id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");

</%init>
