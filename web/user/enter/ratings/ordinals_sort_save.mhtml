<%args>
	$entry_id => undef
	$sortorder => undef
</%args>
<%init>

	return unless $entry_id && $sortorder;

	my @ordering = split (/&judge\[\]=/, $sortorder);

	my %id_order = ();
	my $ord = 1;

	foreach my $order (@ordering) {
		$id_order{$order} = $ord;
		$ord++;
	}

	my $now = DateTime->now();
	my $err;

	my $entry = Tab::Entry->retrieve($entry_id);
	my $category = $entry->event->category;

	my %freebie = $m->comp("/funclib/free_strikes.mas", category => $category);

	my $find_sth = $dbh->prepare("select id from rating where entry = ?");
	$find_sth->execute($entry_id);
	my $results = $find_sth->fetchall_hash();

	my $id_string;
	my $id_count;

	foreach my $ref (@{$results}) {
		$id_string .= "," if $id_string;
		$id_string .= $ref->{id};
		if ($id_count++ > 4) {
			my $del_sth = $dbh->prepare("delete from rating where id IN ($id_string)");
			$del_sth->execute();
			undef $id_string;
			undef $id_count;
		}
	}

	if ($id_string) {
		my $del_sth = $dbh->prepare("delete from rating where id IN ($id_string)");
		$del_sth->execute();
	}


	my $rounds_per++ if $category->setting("rounds_per");
	my %conflicts_by_id = ();

	foreach my $conflict ($entry->strikes( registrant => 1, conflict => 1)) {
		$conflicts_by_id{$conflict->judge->id} = $conflict;
	}

	foreach my $conflict ($entry->school->strikes( registrant => 1, conflict => 1)) {
		$conflicts_by_id{$conflict->judge->id} = $conflict;
	}

	my @all_judges = $m->comp("judges.mas", category => $category);
	@all_judges = sort {$a->last cmp $b->last} @all_judges;
	@all_judges = sort {$a->school->short_name cmp $b->school->short_name} @all_judges;

	my %rating_by_judge = ();
	my %ordinal_by_judge = ();
	my %judges_at_rating = ();

	my $total_rounds;
	my $total_judges;

	@all_judges = sort {$id_order{$a->id} <=> $id_order{$b->id}} @all_judges;
	my $count = 1;

	my %done;

    JUDGE:
    foreach my $judge (@all_judges) {

        next if $judge->school->id == $entry->school->id;
		next JUDGE if $conflicts_by_id{$judge->id};
		next if $rating_by_judge{$judge->id};

		unless ($freebie{$judge->id}) {

            if ($rounds_per > 0) {
                $total_rounds += $judge->obligation;
                $total_rounds += $judge->hired;
            } else {
                $total_rounds++;
            }
			$total_judges++;
		}

		my $rating = eval {
			return Tab::Rating->create({
				type    => "entry",
				judge   => $judge->id,
				entry   => $entry->id,
				ordinal => $count++,
				side    => 0,
				entered => $now
			});
		};

		if ($rating) {
			$rating_by_judge{$judge->id} = $rating;
			$ordinal_by_judge{$judge->id} = $id_order{$judge->id};
			push (@{$judges_at_rating{$id_order{$judge->id}}}, $judge );
		}
    }

	my $rounds_before;

	foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {

		foreach my $judge (@{$judges_at_rating{$ordinal}}) {

			next if $conflicts_by_id{$judge->id};
			next if $freebie{$judge->id};

            if ($rounds_per > 0) {
				$rounds_before += $judge->obligation;
				$rounds_before += $judge->hired;
			} else {
				$rounds_before++;
			}
		}

		foreach my $judge (@{$judges_at_rating{$ordinal}}) {

			my $percentile = ( $rounds_before  / $total_rounds) * 100;
			my $rating = $rating_by_judge{$judge->id};
			$rating->percentile($percentile);
			$rating->update;

		}

	}

	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";

	$m->redirect("ordinals_prefs_sortable.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&category_id=".$category->id."&style=entry_ratings&msg=".$msg."&err=".$err."#yo");

</%init>

