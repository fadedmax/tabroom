<%args>
	$school
	$student_id => undef
</%args>
<%init>

	my $tourn = $school->tourn;

	my $online_nats = $tourn->setting("nsda_online_nats");
	my $student = Tab::Student->retrieve($student_id);

	$m->abort unless $student;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now;

	my @entries = $m->comp(
		"/funclib/student_entries.mas",
		student => $student,
		tourn   => $tourn
	);

	my %ok_events = $m->comp(
		"/funclib/student_clear_events.mas",
		student => $student,
		school  => $school
	);

	my $hide_codes = $tourn->setting("hide_codes");

	my $deleted_students;
	my $err;
	my $msg;

	foreach my $entry (@entries) {

		my $event = $entry->event;
		my %event_settings = $event->all_settings();

		# Code style
		my $code_style = $event_settings{"code_style"};

		$entry->name($ARGS{$entry->id."_name"});

		if ($code_style eq "register" || $code_style eq "initials") {

			my $new_code = $ARGS{$entry->id."_code"};

			if (Tab::Entry->search(code => $new_code)) {

				$err .= "Code $new_code is already taken in the tournament.  Please select another <br />";

			} else {

				$entry->code($ARGS{$entry->id."_code"});

			}
		}

		$entry->ada($ARGS{$entry->id."_ada"});
		$entry->update;

		$entry->setting("title", $ARGS{$entry->id."_title"});
		$entry->setting("author", $ARGS{$entry->id."_author"});

		if ($ARGS{$entry->id."_video_link"}) {
			eval {
				$entry->setting("video_link", "text", $ARGS{$entry->id."_video_link"});
			};

			eval {
				$entry->setting("video_link", "text", $ARGS{$entry->id."_video_link"});
			};
		} else {
				$entry->setting("video_link", 0);
		}

		if ($event_settings{"ask_for_titles"} &! $ARGS{$entry->id."_title"}) {
			$err .= "Please provide a piece title and author <br />";
		}

		my $seed = $ARGS{$entry->id."_registered_seed"};

		$entry->setting("registered_seed", $ARGS{$entry->id."_registered_seed"});

		if ($seed eq "full") {
			$entry->setting("pairing_seed", 1);
		} elsif ($seed eq "half") {
			$entry->setting("pairing_seed", 2);
		} elsif ($seed eq "free") {
			$entry->setting("pairing_seed", 3);
		} elsif ($event_settings{"apda"}) {
			$entry->setting("pairing_seed", 4);
		}

		my @clear_students = $m->comp(
			"/funclib/students_evententer.mas",
			event  => $event,
			school => $school
		);

		my %clear_by_id = map {$_->id => $_} @clear_students;
		my %already_students = map {$_->id => $_} $entry->students;

		my %used_students;
		my $students_changed;
		my $minimum_counter;

		foreach my $tick (1 .. ($event_settings{"max_entry"} || 1)) {

			my $student_id = $ARGS{$entry->id."_student_".$tick};
			$student_id = $ARGS{$entry->id."_hybrid_".$tick} unless $student_id;

			unless ($online_nats) {
				next unless $student_id;
				next unless $clear_by_id{$student_id} || $already_students{$student_id};
			}

			$minimum_counter++;

			unless ($already_students{$ARGS{$entry->id."_student_".$tick}}) {

				$students_changed++;

				unless (Tab::EntryStudent->search(
					entry   => $entry->id,
					student => $ARGS{$entry->id."_student_".$tick} )) {

					eval {
						Tab::EntryStudent->create({
							entry   => $entry->id,
							student => $ARGS{$entry->id."_student_".$tick}
						});
					};
				}

			}

			$used_students{$student_id}++;
		}

		foreach my $student_id (keys %already_students) {

			next if $used_students{$student_id};

			my $es = Tab::EntryStudent->search(
				entry   => $entry->id,
				student => $student_id
			)->first;

			$deleted_students .= "," if $deleted_students;
			$deleted_students .= $student_id;

			$es->delete;
			$students_changed++;
		}

		if ($students_changed
			&& ($code_style eq "initials"
			|| $code_style eq "code_name"
			|| $code_style eq "full_initials"
			|| $code_style eq "school_names"
			|| $code_style eq "school_first_names"
			|| $code_style eq "school_last_names"
			|| $code_style eq "school_name_only"
			|| $code_style eq "names"
			|| $code_style eq "names_lastfirst"
			|| $code_style eq "last_names")
		) {

			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
		}

		if ($students_changed) {
			$entry->name($m->comp("/funclib/entry_name.mas", entry => $entry));
			$entry->update;
		}

   		my $required = $event_settings{"ask_quals"};

		if ($event_settings{"at_larges"}) {
			if ($ARGS{$entry->id."_atlarge"}) {
				$entry->setting("atlarge", $ARGS{$entry->id."_atlarge"});
			} else {
				$entry->setting("atlarge", 0);
			}
		}

		if ($event_settings{"waitlist_rank"}) {

			my @waitlisted = $school->entries(
				event    => $event->id,
				waitlist => 1
			);

			my %waitlist_rank;

			foreach my $waitlist (@waitlisted) {
				my $rank = $waitlist->setting("waitlist_rank");
				$rank = scalar @waitlisted unless $rank;
				$waitlist_rank{$waitlist->id} = $rank;
			}

			$waitlist_rank{$entry->id} = $ARGS{"waitlist_rank"};

			@waitlisted = sort {$waitlist_rank{$a->id} <=> $waitlist_rank{$b->id}} @waitlisted;

			my $counter;

			foreach my $waitlist (@waitlisted) {

				next if $waitlist->id == $entry->id;

				$counter++;
				$counter++ if $counter == $ARGS{'waitlist_rank'};

				$waitlist->setting("waitlist_rank", $counter);
			}

			$entry->setting("waitlist_rank", $ARGS{"waitlist_rank"});
			$entry->setting("waitlist_rank", $counter) unless $ARGS{"waitlist_rank"};
		}

		if ($event_settings{"ask_quals"}) {

			my %qualifiers;
			my $counter;

			foreach my $tick (1 .. $event_settings{"ask_quals"}) {
				if ($ARGS{$entry->id."_qual_name_".$tick}) {
					$counter++;
					$qualifiers{$tick}{"name"} = $ARGS{$entry->id."_qual_name_".$tick};
					$qualifiers{$tick}{"result"} = $ARGS{$entry->id."_qual_result_".$tick};
				}
			}

			if ($counter < $required && (not defined $ARGS{$entry->id."_atlarge"}) ) {
				$err .= "You have not entered enough qualifiers.  $required required; you entered only $counter";
			}

			if (scalar (keys %qualifiers)) {
				$entry->setting('qualifiers', 'json', \%qualifiers);
			} else {
				$entry->setting('qualifiers', 0);
			}
		}
	}

	$msg = "Details saved for ".$student->first." ".$student->last." entries";

	$m->redirect("by_person_edit.mhtml?student_id=$student_id&school_id=".$school->id."&err=$err&msg=$msg");

</%init>
