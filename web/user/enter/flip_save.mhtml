<%args>
	$person
	$target_id         => undef
	$related_thing     => undef
	$property_name     => undef
	$option_one        => undef
	$option_two        => undef
	$other_value       => undef
	$other_other_value => undef
</%args>
<%init>

    $m->clear_buffer();
    $r->content_type('application/json');

	unless ($person) {
        $m->print('{ "error": true, "message": "You are not logged into Tabroom"}');
        $m->abort();
	}

    unless ($target_id) {
        $m->print('{ "error": true, "message": "No Entry ID sent for flip target"}');
        $m->abort();
    }

	my $entry = Tab::Entry->retrieve($target_id);

	unless ($entry) {
        $m->print('{ "error": true, "message": "No valid entry found for ID '.$target_id.'"}');
        $m->abort();
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select student.id
		from student, entry_student es
		where es.entry = ?
			and es.student = student.id
			and student.person = ?
	");

	$sth->execute($entry->id, $person->id);

	my $perms_ok;

	if ($sth->fetchall) {

		$perms_ok++;

	} else {

		$sth->finish();
		$sth = $dbh->prepare("
			select permission.id
			from permission, student, entry_student es
			where es.entry = ?
				and es.student = student.id
				and student.chapter = permission.chapter
				and permission.tag = 'chapter'
				and permission.person = ?
		");

		$sth->execute($entry->id, $person->id);

		if ($sth->fetchall_array) {
			$perms_ok++;
		}
	}

	$sth->finish();

	unless ($perms_ok) {
        $m->print('{
			"error": true,
			"message": "You do not have permission to flip for that entry"
		}');
        $m->abort();
	}

    unless ($related_thing) {
        $m->print('{
			"error": true,
			"message": "No Section ID sent for flip"
		}');
        $m->abort();
    }

	my $panel = Tab::Panel->retrieve($related_thing);

	unless ($panel) {
        $m->print('{
			"error": true,
			"message": "No valid section found for ID '.$related_thing.'"
		}');
        $m->abort();
	}

	my $flip_ref = $panel->setting("flip");
	my %flip;

	if ($flip_ref) {
		%flip = %{$flip_ref};
	}

	if ($property_name eq "speakers") {

		$flip{$entry->id}{$other_value} = 1;
		$flip{$entry->id}{$other_other_value} = 2;

		$panel->setting('flip', 'json', \%flip);
		$panel->update();

		my %response = (
			error   => 0,
			message => "Speaker order set for ".$entry->code
		);

		$m->print(JSON::encode_json(\%response));
		$m->abort();
	}

	my $flip_deadline = $panel->setting("flip_at");
	my $flip_status = $panel->setting("flip_status");

	# Check if the flip is already done
	if ($flip_status eq "done") {
        $m->print('{
			"error": true,
			"message": "The flip for this debate is already complete"
		}');
        $m->abort();
	}

	# Check against status ladder

	my $flip_winner = $dbh->selectrow_array("
		select panel_setting.value
		from panel_setting
		where panel_setting.panel = ?
		and panel_setting.tag = 'flip_winner'
	", undef, $panel->id);

	if ($flip_status eq "winner") {

		unless ($flip_winner eq $target_id) {
			$m->print('{
				"error": true,
				"message": "You are not the winner of the flip"}');
			$m->abort();
		}

	} elsif ($flip_status eq "loser") {

		if ($flip_winner eq $target_id) {
			$m->print('{
				"error": true,
				"message": "You are the winner of the flip and your choice window expired"}');
			$m->abort();
		}
	}

	# Check if this choice is already done;
	my $message;
	my @replace;
	my $flip_done;
	my $destroy;

	my $now = DateTime->now(time_zone => "UTC");

	if ($property_name eq "order") {

		# Check if this decision has been made

		if ($flip{"order_locked"}) {
			$m->print('{
				"error": true,
				"message": "The choice of speaking order has already been made"
			}');
			$m->abort();
		}

		my $me_sth = $dbh->prepare("
			update ballot set speakerorder = ? where panel = ? and entry = ?
		");

		my $not_me_sth = $dbh->prepare("
			update ballot set speakerorder = ? where panel = ? and entry != ?
		");

		$not_me_sth->execute(127, $panel->id, $entry->id);

		my $order;

		if ($option_one) {

			$me_sth->execute(1, $panel->id, $entry->id);
			$not_me_sth->execute(2, $panel->id, $entry->id);
			$message = "Entry will speak FIRST in the round";
			$order = "First";

		} elsif ($option_two) {

			$me_sth->execute(2, $panel->id, $entry->id);
			$not_me_sth->execute(1, $panel->id, $entry->id);
			$message = "Entry will speak SECOND in the round";
			$order = "Second";
		}

		$flip{$entry->id}++;
		$flip{"order_chosen_by"} = $person->id;
		$flip{"order_chosen_at"} = DateTime::Format::MySQL->format_datetime($now);
		$flip{"order_locked"}    = 1;
		$flip{"order_chosen"}    = $order;

		my $content = '<span class="eighth"></span>
			<span class="eighth semibold rightalign redtext padsetting"></span>
			<span class="quarter semibold redtext padsetting">Speaking position chosen</span>
			<span class="fifth semibold rightalign bluetext">Your Position:</span>
			<span class="sixth semibold bluetext">'.$order.'</span>';

		my %item = (
			id      => $entry->id."_order",
			content => $content
		);

		push @replace, \%item;
		$destroy = $entry->id."_side";

	} elsif ($property_name eq "side") {

		# Check if this choice is made already
		if ($flip{"side_locked"}) {
			$m->print('{
				"error": true,
				"message": "The choice of side has already been made"
			}');
			$m->abort();
		}

		my $me_sth = $dbh->prepare("
			update ballot set side = ? where panel = ? and entry = ?
		");

		my $not_me_sth = $dbh->prepare("
			update ballot set side = ? where panel = ? and entry != ?
		");

		$not_me_sth->execute(127, $panel->id, $entry->id);

		my $side;

		if ($option_one) {

			my $aff_string = $dbh->selectrow_array("
				select event_setting.value
					from event_setting, round
				where round.id = ?
					and round.event = event_setting.event
					and event_setting.tag = ?
			", undef, $panel->round->id, "aff_label");

			$aff_string = "Aff" unless $aff_string;

			$me_sth->execute(1, $panel->id, $entry->id);
			$not_me_sth->execute(2, $panel->id, $entry->id);
			$message = "Entry chooses the ".$aff_string." side";
			$side = $aff_string;

		} elsif ($option_two) {

			my $neg_string = $dbh->selectrow_array("
				select event_setting.value
					from event_setting, round
				where round.id = ?
					and round.event = event_setting.event
					and event_setting.tag = ?
			", undef, $panel->round->id, "neg_label");

			$neg_string = "Neg" unless $neg_string;

			$me_sth->execute(2, $panel->id, $entry->id);
			$not_me_sth->execute(1, $panel->id, $entry->id);
			$message = "Entry chooses the ".$neg_string." side";
			$side = $neg_string;
		}

		$flip{$entry->id}++;
		$flip{"side_chosen_by"} = $person->id;
		$flip{"side_chosen_at"} = DateTime::Format::MySQL->format_datetime($now);
		$flip{"side_locked"}    = 1;
		$flip{"side_chosen"}    = $side;

		my $content = '<span class="eighth"></span>
			<span class="eighth semibold rightalign redtext padsetting"></span>
			<span class="fifth semibold redtext padsetting">Sides chosen!</span>
			<span class="eighth semibold rightalign bluetext">Your Side:</span>
			<span class="sixth semibold bluetext">'.$side.'</span>';

		my %item = (
			id      => $entry->id."_side",
			content => $content
		);

		push @replace, \%item;
		$destroy = $entry->id."_order";

	}

	eval {
		$panel->setting("flip", "json", \%flip);
	};

	eval {
		$panel->setting("flip", "json", \%flip);
	};

	$panel->update();

	if (@replace) {
		$now->subtract(minutes => 1);
		$panel->setting('flip_at', 'date', $now);
		$panel->update();
		$m->comp("/api/flip_monitor.mhtml",
			panel_id => $panel->id,
			decision => "made"
		);
	}

	my %response = (
        error   => 0,
        message => $message
    );

	if (@replace) {
		$response{"replace"} = \@replace;
	}

	if ($destroy) {
		$response{"destroy"} = $destroy;
	}

    $m->print(JSON::encode_json(\%response));
    $m->abort();

</%init>
