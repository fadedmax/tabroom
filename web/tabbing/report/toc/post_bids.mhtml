<%args>
	$tourn
	$tourn_settings
	$perms
	$session  => undef
	$person   => undef
	$event_id => undef
	$view     => undef
	$nopost   => undef
	$mailbids => undef
	$generate => undef
	$publish  => undef
</%args>
<%init>

	my @events;
	my $name;

	if ($event_id eq int($event_id)) {
		my $event = Tab::Event->retrieve($event_id) if $event_id;
		$name = $event->name if $event;
		push @events, $event if $event;

	} elsif ($event_id) {

		@events = Tab::Event->search(
			type  => $event_id,
			tourn => $tourn->id
		);

		$name = uc($event_id)."Events";

	} else {

		@events = $tourn->events;
		$name = "AllEvents";
	}

	@events = sort { $a->name cmp $b->name } @events;
	my $tourn_name = $tourn->name;
	$tourn_name =~ s/[\W_]//g;
	$name =~ s/[\W_]//g;

	my $filename = "TOC-Bids-$tourn_name-$name-".$session;
	my $filepath = $Tab::file_root."tmp/".$filename;
	$person = $session->person if $session;

	$m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		head      => 1,
		linespace => 1,
		array     => 1,
		wide      => 1
	);

	open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	print TEXOUT "\\noindent\n";
	print TEXOUT "\\truncate{7.5in}{\\hfill \\huge \\textbf{".Tab::texify($tourn->name)."}}\n\n";
	print TEXOUT "\\truncate{7.5in}{\\hfill \\LARGE TOC Bid Report } \n\n";
	print TEXOUT "\\smallskip\n\n";
	print TEXOUT "\\normalsize\n";
	print TEXOUT "\\noindent\n";

	my @contacts = $m->comp(
		"/funclib/tourn_admins.mas",
		tourn   => $tourn,
		contact => 1
	);

	print TEXOUT "\\parbox[t]{3.5in}{";
	print TEXOUT "\\textbf{Contact Information}\n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\noindent\n";

	foreach my $contact (@contacts) {
		print TEXOUT "\\truncate{3.5in}{Director Name: \\dotfill ";
		print TEXOUT Tab::texify($contact->first)." ";
		print TEXOUT Tab::texify($contact->last)."}\\newline\n";
		print TEXOUT "Email: \\dotfill ".Tab::texify($contact->email)."\\newline\n" if $contact->email;
		print TEXOUT "Phone: \\dotfill ".Tab::texify(Tab::phone($contact->phone))."\\newline\n" if $contact->phone;
		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";
	}

	print TEXOUT "}\n";
	print TEXOUT "\\hspace{.45in}\n";
	print TEXOUT "\\parbox[t]{3.5in}{";
	print TEXOUT "\\textbf{Tournament Information}\n";
	print TEXOUT "\\smallskip\n";
	print TEXOUT "\\newline\n";
	print TEXOUT "\\noindent\n";

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my $start = $tourn->start->set_time_zone($tz);
	my $end = $tourn->end->set_time_zone($tz);

	print TEXOUT "Dates: \\dotfill ".Tab::pickerdate($start)." -- ".Tab::pickerdate($end)." \\newline\n";

	my $tourn_site = Tab::TournSite->search(tourn => $tourn)->first;

	if ($tourn_site) {
		print TEXOUT "Host School: \\dotfill ".Tab::texify($tourn_site->site->name)."\\newline\n";
	} else {
		print TEXOUT "Host School: \\dotfill Online\\newline\n";
	}

	print TEXOUT "Tournament Location: \\dotfill ".Tab::texify($tourn->city).", ";
	print TEXOUT Tab::texify($contacts[0]->state)."\\newline\n" if $contacts[0];
	print TEXOUT "}\n\n";

	my @bid_events;

	print TEXOUT "\\noindent\\rule{7.5in}{0.4pt}\n";

	EVENT:
	foreach my $event (@events) {

		my $bid = $event->setting("bid_round");
		my $bid_limit = $event->setting("bid_limit");

		next EVENT unless $bid;
		next EVENT if $event->tourn->start > $now;
		next EVENT if $event->tourn->hidden;

		print TEXOUT "\\newline\n";
		print TEXOUT "\\parbox[t]{7.5in}{";

		push @bid_events, $event;
		print TEXOUT "\\parbox[t]{1.5in}{";

		print TEXOUT "\\vspace{1mm}\n";
		print TEXOUT "\\noindent\n";
		print TEXOUT "\\normalsize \\textsb{".Tab::texify($event->name)."} \\smallskip \\newline\n";
		print TEXOUT "\\noindent\n";

		my $bid_round = Tab::Round->retrieve($bid);
		my $silver_bid_round;

		if ($bid_round && $event->setting("nsda_event_category") == 104) {
			$silver_bid_round = Tab::Round->search(
				event => $event->id,
				name  => ($bid_round->name - 1),
				type  => "elim"
			)->first;
		}

		unless ($bid_round) {
			return if $generate;
			$m->abort;
		}

		if ($bid_round && $bid_round->event->id != $event->id) {
			$m->print($event->name." at ".$event->tourn->name." ".$event->tourn->start->year);
			$m->print("bid round is set to a different tournament.  Please try again");
			return if $generate;
			$m->abort;
		}

		my @entries;

		if ($bid_limit) {

			my @results = $m->comp("/tabbing/results/order_entries.mas", round => $bid_round);
			my $results_ref = pop @results;

			my $count;

			if (${$results_ref}{"by_place"}) {
				foreach my $key (sort {$a <=> $b} keys %{${$results_ref}{"by_place"}}) {
					next if ($count >= $bid_limit);
					foreach my $entry_id (@{${${$results_ref}{"by_place"}}{$key}}) {
						push @entries, Tab::Entry->retrieve($entry_id);
						$count++;
					}
				}
			}

		} else {
			@entries = $m->comp( "/funclib/round_entries.mas", round => $bid_round);
		}

		my @ghost_bids;
		my @silver_entries;
		my @all_silver_entries;

		if ($event->type ne "speech"
			&& $event->type ne "congress"
		) {

			my $qual_debate = Tab::Round->search(
				event => $event->id,
				name => ($bid_round->name - 1)
			)->first;

			if ($qual_debate->type eq "elim") {

				@all_silver_entries = $m->comp("/funclib/round_entries.mas", round => $silver_bid_round) if $silver_bid_round;

				my %already_bid = map {$_->id => 1} @entries;

				if ($qual_debate) {
					foreach my $panel ($qual_debate->panels( bye => 1)) {
						foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {
							push @ghost_bids, $entry unless $already_bid{$entry->id}++;
						}
					}
				}

				foreach my $entry (@all_silver_entries) {
					next if $already_bid{$entry->id};
					push @silver_entries, $entry;
				}

			}
		}

		if ($bid_limit) {
			print TEXOUT "Bid at: \\dotfill Top ".Tab::texify($bid_limit)."\n\n";
		} else {
			print TEXOUT "Bid at: \\dotfill ".Tab::texify($bid_round->realname)."\n\n";
		}

		print TEXOUT "Silver Bid: \\dotfill ".Tab::texify($silver_bid_round->realname)."\n\n" if $silver_bid_round;
		print TEXOUT "Total Entries: \\dotfill ".Tab::texify(scalar ($event->entries( active => 1)) )."\n\n";
		print TEXOUT "Bids Given: \\dotfill ".((scalar @entries) + (scalar @ghost_bids))."\n\n";
		print TEXOUT "Silver Bids: \\dotfill ".(scalar @silver_entries)."\n\n" if $silver_bid_round;

		print TEXOUT "}\n";

		unless ($nopost) {

			my $label = "TOC Qualifying Bids";

			my $set = Tab::ResultSet->search(
				event => $event->id,
				label => $label
			)->first;

			$publish = 0 if not defined $publish;

			$set = Tab::ResultSet->create({
				tourn     => $tourn->id,
				event     => $event->id,
				label     => $label,
				generated => $now,
				published => $publish
			}) unless $set;

			my %keys = map {$_->tag => $_} $set->result_keys;

			Tab::ResultValue->set_sql( clear_set => "
				delete result_value.*
				from result, result_value
				where result_value.result = result.id
				and result.result_set = ?
			");

			Tab::Result->set_sql( clear_set => "
				delete result.* from result where result_set = ?
			");

			Tab::ResultValue->sql_clear_set->execute($set->id);
			Tab::Result->sql_clear_set->execute($set->id);

			foreach my $entry (@entries) {

				my $result = Tab::Result->create({
					result_set => $set->id,
					entry      => $entry->id
				});

				unless ($keys{"Bid"}) {
					$keys{"Bid"} = Tab::ResultKey->create({
						tag         => "Bid",
						description => "Bid Earned",
						sort_desc   => 1
					});
				}

				Tab::ResultValue->create({
					result     => $result->id,
					value      => "Full",
					priority   => 1,
					result_key => $keys{"Bid"}
				});

				unless ($keys{"State"}) {
					$keys{"State"} = Tab::ResultKey->create({
						tag         => "State",
						description => "State",
						sort_desc   => 1
					});
				}

				if ($entry->school->chapter->state) {
					Tab::ResultValue->create({
						result     => $result->id,
						value      => $entry->school->chapter->state,
						priority   => 2,
						result_key => $keys{"State"}
					});
				} else {
					Tab::ResultValue->create({
						result     => $result->id,
						value      => $entry->school->chapter->country,
						priority   => 2,
						result_key => $keys{"State"}
					});
			 	}
			}

			my %done;

			foreach my $entry (@ghost_bids) {

				unless ($keys{"Bid"}) {
					$keys{"Bid"} = Tab::ResultKey->create({
						tag         => "Bid",
						description => "Bid Earned",
						sort_desc   => 1
					});
				}

				unless ($keys{"State"}) {
					$keys{"State"} = Tab::ResultKey->create({
						tag         => "State",
						description => "State",
						sort_desc   => 1
					});
				}

				my $result = Tab::Result->create({
					result_set => $set->id,
					entry      => $entry->id
				});

				Tab::ResultValue->create({
					result_key => $keys{"Bid"},
					result     => $result->id,
					priority   => 1,
					value      => "Ghost Bid"
				});

				Tab::ResultValue->create({
					result_key => $keys{"State"},
					result     => $result->id,
					priority   => 2,
					value      => $entry->school->chapter->state
				});
			}

			foreach my $entry (@silver_entries) {

				my $result = Tab::Result->create({
					result_set => $set->id,
					entry      => $entry->id
				});

				unless ($keys{"Bid"}) {
					$keys{"Bid"} = Tab::ResultKey->create({
						tag         => "Bid",
						description => "Bid Earned",
						sort_desc   => 1
					});
				}

				Tab::ResultValue->create({
					result_key => $keys{"Bid"},
					result     => $result->id,
					priority   => 1,
					value      => "Silver Bid",
				});

				Tab::ResultValue->create({
					result_key => $keys{"State"},
					result     => $result->id,
					priority   => 2,
					value      => $entry->school->chapter->state
				});

			}
		}

		print TEXOUT "\\hspace{.25in}\n";
		print TEXOUT "\\parbox[t]{5.5in}{";
		print TEXOUT "\\vspace{1mm}\n";

		print TEXOUT "\\small\n";

		print TEXOUT "{\\bf Earning Bids:}\n\n";
		my $tabular = "\\begin{tabular}{p{2.75in}p{2in}p{.25in}}";

		my $counter;

		foreach my $entry (sort { $a->school->name.$a->name cmp $b->school->name.$b->name } @entries) {

			my @students = map { Tab::texify($_->first." ".$_->last) } $entry->students;
			local $" = " \\& ";

			print TEXOUT "\n \\noindent\n";
			print TEXOUT $tabular;
			print TEXOUT "@students & \\truncate{1.95in}{".Tab::texify($entry->school->name)."} & ";
			print TEXOUT Tab::texify($entry->school->chapter->state)." \n ";
			print TEXOUT "\\end{tabular}\n";

			if ($counter++ > 36) {
				line_break($event->name);
				$counter = -20;
			}
		}

		if (@ghost_bids) {
			print TEXOUT "\\newline\n";
			print TEXOUT "\\noindent\n";
			print TEXOUT "{\\bf Ghost bids:}\n\n";
		}

		foreach my $entry (sort { $a->school->name.$a->name cmp $b->school->name.$b->name } @ghost_bids) {
			my @students = map { Tab::texify($_->first." ".$_->last) } $entry->students;
			local $" = " \\& ";
			print TEXOUT "\\noindent\n";
			print TEXOUT $tabular;
			print TEXOUT "@students & ".Tab::texify($entry->school->name)." & ".Tab::texify($entry->school->chapter->state)." \n ";
			print TEXOUT "\\end{tabular}\n";

			if ($counter++ > 36) {
				line_break($event->name);
				$counter = -20;
			}
		}

		if (@silver_entries) {
			print TEXOUT "\\vspace{1mm}\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\noindent\n";
			print TEXOUT "{\\bf Silver Bids:}\n";
		} else {
			print TEXOUT "\n";
		}

		foreach my $entry (@silver_entries) {
			my @students = map { Tab::texify($_->first." ".$_->last) } $entry->students;
			local $" = " \\& ";

			print TEXOUT "\n \\noindent\n";
			print TEXOUT $tabular;
			print TEXOUT "@students & \\truncate{1.95in}{".Tab::texify($entry->school->name)."} & ";
			print TEXOUT Tab::texify($entry->school->chapter->state)." \n ";
			print TEXOUT "\\end{tabular}\n";

			if ($counter++ > 36) {
				line_break($event->name);
				$counter = -20;
			}

		}

		print TEXOUT "}\n";
		print TEXOUT "\\vspace{1mm}\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\noindent\\rule{7.5in}{0.4pt}\n";
		print TEXOUT "}\n";

	}

	sub line_break {

		my $event_name = shift;
		print TEXOUT "}\n";
		print TEXOUT "}\n";
		print TEXOUT "\\pagebreak\n";
		print TEXOUT "\\newpage\n";
		print TEXOUT "\\parbox[t]{7.5in}{";
		print TEXOUT "\\parbox[t]{1.75in}{\\textsb{".Tab::texify($event_name)." \\newline continued }} \n";
		print TEXOUT "\\parbox[t]{5.5in}{";
		print TEXOUT "\\vspace{1mm}\n";
		print TEXOUT "\\small\n";
	}

	print TEXOUT "\\newpage\n";

	close TEXOUT;

	if (substr($view, 0, 4) eq "Send") {
		$mailbids++;
	}

	if ($mailbids || not defined $generate) {

		Tab::debuglog("I am here with ".scalar @bid_events." events!");

		foreach my $event (@bid_events) {

			unless ($event->type eq "speech" || $event->type eq "congress") {

				$m->comp("/tabbing/report/packet.mhtml",
					tourn          => $tourn,
					tourn_settings => $tourn_settings,
					session        => $session,
					perms          => $perms,
					event_id       => $event->id,
					file_dump      => "$filename"
				);
			}
		}
	}

	if ($mailbids) {

		my $to = $Tab::toc_email;
		my %done;
		my @sends;
		push @sends, $person->email if $person;

		foreach my $contact (
			Tab::Permission->search(
				tourn => $tourn->id,
				tag   => "contact"
			)
		) {

			push @sends, $contact->person->email
				unless $done{$contact->person->email}++;
		}

		foreach my $contact (
			Tab::Permission->search(
				tourn => $tourn->id,
				tag   => "owner"
			)
		) {
			push @sends, $contact->person->email
				unless $done{$contact->person->email}++;
		}

		my $new_filename = $m->comp("/funclib/printout.mas",
			tourn       => $tourn,
			filename    => $filename,
			tail        => 1,
			no_redirect => 1
		);

		my $new_filepath = $Tab::file_root."tmp/".$new_filename.".pdf";

		my $name;
		foreach my $event (@bid_events) {
			$name .= $event->name." ";
		}

		$m->comp("/funclib/send_email.mas",
			from            => $person,
			raw             => $to,
			array			=> \@sends,
			real            => 1,
			body            => "TOC Bid Report: ".$tourn->name." \n Events:  $name",
			subject         => "TOC Bid Results from ".$tourn->name,
			attachment_name => $new_filename,
			attachment_path => $new_filepath,
			no_footer       => 1
		);

		if ($generate) {

			return "Mailbids is $mailbids.  Bids posted and report mailed to the TOC in Kentucky for $name <br />";

		} else {

			my $sent_to = join(", ", @sends);

			$m->redirect("/tabbing/report/index.mhtml?msg=bid report sent the TOC and copied to $sent_to");
		}

	} elsif ($generate) {

		my $name;

		foreach my $event (@bid_events) {
			$name .= $event->name." ";
		}

		return "Mailbids $mailbids Bids posted for $name";

	} else {

		$m->comp("/funclib/printout.mas",
			tourn    => $tourn,
			filename => $filename,
			tail     => 1
		);

	}

</%init>
