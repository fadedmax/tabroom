<%args>
	$round_id => undef
	$event_id => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $event = Tab::Event->retrieve($event_id) if $event_id;

	my @rounds;

	if ($event) {
		@rounds = $event->rounds;
	} else {
		my $round = Tab::Round->retrieve($round_id);
		push @rounds, $round;
		$event = $round->event;
	}

	my $event_type = $event->type;

	my $err;
	my $msg;

	my $min = $event->setting('min_points');
	my $max = $event->setting('max_points');
	my $team = $event->setting('team_points');

	$min = 20 unless $min;
	$max = 30 unless $max;

	my $range = $max - $min;

	foreach my $round (@rounds) {

		foreach my $existing ($m->comp("/funclib/round_scores.mas", round => $round)) {
			$existing->delete;
		}

		my $counter;
		my $judges;

		foreach my $panel ($round->panels) {

			foreach my $panel (Tab::Panel->search( bye => 1, round => $round->id)) {

				foreach my $ballot ($panel->ballots) {
					$ballot->audit(1);
					$ballot->update;
				}

			}

			foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {

				$judges++;
				$counter++;

				my @ballots = shuffle(Tab::Ballot->search(
					panel => $panel->id,
					judge => $judge->id
				));

				my $rank;
				my $winner = 1;
				my @students;
				my %student_ballot;

				BALLOT:
				foreach my $ballot (@ballots) {

					$ballot->audit(1);
					$ballot->update;

					my $entry = $ballot->entry;
					next unless $entry;

					$rank++;
					my $used_student;

					my @ballot_students = shuffle($ballot->entry->students);
					push @students, @ballot_students;

					if ($event_type eq "wsdc") {

						while (scalar @ballot_students > 3) {
							shift @ballot_students;
						}

						my $used_student = $ballot_students[0];
						my $points = int(rand($range / 2));
						$points += $min / 2;

						Tab::Score->create({
							ballot   => $ballot->id,
							tag      => "refute",
							student  => $used_student->id,
							value    => $points
						});
					}

					if ($event_type ne "speech" && $event_type ne "congress") {

						if ($team) { 

							my $points = int(rand($range));
							$points += $min;

							eval {
								Tab::Score->create({
									ballot   => $ballot->id,
									tag      => "point",
									value    => $points
								});
							};

						} else { 
							foreach my $student (@ballot_students) {
								$student_ballot{$student} = $ballot;
							}
						}

						Tab::Score->create({
							ballot => $ballot->id,
							tag    => "winloss",
							value  => $winner,
						});

						$winner = 0;

					} else {

						my $points = int(rand($range));
						$points += $min;

						eval {

							Tab::Score->create({
								ballot   => $ballot->id,
								tag      => "point",
								value    => $points
							});

							Tab::Score->create({
								ballot   => $ballot->id,
								tag      => "rank",
								value    => $rank
							});
						};
					}
				}

				if ($event_type ne "speech" && $event_type ne "congress") {

					my $rank;

					foreach my $student (shuffle @students) {

						$rank++;

						my $wsdc_count;
						next if $wsdc_count++ >= 3 && $event_type eq 'wsdc';

						my $points = int(rand($range));
						$points += $min;

						eval {

							Tab::Score->create({
								ballot   => $student_ballot{$student}->id,
								tag      => "point",
								student  => $student->id,
								value    => $points,
								position => $wsdc_count
							});

							Tab::Score->create({
								ballot   => $student_ballot{$student}->id,
								tag      => "rank",
								student  => $student->id,
								value    => $rank
							});
						};
					}
				}
			}
		}

		$err .= "<br />Round ".$round->realname.": Without assigning judges there are no fake ranks or points.  Assign judges and try again please" unless $judges;
		$msg = "<br />$counter Ranks faked for round ".$round->realname if $judges;
		$round_id = $round->id if $judges;

	}

	$m->redirect("/panel/schemat/show.mhtml?event_id=$event_id&round_id=$round_id&msg=$msg&err=$err");

</%init>

