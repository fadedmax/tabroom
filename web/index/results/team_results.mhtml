<%args>
	$id1       => undef
	$id2       => undef
	$startdate => undef
	$enddate   => undef
</%args>
<%init>

	use JSON;
	use Encode qw(encode_utf8);

	$id1 =~ s/[\D_]//g;
	$id2 =~ s/[\D_]//g;

	unless ($id1) {
		$id1 = $id2;
		undef $id2;
	}

    my $key = $id1."-".$id2."-".$startdate."-".$enddate;

	if ($r->hostname eq "www.tabroom.com") {
		return if $m->cache_self(
			key        => $key,
			expires_in => '120m'
		);
	}

	my $student1 = Tab::Student->retrieve( $id1 ) if $id1;
	my $student2 = Tab::Student->retrieve( $id2 ) if $id2;

	unless ($student1) {
		$m->comp("/funclib/abort.mas", message => "No student found for id $id1");
	}

	my $first1 = $student1->first;
	my $last1  = $student1->last;

	$first1 =~ s/'/&apos;/g;
	$last1 =~ s/'/&apos;/g;
	$first1 =~ s/"/&quot;/g;
	$last1 =~ s/"/&quot;/g;

	my $first2 = $student2->first if $student2;
	my $last2  = $student2->last if $student2;

	$first2 =~ s/'/&apos;/g;
	$last2 =~ s/'/&apos;/g;
	$first2 =~ s/"/&quot;/g;
	$last2 =~ s/"/&quot;/g;

	my ($panels_ref, $summary_ref) = $m->comp(
		"holdme_imscared.mas",
		id1 => $id1,
		id2 => $id2
	);

	my %panels = %{$panels_ref};
	my %summary = %{$summary_ref};

	#print Dumper(%summary);

	my $json_panels = JSON->new->indent(0)->latin1(0)->canonical->allow_blessed->convert_blessed->encode( \%panels );
	my $json_summary = JSON->new->indent(0)->latin1(0)->canonical->allow_blessed->convert_blessed->encode( \%summary );

	#$m->print( $json_panels );

	$m->abort unless $student1 || $student2;
	$m->abort unless $student1->chapter;
	my $chpt_name = $student1->chapter->name;

	$chpt_name .= "/".$student2->chapter->name if (
		$student2
		&& $student2->chapter
		&& $student2->chapter->name ne $chpt_name
	);

</%init>

	  <head>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react-dom.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.js"></script>
	  </head>

		<style>
			/*
				tiny little styling thing to alternate table row colors; should be
				supplanted with tabroom css but for now I can't figure out how to
				get it to run with tablesorter.mas
			*/

			table tbody tr:nth-child(odd) {
				background: #dedede;
			}

		</style>

	  <body>
		<div class="blankfull">
			<div class="full nospace">

				<h4>This page is not working properly</h4>

				<div class="centeralign">

					<span class="threequarters leftalign">
						<p>
							This page isn't working the way it should.
						</p>

						<p>
							But because the original code was written by someone else,
							using libraries we're moving away from, in a very complex
							way, it is very difficult to debug and maintain, as in, "it
							would take me up to a full week."  The code is of scary enough
							quality that it actually caused a Tabroom downtime on 12 October
							2024.
						</p>

						<p>
							That problem is fixed, but while the page isn't showing
							incorrect information exactly, but it is formatting things
							oddly and putting info in odd places, which is utterly
							unsurprising if you read the code.
						</p>

						<p>
							I'm leaving it here for informational purposes only, but
							we're not going to fix it; instead as I work on the rewrite
							of tabroom, this page will be one of the first I rewrite
							entirely in the new operating environment.
						</p>

						<p class="rightalign">
							Luv, Palmer &amp; the NSDA Support Team
						</p>
					</span>
				</div>

				<div class="flexrow">
					<span class="twothirds">
						<h3 class="nospace">
							<% $student1 ? $first1." ".$last1 : "" %>
							<% $student2 ? "&amp; ".$first2." ".$last2 : "" %>
						</h3>

						<h6 class="nospace">
							<% $chpt_name %>
						</h6>
					</span>

					<span class="third rightalign nospace marleft">
						<label for="show_past">
							<span class="hover padvertless padleft padright marno">
								<input
									type = "checkbox"
									name = "show_past"
									id   = "show_past"
									checked
								> Show Prior Seasons
							</span>
						</label>

						<p class='semibold redtext smallish italic rightalign'>
							Click tournament names to view details
						</p>
					</span>
				</div>
			</div>

			<div id="team_season_header"></div>
			<div id="team_season"></div>

			<div class="full marvert nospace">
				<span class="threequarters nospace">
					<div id="header_seasonal_grid_together_this_yr"></div>
				</span>
				<span class="quarter nospace rightalign">
					<div class="redtext semibold hover padvert" id="show_all"></div>
				</span>
			</div>

			<div id="seasonal_grid_together_this_yr"></div>
			<div id="header_tourney_detail_together_this_yr"></div>
			<div id="tourney_detail_together_this_yr"></div>

			<div id="speaker1_season_header"></div>
			<div id="speaker1_season"></div>
			<div id="header_seasonal_grid_speaker1_this_yr"></div>
			<div id="seasonal_grid_speaker1_this_yr"></div>

			<div id="header_tourney_detail_speaker1_this_yr"></div>
			<div id="tourney_detail_speaker1_this_yr"></div>

			<div id="speaker2_season_header"></div>
			<div id="speaker2_season"></div>
			<div id="header_seasonal_grid_speaker2_this_yr"></div>
			<div id="seasonal_grid_speaker2_this_yr"></div>

			<div id="header_tourney_detail_speaker2_this_yr"></div>
			<div id="tourney_detail_speaker2_this_yr"></div>

			<div id="team_season_header_past" class="past"></div>
			<div id="team_season_past" class="past"></div>
			<div id="header_seasonal_grid_together_past" class="past"></div>
			<div id="seasonal_grid_together_past" class="past"></div>
			<br>
			<div id="header_tourney_detail_together_past" class="past"></div>
			<div id="tourney_detail_together_past" class="past"></div>

			<div id="speaker1_header_past" class="past"></div>
			<div id="speaker1_past" class="past"></div>
			<div id="header_seasonal_grid_speaker1_past" class="past"></div>
			<div id="seasonal_grid_speaker1_past" class="past"></div>
			<br>
			<div id="header_tourney_detail_speaker1_past" class="past"></div>
			<div id="tourney_detail_speaker1_past" class="past"></div>

			<div id="speaker2_header_past" class="past"></div>
			<div id="speaker2_past" class="past"></div>
			<div id="header_seasonal_grid_speaker2_past" class="past"></div>
			<div id="seasonal_grid_speaker2_past" class="past"></div>

			<div id="header_tourney_detail_speaker2_past" class="past"></div>
			<div id="tourney_detail_speaker2_past" class="past"></div>

<script type="text/babel">

	function show_all() {
		ReactDOM.render(
			<Header3 txt_val="All rounds together as a team for the current season " />,
			document.getElementById('header_tourney_detail_together_this_yr')
		);
		MakeDetailTable('All', 1, 'tourney_detail_together_this_yr', 3, '', '');
	}

	$(document).ready(function(){
		$("#show_past").click(function(){
			$(".past").toggle();
		});
	});

	function GetCols(myData) {
		var col=[];
		for(var propt in myData){
			for (var key in myData[propt]) {
				col.push({'key':key, 'label': key });
			}
			break;
		}
		return col;
	}

	var Header = React.createClass({
		render: function() {
			return (
				<h4>{txt_val}</h4>
			);
		}
	});

	var Header2 = React.createClass({
		render: function() {
			return (
				<h5 className="martopmore">{txt_val}</h5>
			);
		}
	});


	var Header3 = React.createClass({

		//this function will erase the detail table
		handleClick: function(e) {
			MakeDetailTable('', 0, e.target.parentElement.parentElement.id.replace('header_','', ''), 4), '';
			MakeDetailTable('', 0, e.target.parentElement.parentElement.id, 4, '', '');
		},

		render: function() {
			var stuff = this;
			return (
				<div className="full nospace">
					<span className="fourfifths">
						<h6 onClick={stuff.handleClick}>{stuff.props.txt_val}</h6>
					</span>
					<span className="hover fifth rightalign redtext semibold" onClick={stuff.handleClick} >
						Hide
					</span>
				</div>
			);
		}
	});

	var Table = React.createClass({

		render: function() {
			var headerComponents = this.generateHeaders(),
			rowComponents = this.generateRows();
			return (
				<table >
					<thead><tr className="yellowrow" >{headerComponents}</tr></thead>
					<tbody>{rowComponents}</tbody>
				</table>
			);
		},

		generateHeaders: function() {
			var cols = this.props.cols;  // [{key, label}]
			// generate our header (th) cell components
			return cols.map(function(colData) {
				return <th key={colData.key}>{colData.label}</th>;
			});
		},

		handleClick: function(e) {

			txt_val = e.target.innerHTML;

			if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_together_this_yr' ) {

				txt_val += " for team together on ";
				txt_val += e.target.parentElement.cells[2].innerHTML;

				ReactDOM.render(<Header3 txt_val={txt_val} />,
					document.getElementById('header_tourney_detail_together_this_yr'
				));
				MakeDetailTable(
					e.target.innerHTML,
					1,
					'tourney_detail_together_this_yr',
					3,
					e.target.parentElement.cells[2].innerHTML,
					e.target.parentElement.cells[1].innerHTML
				);
			}

			if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_speaker1_this_yr' ) {
				txt_val += " for <% $first1." ".$last1 %>  on ";
				txt_val += e.target.parentElement.cells[1].innerHTML;
				ReactDOM.render(
					<Header3 txt_val={txt_val} />,
					document.getElementById('header_tourney_detail_speaker1_this_yr')
				);
				MakeDetailTable(e.target.innerHTML,
					1,
					'tourney_detail_speaker1_this_yr',
					1,
					e.target.parentElement.cells[2].innerHTML,
					e.target.parentElement.cells[1].innerHTML
				);
			}

			if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_speaker2_this_yr' ) {
				txt_val += " for <% $student2 ? $first2." ".$last2 : "" %> on ";
				txt_val += e.target.parentElement.cells[2].innerHTML;
				ReactDOM.render(
					<Header3 txt_val={txt_val} />,
					document.getElementById('header_tourney_detail_speaker2_this_yr')
				);
				MakeDetailTable(e.target.innerHTML,
					1,
					'tourney_detail_speaker2_this_yr',
					2,
					e.target.parentElement.cells[2].innerHTML,
					e.target.parentElement.cells[1].innerHTML
				);
			}

			if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_together_past' ) {
				txt_val += " for team together on " + e.target.parentElement.cells[2].innerHTML;
				ReactDOM.render(
					<Header3 txt_val={txt_val} />,
					document.getElementById('header_tourney_detail_together_past')
				);
				MakeDetailTable(
					e.target.innerHTML,
					0,
					'tourney_detail_together_past',
					3,
					e.target.parentElement.cells[2].innerHTML,
					e.target.parentElement.cells[1].innerHTML
				);
			}

			if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_speaker1_past' ) {
				txt_val += " for <% $first1." ".$last1 %> on ";
				txt_val += e.target.parentElement.cells[2].innerHTML;
				ReactDOM.render(
					<Header3 txt_val={txt_val} />,
					document.getElementById('header_tourney_detail_speaker1_past')
				);
				MakeDetailTable(
					e.target.innerHTML,
					 0,
					 'tourney_detail_speaker1_past',
					 1,
					 e.target.parentElement.cells[2].innerHTML,
					 e.target.parentElement.cells[1].innerHTML
				);
			}

			if ( e.target.offsetParent.parentElement.id == 'seasonal_grid_speaker2_past' ) {
				txt_val += " for <% $student2 ? $first2." ".$last2 : "" %> ";
				txt_val += " on " + e.target.parentElement.cells[2].innerHTML;

				ReactDOM.render(
					<Header3 txt_val={txt_val} />,
					document.getElementById('header_tourney_detail_speaker2_past')
				);

				MakeDetailTable(
					e.target.innerHTML,
					 0,
					 'tourney_detail_speaker2_past',
					 2,
					 e.target.parentElement.cells[2].innerHTML,
					 e.target.parentElement.cells[1].innerHTML
				);
			}
		},

		generateRows: function() {

			var cols = this.props.cols;  // [{key, label}]
			var data = this.props.data;
			var stuff = this;

			return data.map(function(item) {
				// handle the column data within each row
				var cells = cols.map(function(colData) {
					// colData.key might be "firstName"
					return <td>{item[colData.key]}</td>;
				});
				return <tr key={item.id}  onClick={ stuff.handleClick }>{cells} </tr>;
			});
		}
	});

	function MakeDetailTable(tourneyName, this_yr, post_to, speaker, str_date, str_event_name) {

		var new_arr = [];

		if ( speaker == 4 ) {
			ReactDOM.render(
				<Table cols={GetCols(new_arr)} data={new_arr}/>,
				document.getElementById(post_to)
			);
			return;
		}

		var sortArray = [];

		for (var row in panels) {

			if (!panels[row]['tourn_start']) {
				continue;
			}

			if (parseInt(row) > 0) {
				sortArray.push(row);
			}
		}

		sortArray = sortArray.sort(function(a, b) {

			if (parseInt(panels[a]['tourn_order']) > parseInt(panels[b]['tourn_order'])) {
				return 1;
			} else if (parseInt(panels[a]['tourn_order']) < parseInt(panels[b]['tourn_order'])) {
				return 0;
			}

			if (parseInt(panels[a]['event_id']) > parseInt(panels[b]['event_id'])) {
				return 1;
			} else if (parseInt(panels[a]['event_id']) < parseInt(panels[b]['event_id'])) {
				return 0;
			}

			if (parseInt(panels[a]['round_name']) > parseInt(panels[b]['round_name'])) {
				return 1;
			} else if (parseInt(panels[a]['round_name']) < parseInt(panels[b]['round_name'])) {
				return 0;
			}

			return -1;

		});

		var found_some = false;

		sortArray.forEach(function(row) {

			var use_me = false;

			if (speaker == 1
				&& panels[row]['speaker1_on_entry'] == 1
				&& ( panels[row]['speaker2_on_entry'] == undefined || panels[row]['speaker2_on_entry'] == 0 )
			) {
				use_me = true;
			}

			if (speaker == 2
				&& panels[row]['speaker1_on_entry'] == undefined
				&& panels[row]['speaker2_on_entry'] == 1
			) {
				use_me = true;
			}

			if (speaker == 3
				&& panels[row]['speaker1_on_entry'] == 1
				&& panels[row]['speaker2_on_entry'] == 1
			) {
				use_me = true;
			}

			str_event_name = panels[row]['event_name'];

			if ( tourneyName == 'All' ) {
				str_date = panels[row]['tourn_start'];
			}

			if ( ( panels[row]['tourn'] == tourneyName || tourneyName == "All" )
				&& panels[row]['this_yr'] == this_yr
				&& use_me == true
				&& str_date == panels[row]['tourn_start']
				&& str_event_name.indexOf(panels[row]['event_name']) !== -1
			) {

				found_some = true;

				var item = {
					"Tournament" : panels[row]['tourn'],
					"Round"      : panels[row]['round_label'],
					"Div"        : panels[row]['event_level'],
					"Side"       : panels[row]['side'],
					"Opponent"   : panels[row]['opponent'],
					"Judge"      : panels[row]['judge_raw'],
					"Decision"   : panels[row]['decision_str']
				};

				if (speaker == 1 || speaker == 3) {
					item["<% $first1." ".$last1 %>"] = panels[row]['speaker1_pts'];
				}

%				if ($student2 && $student2->id) {
					if (speaker == 2 || speaker == 3) {
						item["<% $first2." ".$last2 %>"] = panels[row]['speaker2_pts'];
					}
%				}

				if ( tourneyName !== 'All' ) {
					delete item.Tournament;
				}

				new_arr.push(item);
			}
		});

		if (found_some == false) {
			alert("Click tournament name to see details");
		}

		ReactDOM.render(
			<Table cols={GetCols(new_arr)} data={new_arr}/>,
			document.getElementById(post_to)
		);

	}

	// general use fuction that takes 2 numbers and returns a percentage as s
	// string you can stick in a <td>

	function MakePct(numer, denom) {

		var MakePct;
			if ( denom == null || denom == 0 || isNaN(denom) ) {
				MakePct = "0% (0/0)";
				return MakePct;
			}
			if (numer == null || isNaN(numer) ) { numer = 0; }

			MakePct = ( (numer / denom) * 100).toFixed(1)+"%";
			MakePct = MakePct + " (" + numer + "/" + denom + ")";

		return MakePct;

	}

	//general use fuction that converts the raw JSON into a useable array

	function killNulls(dummy) {
		if ( isNaN(dummy) ) {
			return 0;
		}
		return dummy;
	}

	function MakeArray(strDummy) {

		var prelim_wins        = 0;
		var prelim_rounds      = 0;
		var elim_wins          = 0;
		var elim_rounds        = 0;
		var prelim_ballots     = 0;
		var prelim_ballots_won = 0;
		var elim_ballots       = 0;
		var elim_ballots_won   = 0;
		var myArray            = [];
		var x                  = 0;

		for (var row in summaryTable) {

			if ( row.indexOf(strDummy) !== -1 ) {

				prelim_wins += killNulls(summaryTable[row]['prelim_wins']);
				prelim_rounds += killNulls(summaryTable[row]['prelim_rounds']);
				prelim_ballots += killNulls(summaryTable[row]['prelim_ballots']);
				prelim_ballots_won += killNulls(summaryTable[row]['prelim_ballots_won']);

				elim_wins += killNulls(summaryTable[row]['elim_wins']);
				elim_rounds += killNulls(summaryTable[row]['elim_rounds']);
				elim_ballots += killNulls(summaryTable[row]['elim_ballots']);
				elim_ballots_won += killNulls(summaryTable[row]['elim_ballots_won']);

				var allwins = killNulls(summaryTable[row]['elim_wins']) + killNulls(summaryTable[row]['prelim_wins']);
				var allrounds = killNulls(summaryTable[row]['elim_rounds']) + killNulls(summaryTable[row]['prelim_rounds']);

				myArray.push({
					"Comparison"     : summaryTable[row]['level'],
					"Prelim Rds"     : MakePct(summaryTable[row]['prelim_wins'], summaryTable[row]['prelim_rounds']),
					"Prelim Ballots" : MakePct(summaryTable[row]['prelim_ballots_won'],  summaryTable[row]['prelim_ballots']),
					"Elim Rds"       : MakePct(summaryTable[row]['elim_wins'] , summaryTable[row]['elim_rounds']),
					"Elim Ballots"   : MakePct(summaryTable[row]['elim_ballots_won'] , summaryTable[row]['elim_ballots']),
					"Total"          : MakePct( allwins , allrounds )
				});
			}

		}

		//add summary row
		var allwins = killNulls(elim_wins) + killNulls(prelim_wins);
		var allrounds = killNulls(elim_rounds) + killNulls(prelim_rounds);
		myArray.push({
			"Comparison"     : "Totals",
			"Prelim Rds"     : MakePct(prelim_wins, prelim_rounds),
			"Prelim Ballots" : MakePct(prelim_ballots_won,  prelim_ballots),
			"Elim Rds"       : MakePct(elim_wins , elim_rounds),
			"Elim Ballots"   : MakePct(elim_ballots_won , elim_ballots),
			"Total"          : MakePct(allwins , allrounds )
		});

		return myArray;

	}

	var summaryTable = <% $json_summary %>;
	var myArray=MakeArray('together-this_yr');
	var txt_val="Entry record for the current season";

	// NOW THE BIG SUMMARY TABLE
	// Dump the big object into one you can sort

	var panels = <% $json_panels %>;
	var panel_array=[];

	for (var row in panels) {

		// this gets read in as a string for some godforsaken reason
		panels[row]["tourn_order"] = parseInt(panels[row]["tourn_order"]);

		var temp_row = {};

		for (var fld in panels[row]) {
			temp_row[fld] = panels[row][fld] ;
			temp_row['panel_id'] = row;
		}

		console.log(temp_row.tourn);
		panel_array.push(temp_row);
	}

	// sort panel array in reverse tourn date order; newest tournaments are now
	// first, then sort by round_name Chrome does weird stuff

	panel_array = panel_array.sort(function(a, b) {
		if (!b.tourn_order || !a.tourn_order) {
			return -999999999999999; // this pains me so terribly
		}
		return (parseInt(b.tourn_order) - parseInt(a.tourn_order));
	});

	ReactDOM.render(<Header txt_val={txt_val} />,
		document.getElementById('team_season_header'));

	ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,
		document.getElementById('team_season'));

	// Now repeat for the other tables you want; could put in an array and loop
	// but that just moves the code elsewhere

	//speaker 1 with other partners

	if (summaryTable['cheaters_this_year'] && summaryTable['cheaters_this_year']['<% $student1 %>']) {

		var myArray=MakeArray('speaker1-this_yr');
		var txt_val="Record for " + <% "'".$first1." ".$last1."'" %> + " with others this season";

		ReactDOM.render(<Header txt_val={txt_val} />,
			document.getElementById('speaker1_season_header'));

		ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,
			document.getElementById('speaker1_season'));
	}

	//speaker 2 with other partners
	if (summaryTable['cheaters_this_year'] && summaryTable['cheaters_this_year']['<% $student2 %>']) {
		var myArray=MakeArray('sprk2-this_yr');
		var txt_val="Record for " + <% $student2 ? "'".$first2." ".$last2."'" : "" %> + " with others this season";
		ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('speaker2_season_header'));
		ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('speaker2_season'));
	}

	//team record in previous years
	if (summaryTable['together']) {
		var myArray=MakeArray('together-other_yr');
		var txt_val="Record as a team in previous seasons";
		ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('team_season_header_past'));
		ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('team_season_past'));
	}

	//speaker1 record in previous years
	if (summaryTable['cheaters'] && summaryTable['cheaters']['<% $student1 %>']) {
		var myArray=MakeArray('speaker1-other_yr');
		var txt_val="Record for " + <% "'".$first1." ".$last1."'" %> + " with others in previous years";
		ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('speaker1_header_past'));
		ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('speaker1_past'));
	}

	//speaker2 record in previous years
	if (summaryTable['cheaters'] && summaryTable['cheaters']['<% $student2 %>']) {
		var myArray=MakeArray('speaker2-other_yr');
		var txt_val="Record for <% $student2 ? "'".$first2." ".$last2."'" : "" %> ";
		txt_val += " with others in previous years";
		ReactDOM.render(<Header txt_val={txt_val} />,  document.getElementById('speaker2_header_past'));
		ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('speaker2_past'));
	}

	//function to make tourney-by-tourney seasaonal grid
	function make_seasonal_grid(data_arr, this_yr, both, speaker, myTeam) {

		var myArray = [];
		var use_it;

		var prelimRounds = 0;
		var prelimWins   = 0;
		var prelimLosses = 0;
		var prelimTies   = 0;

		var elimRounds = 0;
		var elimWins   = 0;
		var elimLosses = 0;

		var print_row;
		var colleague;

		//strip rows you don't want
		for (var row in data_arr) {

			var trips;
			var doubs;
			var octos;
			var qtrs;
			var semis;
			var finals;
			var third_speaker;

			data_arr[row]['use_it']=true;

			if (this_yr != data_arr[row]['this_yr'] ) {
				data_arr[row]['use_it'] = false;
			}

			if (typeof data_arr[row]['speaker1_on_entry'] === "undefined") {
				data_arr[row]['speaker1_on_entry'] = 0;
			}

			if (typeof data_arr[row]['speaker2_on_entry'] === "undefined") {
				data_arr[row]['speaker2_on_entry'] = 0;
			}

			if ( both == true && (data_arr[row]['speaker1_on_entry'] == 0 || data_arr[row]['speaker2_on_entry'] == 0) ) {
				data_arr[row]['use_it'] = false;
			}

			if ( both == false  && speaker == 1 &&  data_arr[row]['speaker1_on_entry'] == 0 ) {
				data_arr[row]['use_it'] = false;
			}
			if ( both == false  && speaker == 1 &&  data_arr[row]['speaker2_on_entry'] == 1 ) {
				data_arr[row]['use_it'] = false;
			}
			if ( both == false  && speaker == 2 &&  data_arr[row]['speaker2_on_entry'] == 0 ) {
				data_arr[row]['use_it'] = false;
			}
			if ( both == false  && speaker == 2 &&  data_arr[row]['speaker1_on_entry'] == 1 ) {
				data_arr[row]['use_it'] = false;
			}

		}

		var sortArray = [];

		for (var row in data_arr) {

			if (!data_arr[row]['tourn_start']) {
				continue;
			}

			if (parseInt(row) || row == 0) {
				sortArray.push(row);
			}
		}

		sortArray = sortArray.sort(function(a, b) {

			if (parseInt(data_arr[a]['tourn_order']) > parseInt(data_arr[b]['tourn_order'])) {
				return 1;
			} else if (parseInt(data_arr[a]['tourn_order']) < parseInt(data_arr[b]['tourn_order'])) {
				return 0;
			}

			if (parseInt(data_arr[a]['event_id']) > parseInt(data_arr[b]['event_id'])) {
				return 1;
			} else if (parseInt(data_arr[a]['event_id']) < parseInt(data_arr[b]['event_id'])) {
				return 0;
			}

			if (parseInt(data_arr[a]['round_name']) > parseInt(data_arr[b]['round_name'])) {
				return 1;
			} else if (parseInt(data_arr[a]['round_name']) < parseInt(data_arr[b]['round_name'])) {
				return 0;
			}

			return -1;

		});

		//find the last rows; also, I hate computers.  Can you peek forward?  no.

		var last_event=0;
		var prev_index;
		sortArray.forEach(function(row, idx) {
			data_arr[row]['last_row'] = 0;
			if ( data_arr[row]['event_id'] != last_event && idx > 0 )  { data_arr[prev_index]['last_row'] = 1; }
			if (sortArray.length-1 == idx) { data_arr[row]['last_row'] = 1 ;}
			prev_index = row;
			last_event = data_arr[row]['event_id'];
		});

		sortArray.forEach(function(row, idx) {


			if (data_arr[row]['elim'] == 1 ) {

				elimRounds++;

				if ( data_arr[row]['ballots_won'] > data_arr[row]['ballots_lost']
					|| data_arr[row]['bye']
					|| data_arr[row]['decision_str'] == "W"
				) {
					elimWins++;
				} else if (data_arr[row]['ballots_won'] < data_arr[row]['ballots_lost'] ) {
					elimLosses++;
				}

				if ( data_arr[row]['elim_level'] == "Triple Octo-Finals" ) { trips = data_arr[row]['decision_str']; }
				if ( data_arr[row]['elim_level'] == "Double Octo-Finals" ) { doubs = data_arr[row]['decision_str']; }
				if ( data_arr[row]['elim_level'] == "Octo-Finals" ) { octos = data_arr[row]['decision_str']; }
				if ( data_arr[row]['elim_level'] == "Quarter-Finals" ) { qtrs = data_arr[row]['decision_str']; }
				if ( data_arr[row]['elim_level'] == "Semi-Finals" ) { semis = data_arr[row]['decision_str']; }
				if ( data_arr[row]['elim_level'] == "Finals" ) { finals = data_arr[row]['decision_str']; }

			} else {

				prelimRounds++;

				if (
					(data_arr[row]['ballots_won'] > data_arr[row]['ballots_lost'])
					|| data_arr[row]['bye']
				) {
					prelimWins++;
				} else if (
					(data_arr[row]['ballots_won'] < data_arr[row]['ballots_lost'])
					|| data_arr[row]['forfeit']
				) {
					prelimLosses++;
				} else {
					prelimWins += .5;
					prelimLosses += .5;
					//prelimTies++;
				}
			}

			if ( data_arr[row]['last_row'] == true ) {

				var row_entry_id = data_arr[row]['entry_id'];

				if ( both == true ) {
					colleague= '';
				} else if (summaryTable[row_entry_id]) {
					colleague = summaryTable[row_entry_id]['third_speaker'];
				} else {
				}

				var prelim_record = prelimWins +"-"+ prelimLosses;

				if ( prelimTies > 0 ) {
					prelim_record += "-" + prelimTies
				};

				var arrayObject = {
					"Tournament" : data_arr[row]['tourn'],
					"Division"   : data_arr[row]['event_level'],
					"Date"       : data_arr[row]['tourn_start'],
					"Pre"        : prelim_record,
					"Tri"        : trips ,
					"Dbs"        : doubs ,
					"Oct"        : octos ,
					"Qrt"        : qtrs ,
					"Sem"        : semis ,
					"Fin"        : finals ,
					"Elims"      : elimWins +"-"+ (elimRounds-elimWins),
					"Total"      : (elimWins+prelimWins) +"-"+ (elimRounds+prelimRounds-prelimWins-elimWins)
				};

%				if ($student2) {
					if (myTeam) {

					} else {
						arrayObject['With'] = colleague;
					}
%				}

				myArray.push(arrayObject);
				octos        = "";
				qtrs         = "";
				semis        = "";
				finals       = "";
				trips        = "";
				doubs        = "";
				prelimWins   = 0;
				prelimRounds = 0;
				prelimTies   = 0;
				prelimLosses = 0;
				elimWins     = 0;
				elimRounds   = 0;
				elimLosses   = 0;
			}
		});

		return myArray;
	}

%	if ($student2) {

		var myArray = make_seasonal_grid(panel_array, 1, true, 0, true);
		var txt_val="Entry's tournament grid for current season";

		ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_together_this_yr'));
		ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_together_this_yr'));

		var myArray = make_seasonal_grid(panel_array, 1, false, 1, false);
		if (myArray[0] != null) {
			var txt_val="Tournament grid for " + <% "'".$first1." ".$last1."'" %> + " with others - current season";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_speaker1_this_yr'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_speaker1_this_yr'));
		}

		var myArray = make_seasonal_grid(panel_array, 1, false, 2, false);
		if (myArray[0] != null) {
			var txt_val="Tournament grid for " + <% $student2 ? "'".$first2." ".$last2."'" : "" %> + " with others - current season";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_speaker2_this_yr'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_speaker2_this_yr'));
		}

		var myArray = make_seasonal_grid(panel_array, 0, true, 0, true);
		if (myArray[0] != null) {
			var txt_val="Team tournament grid for previous seasons";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_together_past'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_together_past'));
		}

		var myArray = make_seasonal_grid(panel_array, 0, false, 1, false);
		if (myArray[0] != null) {
			var txt_val="Tournament grid for " + <% "'".$first1." ".$last1."'" %> + " with others - previous seasons";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_speaker1_past'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_speaker1_past'));
		}

		var myArray = make_seasonal_grid(panel_array, 0, false, 2, false);

		if (myArray[0] != null) {
			var txt_val="Tournament grid for " + <% $student2 ? "'".$first2." ".$last2."'" : "" %> + " with others - previous seasons";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_speaker2_past'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_speaker2_past'));
		}
%	} else {

		var myArray = make_seasonal_grid(panel_array, 1, false, 1, false);
		if (myArray[0] != null) {
			var txt_val="Tournament grid for " + <% "'".$first1." ".$last1."'" %> + " - current season";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_speaker1_this_yr'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_speaker1_this_yr'));
		}

		var myArray = make_seasonal_grid(panel_array, 0, false, 1, false);
		if (myArray[0] != null) {
			var txt_val="Tournament grid for " + <% "'".$first1." ".$last1."'" %> + " - previous seasons";
			ReactDOM.render(<Header2 txt_val={txt_val} />,  document.getElementById('header_seasonal_grid_speaker1_past'));
			ReactDOM.render(<Table cols={GetCols(myArray)} data={myArray}/>,  document.getElementById('seasonal_grid_speaker1_past'));
		}

%	}

</script>

	</div>

  </body>
