<%args>
	$tourn_id
	$person   => undef
	$round_id => undef
	$event_id => undef
	$session  => undef
	$defaults => undef
</%args>
<%init>

	if ($round_id && ($r->hostname eq "www.tabroom.com")) {
		my $key = "ROUND_".$round_id;

		if ($ARGS{"invalidate"}) {
			return if $m->cache_self(
				key     => $key,
				expire  => $key
			);
		} else {
			return if $m->cache_self(
				key        => $key,
				expires_in => '5m',
			);
		}
	}

	my $tourn =  eval {
		return Tab::Tourn->retrieve($tourn_id);
	};

	unless ($tourn) {
		$m->comp("/funclib/abort.mas", message => "No tournament found for ID $tourn_id");
	}

	my $dbh = Tab::DBI->db_Main();

	unless ($event_id || (not defined $session)) {
		$event_id = eval {
			return $defaults->{index}{$tourn}{"event"};
		};
	}

	my $sth = $dbh->prepare("
		select
			event.id, event.abbr, event.name, invert.value invert
		from event
			left join event_setting invert
				on invert.event = event.id
				and invert.tag = 'invert_postings'
		where event.tourn = ?
			and (
				exists (
					select round.id
					from round
					where round.event = event.id
					and round.published > 0
				) OR EXISTS (
					select rs.id
						from round_setting rs, round
					where rs.round = round.id
					and round.event = event.id
					and rs.tag = 'publish_entry_list'
					and rs.value = 1
				)
			)
	");

	$sth->execute($tourn->id);
	my $events = $sth->fetchall_hash();
	my %events_by_id = map {$_->{id} => $_} @{$events};

	my $event;

	if ($event_id && $events_by_id{$event_id}) {
		$event = $events_by_id{$event_id};
	} else {
		$event = shift @{$events};
	}

	if ($session
		&& $event
		&& (
			(not defined $defaults->{index}{$tourn})
			|| ($event != $defaults->{index}{$tourn}{"event"})
		)
	) {
		$defaults->{index}{$tourn}{event} = $event->{id};
		$session->default($defaults);
	}

	my $tz = "UTC";
	$tz = $tourn->tz;
	$tz =  $person->tz if $person;

	my $rounds_sth = $dbh->prepare('
        select round.id, round.name, round.label, round.published, round.event, round.type
        	from round, timeslot
		where round.event = ?
			and round.timeslot = timeslot.id

		and (round.published > 0 OR EXISTS
			(
				select rs.id
					from round_setting rs
				where rs.round = round.id
				and rs.tag = "publish_entry_list"
				and rs.value = 1
			)
		)
        order by timeslot DESC, round.name
	');

	$rounds_sth->execute($event->{id});
	my $rounds = $rounds_sth->fetchall_hash();
	my %rounds_by_id = map {$_->{id} => $_} @{$rounds};

	my $current = 0;
	my %min_by_type;
	my %minround_by_type;

	foreach my $round (@{$rounds}) {

		next unless $round->{published};
		next if ($round_id);

		if ($current < $round->{name}) {
			$round_id = $round->{id};
			$current = $round->{name};
		}

		if (
			$min_by_type{$round->{type}} > $round->{name}
			|| (not defined $min_by_type{$round->{type}})
		) {
			$min_by_type{$round->{type}} = $round->{name};
			$minround_by_type{$round->{type}} = $round->{id};
		}
	}

	if ($event && $event->{invert}) {

		my $biggest_type;
		my $current;

		foreach my $type (keys %min_by_type) {
			if ($min_by_type{$type} > $current) {
				$biggest_type = $type;
				$current = $min_by_type{$type};
			}
		}
		$round_id = $minround_by_type{$biggest_type};
	}

    my $webpage = Tab::Webpage->search(
		tourn   => $tourn_id,
		special => "postings"
	)->first;

	my $switch;

	my $round = $rounds_by_id{$round_id};

</%init>

	<div class="main">

		<& /index/tourn/title.mas,
			tourn => $tourn
		&>

        <& /index/tourn/tabbar.mas,
			tourn => $tourn,
			person => $person
		&>

%		if ($round->{published}) {

%			$m->redirect("/index/tourn/postings/round.mhtml?tourn_id=".$tourn->id."&round_id=".$round_id);

%		} elsif ($webpage) {

			<p>
				<% $webpage->content %>
			</p>

%		}

	</div>

	<& "menu.mas",
		tourn_id => $tourn_id,
		event_id => $event->{id},
		round_id => $round->{id}
	&>

