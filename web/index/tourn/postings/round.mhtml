<%args>
	$person   => undef
	$event_id => undef
	$round_id => undef
</%args>
<%init>


	unless ( (not defined $round_id) || ($round_id eq int($round_id))) {
		$m->comp("/funclib/abort.mas", message => "Invalid or multiple roundament IDs sent");
	}

	unless ( (not defined $event_id) || ($event_id eq int($event_id))) {
		$m->comp("/funclib/abort.mas", message => "Invalid or multiple event IDs sent");
	}

	my $key = $round_id."-".$event_id;

	if ($r->hostname eq "www.tabroom.com.") {
		if ($ARGS{"invalidate_silent"}) {
			$m->cache_self(
				key        => $key,
				expire_if  => sub { return 1 }
			);

			$m->clear_buffer();
			$m->print("Cache cleared for $key");
			$m->abort();

		} else {
			return if $m->cache_self(
				key        => $key,
				expires_in => '5m',
				expire_if  => sub { return 1 if defined $ARGS{"invalidate"} }
			);
		}
	}

	my $event = eval {
		return Tab::Event->retrieve($event_id);
	};

	my $round = eval {
		return Tab::Round->retrieve($round_id);
	};

	unless ($round) {
		$m->comp("/funclib/abort.mas",
			message => "Round $round_id not found"
		);
		$m->abort();
	}

	$event = $round->event unless $event;

	unless ($event) {
		$m->comp("/funclib/abort.mas",
			message => "Round $event_id not found"
		);
		$m->abort();
	}
	my $tourn = $event->tourn;

	unless ($round->published && $round->published > 0) {
		$m->print("<div class='blankfull centeralign'>");
		$m->print("<h5>That round is not yet published</h5>");
		$m->print("<p>Please come back soon.</p>");
		$m->print("</div>");
		$m->abort;
	}

	my $event_type = $event->type;
	$event_type = "debate"
		if $event_type eq "policy"
		|| $event_type eq "ld"
		|| $event_type eq "big_questions"
		|| $event_type eq "pf"
		|| $event_type eq "wsdc"
		|| $event_type eq "parli";

</%init>

	<& "menu.mas",
		tourn_id => $tourn->id,
		event_id => $event->id,
		round_id => $round->id
	&>

	<div class="main">

		<& "/index/tourn/title.mas",
			tourn => $tourn
		&>

        <& "/index/tourn/tabbar.mas",
			tourn => $tourn,
			person => $person
		&>

<%perl>
		if ($event) {

			if ($round) {

				my $notes = $round->setting("notes");

				if ($notes) {
</%perl>
					<p class="semibold redtext bigger centeralign padbottom martopmore marbottomless borderbottom">
						<% $notes %>
					</p>
<%perl>
				}

				my $motion = $round->setting("motion");

				if ($motion) {
					if ($round->setting("motion_publish")) {
</%perl>
						<p class="centeralign bigger padtopmore semibold bluetext">
							Motion: <% $motion %>
						</p>
%					}
%				}

%	 			if ( $event_type eq "speech" ) {
					<& show_speech.mas,
						round => $round,
						tourn => $tourn,
						event => $event
					&>
%				}

%	 			if ( $event_type eq "congress" ) {
					<& show_congress.mas, round => $round &>
%				}

%	 			if ( $event_type eq "wudc" ) {
					<& show_wudc.mas, round => $round &>
%				}

% 				if ( $event_type eq "mock_trial") {
					<& show_debate.mas,
						round     => $round,
						no_judges => 1
					&>
%				}

% 				if ( $event_type eq "debate") {
					<& show_debate.mas, round => $round &>
%				}
%			}
%		}

%		my $protocol = $round->protocol;

%		if ($protocol) {

			<div class = "martopmore padtopmore centeralign bluebordertop">
				<span class="twothirds leftalign">
					<p
						class = "bigger semibold"
						title = "the Nethmin Liyanage Experience"
					>
						Tiebreaking Protocol
					</p>
%					foreach my $tiebreak (sort {$a->priority <=> $b->priority} $protocol->tiebreaks) {
						<div class="full odd ltbordertop">
							<span class="eighth semibold">
								<span class="halfspacer"></span>
								<% $tiebreak->priority %>
							</span>
							<span class="fourfifths padvert">
								<& "/funclib/tiebreak_name.mas", tiebreak => $tiebreak &>
							</span>
						</div>
%					}
				</span>
			</div>
%		}

	</div>

